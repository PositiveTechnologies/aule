# Stubs for antlr4.PredictionContext (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class PredictionContext:
    EMPTY = ...  # type: Any
    EMPTY_RETURN_STATE = ...  # type: int
    globalNodeCount = ...  # type: int
    id = ...  # type: Any
    cachedHashCode = ...  # type: Any
    def __init__(self, cachedHashCode) -> None: ...
    def __len__(self): ...
    def isEmpty(self): ...
    def hasEmptyPath(self): ...
    def getReturnState(self, index): ...
    def __hash__(self): ...

def calculateHashCode(parent, returnState): ...
def calculateListsHashCode(parents, returnStates): ...

class PredictionContextCache:
    cache = ...  # type: Any
    def __init__(self) -> None: ...
    def add(self, ctx): ...
    def get(self, ctx): ...
    def __len__(self): ...

class SingletonPredictionContext(PredictionContext):
    @staticmethod
    def create(parent, returnState): ...
    parentCtx = ...  # type: Any
    returnState = ...  # type: Any
    def __init__(self, parent, returnState) -> None: ...
    def __len__(self): ...
    def getParent(self, index): ...
    def getReturnState(self, index): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class EmptyPredictionContext(SingletonPredictionContext):
    def __init__(self) -> None: ...
    def isEmpty(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class ArrayPredictionContext(PredictionContext):
    parents = ...  # type: Any
    returnStates = ...  # type: Any
    def __init__(self, parents, returnStates) -> None: ...
    def isEmpty(self): ...
    def __len__(self): ...
    def getParent(self, index): ...
    def getReturnState(self, index): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

def PredictionContextFromRuleContext(atn, outerContext: Optional[Any] = ...): ...
def merge(a, b, rootIsWildcard, mergeCache): ...
def mergeSingletons(a, b, rootIsWildcard, mergeCache): ...
def mergeRoot(a, b, rootIsWildcard): ...
def mergeArrays(a, b, rootIsWildcard, mergeCache): ...
def combineCommonParents(parents): ...
def getCachedPredictionContext(context, contextCache, visited): ...
def getAllContextNodes(context, nodes: Optional[Any] = ..., visited: Optional[Any] = ...): ...
