# Stubs for antlr4.error.Errors (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

Token = ...  # type: Any
Lexer = ...  # type: Any
Parser = ...  # type: Any
TokenStream = ...  # type: Any
ATNConfigSet = ...  # type: Any
ParserRulecontext = ...  # type: Any
PredicateTransition = ...  # type: Any
BufferedTokenStream = ...  # type: Any

class UnsupportedOperationException(Exception):
    def __init__(self, msg) -> None: ...

class IllegalStateException(Exception):
    def __init__(self, msg) -> None: ...

class CancellationException(IllegalStateException):
    def __init__(self, msg) -> None: ...

class RecognitionException(Exception):
    message = ...  # type: Any
    recognizer = ...  # type: Any
    input = ...  # type: Any
    ctx = ...  # type: Any
    offendingToken = ...  # type: Any
    offendingState = ...  # type: int
    def __init__(self, message: Optional[Any] = ..., recognizer: Optional[Any] = ..., input: Optional[Any] = ..., ctx: Optional[Any] = ...) -> None: ...
    def getExpectedTokens(self): ...

class LexerNoViableAltException(RecognitionException):
    startIndex = ...  # type: Any
    deadEndConfigs = ...  # type: Any
    def __init__(self, lexer, input, startIndex, deadEndConfigs) -> None: ...

class NoViableAltException(RecognitionException):
    deadEndConfigs = ...  # type: Any
    startToken = ...  # type: Any
    offendingToken = ...  # type: Any
    def __init__(self, recognizer, input: Optional[Any] = ..., startToken: Optional[Any] = ..., offendingToken: Optional[Any] = ..., deadEndConfigs: Optional[Any] = ..., ctx: Optional[Any] = ...) -> None: ...

class InputMismatchException(RecognitionException):
    offendingToken = ...  # type: Any
    def __init__(self, recognizer) -> None: ...

class FailedPredicateException(RecognitionException):
    ruleIndex = ...  # type: Any
    predicateIndex = ...  # type: Any
    predicate = ...  # type: Any
    offendingToken = ...  # type: Any
    def __init__(self, recognizer, predicate: Optional[Any] = ..., message: Optional[Any] = ...) -> None: ...
    def formatMessage(self, predicate, message): ...

class ParseCancellationException(CancellationException): ...
