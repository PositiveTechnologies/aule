# Stubs for antlr4.error.ErrorStrategy (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

Parser = ...  # type: Any

class ErrorStrategy:
    def reset(self, recognizer): ...
    def recoverInline(self, recognizer): ...
    def recover(self, recognizer, e): ...
    def sync(self, recognizer): ...
    def inErrorRecoveryMode(self, recognizer): ...
    def reportError(self, recognizer, e): ...

class DefaultErrorStrategy(ErrorStrategy):
    errorRecoveryMode = ...  # type: bool
    lastErrorIndex = ...  # type: int
    lastErrorStates = ...  # type: Any
    def __init__(self) -> None: ...
    def reset(self, recognizer): ...
    def beginErrorCondition(self, recognizer): ...
    def inErrorRecoveryMode(self, recognizer): ...
    def endErrorCondition(self, recognizer): ...
    def reportMatch(self, recognizer): ...
    def reportError(self, recognizer, e): ...
    def recover(self, recognizer, e): ...
    def sync(self, recognizer): ...
    def reportNoViableAlternative(self, recognizer, e): ...
    def reportInputMismatch(self, recognizer, e): ...
    def reportFailedPredicate(self, recognizer, e): ...
    def reportUnwantedToken(self, recognizer): ...
    def reportMissingToken(self, recognizer): ...
    def recoverInline(self, recognizer): ...
    def singleTokenInsertion(self, recognizer): ...
    def singleTokenDeletion(self, recognizer): ...
    def getMissingSymbol(self, recognizer): ...
    def getExpectedTokens(self, recognizer): ...
    def getTokenErrorDisplay(self, t): ...
    def escapeWSAndQuote(self, s): ...
    def getErrorRecoverySet(self, recognizer): ...
    def consumeUntil(self, recognizer, set_): ...

class BailErrorStrategy(DefaultErrorStrategy):
    def recover(self, recognizer, e): ...
    def recoverInline(self, recognizer): ...
    def sync(self, recognizer): ...
