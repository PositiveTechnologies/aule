# Stubs for antlr4.atn.ATNDeserializer (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from antlr4.atn.ATNState import *
from antlr4.atn.Transition import *
from antlr4.atn.LexerAction import *

BASE_SERIALIZED_UUID = ...  # type: Any
SUPPORTED_UUIDS = ...  # type: Any
SERIALIZED_VERSION = ...  # type: int
SERIALIZED_UUID = ...  # type: Any

class ATNDeserializer:
    deserializationOptions = ...  # type: Any
    def __init__(self, options: Optional[Any] = ...) -> None: ...
    def isFeatureSupported(self, feature, actualUuid): ...
    def deserialize(self, data): ...
    data = ...  # type: Any
    pos = ...  # type: int
    def reset(self, data): ...
    def checkVersion(self): ...
    uuid = ...  # type: Any
    def checkUUID(self): ...
    def readATN(self): ...
    def readStates(self, atn): ...
    def readRules(self, atn): ...
    def readModes(self, atn): ...
    def readSets(self, atn): ...
    def readEdges(self, atn, sets): ...
    def readDecisions(self, atn): ...
    def readLexerActions(self, atn): ...
    def generateRuleBypassTransitions(self, atn): ...
    def generateRuleBypassTransition(self, atn, idx): ...
    def stateIsEndStateFor(self, state, idx): ...
    def markPrecedenceDecisions(self, atn): ...
    def verifyATN(self, atn): ...
    def checkCondition(self, condition, message: Optional[Any] = ...): ...
    def readInt(self): ...
    def readInt32(self): ...
    def readLong(self): ...
    def readUUID(self): ...
    edgeFactories = ...  # type: Any
    def edgeFactory(self, atn, type, src, trg, arg1, arg2, arg3, sets): ...
    stateFactories = ...  # type: Any
    def stateFactory(self, type, ruleIndex): ...
    CHANNEL = ...  # type: int
    CUSTOM = ...  # type: int
    MODE = ...  # type: int
    MORE = ...  # type: int
    POP_MODE = ...  # type: int
    PUSH_MODE = ...  # type: int
    SKIP = ...  # type: int
    TYPE = ...  # type: int
    actionFactories = ...  # type: Any
    def lexerActionFactory(self, type, data1, data2): ...
