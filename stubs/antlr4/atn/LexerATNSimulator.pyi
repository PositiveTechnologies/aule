# Stubs for antlr4.atn.LexerATNSimulator (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from antlr4.atn.ATNSimulator import ATNSimulator

class SimState:
    def __init__(self) -> None: ...
    index = ...  # type: int
    line = ...  # type: int
    column = ...  # type: int
    dfaState = ...  # type: Any
    def reset(self): ...

Lexer = ...  # type: Any


class LexerATNSimulator(ATNSimulator):
    debug = ...  # type: bool
    dfa_debug = ...  # type: bool
    MIN_DFA_EDGE = ...  # type: int
    MAX_DFA_EDGE = ...  # type: int
    ERROR = ...  # type: Any
    match_calls = ...  # type: int
    decisionToDFA = ...  # type: Any
    recog = ...  # type: Any
    startIndex = ...  # type: int
    line = ...  # type: int
    column = ...  # type: int
    mode = ...  # type: Any
    prevAccept = ...  # type: Any
    def __init__(self, recog, atn, decisionToDFA, sharedContextCache) -> None: ...
    def copyState(self, simulator): ...
    def match(self, input, mode): ...
    def reset(self): ...
    def matchATN(self, input): ...
    def execATN(self, input, ds0): ...
    def getExistingTargetState(self, s, t): ...
    def computeTargetState(self, input, s, t): ...
    def failOrAccept(self, prevAccept, input, reach, t): ...
    def getReachableConfigSet(self, input, closure, reach, t): ...
    def accept(self, input, lexerActionExecutor, startIndex, index, line, charPos): ...
    def getReachableTarget(self, trans, t): ...
    def computeStartState(self, input, p): ...
    def closure(self, input, config, configs, currentAltReachedAcceptState, speculative, treatEofAsEpsilon): ...
    def getEpsilonTarget(self, input, config, t, configs, speculative, treatEofAsEpsilon): ...
    def evaluatePredicate(self, input, ruleIndex, predIndex, speculative): ...
    def captureSimState(self, settings, input, dfaState): ...
    def addDFAEdge(self, from_, tk, to: Optional[Any] = ..., cfgs: Optional[Any] = ...): ...
    def addDFAState(self, configs): ...
    def getDFA(self, mode): ...
    def getText(self, input): ...
    def consume(self, input): ...
    def getTokenName(self, t): ...
