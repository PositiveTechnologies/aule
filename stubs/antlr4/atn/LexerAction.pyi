# Stubs for antlr4.atn.LexerAction (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from enum import IntEnum

Lexer = ...  # type: Any

class LexerActionType(IntEnum):
    CHANNEL = ...  # type: int
    CUSTOM = ...  # type: int
    MODE = ...  # type: int
    MORE = ...  # type: int
    POP_MODE = ...  # type: int
    PUSH_MODE = ...  # type: int
    SKIP = ...  # type: int
    TYPE = ...  # type: int

class LexerAction:
    actionType = ...  # type: Any
    isPositionDependent = ...  # type: bool
    def __init__(self, action) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class LexerSkipAction(LexerAction):
    INSTANCE = ...  # type: Any
    def __init__(self) -> None: ...
    def execute(self, lexer): ...

class LexerTypeAction(LexerAction):
    type = ...  # type: Any
    def __init__(self, type) -> None: ...
    def execute(self, lexer): ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class LexerPushModeAction(LexerAction):
    mode = ...  # type: Any
    def __init__(self, mode) -> None: ...
    def execute(self, lexer): ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class LexerPopModeAction(LexerAction):
    INSTANCE = ...  # type: Any
    def __init__(self) -> None: ...
    def execute(self, lexer): ...

class LexerMoreAction(LexerAction):
    INSTANCE = ...  # type: Any
    def __init__(self) -> None: ...
    def execute(self, lexer): ...

class LexerModeAction(LexerAction):
    mode = ...  # type: Any
    def __init__(self, mode) -> None: ...
    def execute(self, lexer): ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class LexerCustomAction(LexerAction):
    ruleIndex = ...  # type: Any
    actionIndex = ...  # type: Any
    isPositionDependent = ...  # type: bool
    def __init__(self, ruleIndex, actionIndex) -> None: ...
    def execute(self, lexer): ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class LexerChannelAction(LexerAction):
    channel = ...  # type: Any
    def __init__(self, channel) -> None: ...
    def execute(self, lexer): ...
    def __hash__(self): ...
    def __eq__(self, other): ...

class LexerIndexedCustomAction(LexerAction):
    offset = ...  # type: Any
    action = ...  # type: Any
    isPositionDependent = ...  # type: bool
    def __init__(self, offset, action) -> None: ...
    def execute(self, lexer): ...
    def __hash__(self): ...
    def __eq__(self, other): ...
