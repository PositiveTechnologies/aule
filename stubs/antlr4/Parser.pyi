# Stubs for antlr4.Parser (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from antlr4.Recognizer import Recognizer
from antlr4.tree.Tree import ParseTreeListener

class TraceListener(ParseTreeListener):
    def __init__(self, parser) -> None: ...
    def enterEveryRule(self, ctx): ...
    def visitTerminal(self, node): ...
    def visitErrorNode(self, node): ...
    def exitEveryRule(self, ctx): ...

class Parser(Recognizer):
    bypassAltsAtnCache = ...  # type: Any
    buildParseTrees = ...  # type: bool
    def __init__(self, input) -> None: ...
    def reset(self): ...
    def match(self, ttype): ...
    def matchWildcard(self): ...
    def getParseListeners(self): ...
    def addParseListener(self, listener): ...
    def removeParseListener(self, listener): ...
    def removeParseListeners(self): ...
    def triggerEnterRuleEvent(self): ...
    def triggerExitRuleEvent(self): ...
    def getTokenFactory(self): ...
    def setTokenFactory(self, factory): ...
    def getATNWithBypassAlts(self): ...
    def compileParseTreePattern(self, pattern, patternRuleIndex, lexer: Optional[Any] = ...): ...
    def getInputStream(self): ...
    def setInputStream(self, input): ...
    def getTokenStream(self): ...
    def setTokenStream(self, input): ...
    def getCurrentToken(self): ...
    def notifyErrorListeners(self, msg, offendingToken: Optional[Any] = ..., e: Optional[Any] = ...): ...
    def consume(self): ...
    def addContextToParseTree(self): ...
    state = ...  # type: Any
    def enterRule(self, localctx, state, ruleIndex): ...
    def exitRule(self): ...
    def enterOuterAlt(self, localctx, altNum): ...
    def getPrecedence(self): ...
    def enterRecursionRule(self, localctx, state, ruleIndex, precedence): ...
    def pushNewRecursionContext(self, localctx, state, ruleIndex): ...
    def unrollRecursionContexts(self, parentCtx): ...
    def getInvokingContext(self, ruleIndex): ...
    def precpred(self, localctx, precedence): ...
    def inContext(self, context): ...
    def isExpectedToken(self, symbol): ...
    def getExpectedTokens(self): ...
    def getExpectedTokensWithinCurrentRule(self): ...
    def getRuleIndex(self, ruleName): ...
    def getRuleInvocationStack(self, p: Optional[Any] = ...): ...
    def getDFAStrings(self): ...
    def dumpDFA(self): ...
    def getSourceName(self): ...
    def setTrace(self, trace): ...
