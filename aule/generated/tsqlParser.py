# Generated from tsql.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u01cb")
        buf.write("\u0e8b\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\3\2\7\2\u018c")
        buf.write("\n\2\f\2\16\2\u018f\13\2\3\2\3\2\3\3\3\3\5\3\u0195\n\3")
        buf.write("\3\4\3\4\5\4\u0199\n\4\6\4\u019b\n\4\r\4\16\4\u019c\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\5\5\u01a5\n\5\3\6\3\6\3\6\3\6\3")
        buf.write("\6\5\6\u01ac\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01c1\n\7\3")
        buf.write("\b\3\b\5\b\u01c5\n\b\3\b\5\b\u01c8\n\b\3\b\3\b\5\b\u01cc")
        buf.write("\n\b\3\b\3\b\5\b\u01d0\n\b\3\b\3\b\5\b\u01d4\n\b\3\b\3")
        buf.write("\b\3\b\5\b\u01d9\n\b\3\b\3\b\3\b\5\b\u01de\n\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\5\b\u01e5\n\b\3\b\5\b\u01e8\n\b\3\b\3\b\5")
        buf.write("\b\u01ec\n\b\3\b\5\b\u01ef\n\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\5\b\u01f7\n\b\3\b\5\b\u01fa\n\b\3\b\3\b\3\b\5\b\u01ff")
        buf.write("\n\b\3\b\5\b\u0202\n\b\3\b\3\b\3\b\5\b\u0207\n\b\3\b\3")
        buf.write("\b\3\b\5\b\u020c\n\b\3\b\5\b\u020f\n\b\3\b\3\b\3\b\5\b")
        buf.write("\u0214\n\b\3\b\3\b\3\b\3\b\5\b\u021a\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\5\b\u0221\n\b\3\b\3\b\5\b\u0225\n\b\5\b\u0227\n")
        buf.write("\b\3\b\3\b\3\b\5\b\u022c\n\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\7\b\u0237\n\b\f\b\16\b\u023a\13\b\3\b\3\b\5")
        buf.write("\b\u023e\n\b\5\b\u0240\n\b\3\t\3\t\3\n\3\n\3\n\3\n\3\n")
        buf.write("\3\n\3\n\5\n\u024b\n\n\3\13\5\13\u024e\n\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u0256\n\13\5\13\u0258\n\13\3")
        buf.write("\13\5\13\u025b\n\13\3\13\3\13\5\13\u025f\n\13\3\13\5\13")
        buf.write("\u0262\n\13\3\13\5\13\u0265\n\13\3\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\5\13\u026f\n\13\3\13\3\13\7\13\u0273")
        buf.write("\n\13\f\13\16\13\u0276\13\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u027d\n\13\3\13\3\13\5\13\u0281\n\13\3\13\3\13\5")
        buf.write("\13\u0285\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13")
        buf.write("\u028e\n\13\3\13\3\13\7\13\u0292\n\13\f\13\16\13\u0295")
        buf.write("\13\13\3\13\5\13\u0298\n\13\3\13\5\13\u029b\n\13\3\13")
        buf.write("\3\13\3\f\3\f\3\f\3\f\3\f\7\f\u02a4\n\f\f\f\16\f\u02a7")
        buf.write("\13\f\3\f\5\f\u02aa\n\f\3\r\3\r\3\r\3\r\3\r\5\r\u02b1")
        buf.write("\n\r\3\r\3\r\3\r\5\r\u02b6\n\r\3\16\5\16\u02b9\n\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\5\16\u02c1\n\16\5\16\u02c3")
        buf.write("\n\16\3\16\5\16\u02c6\n\16\3\16\3\16\5\16\u02ca\n\16\3")
        buf.write("\16\5\16\u02cd\n\16\3\16\3\16\5\16\u02d1\n\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u02d8\n\16\3\16\3\16\5\16\u02dc\n")
        buf.write("\16\5\16\u02de\n\16\5\16\u02e0\n\16\3\16\5\16\u02e3\n")
        buf.write("\16\3\16\5\16\u02e6\n\16\3\16\5\16\u02e9\n\16\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u02ef\n\17\3\20\5\20\u02f2\n\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\5\20\u02fa\n\20\5\20\u02fc\n\20")
        buf.write("\3\20\5\20\u02ff\n\20\3\20\3\20\5\20\u0303\n\20\3\20\5")
        buf.write("\20\u0306\n\20\3\20\3\20\3\20\3\20\5\20\u030c\n\20\3\20")
        buf.write("\5\20\u030f\n\20\3\20\3\20\5\20\u0313\n\20\3\20\5\20\u0316")
        buf.write("\n\20\3\20\5\20\u0319\n\20\3\21\3\21\3\21\3\21\3\21\5")
        buf.write("\21\u0320\n\21\3\22\5\22\u0323\n\22\3\22\3\22\5\22\u0327")
        buf.write("\n\22\3\22\5\22\u032a\n\22\3\22\5\22\u032d\n\22\3\22\5")
        buf.write("\22\u0330\n\22\3\23\5\23\u0333\n\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\5\23\u033b\n\23\5\23\u033d\n\23\3\23\3\23\5")
        buf.write("\23\u0341\n\23\3\23\5\23\u0344\n\23\3\23\3\23\3\23\3\23")
        buf.write("\7\23\u034a\n\23\f\23\16\23\u034d\13\23\3\23\5\23\u0350")
        buf.write("\n\23\3\23\3\23\5\23\u0354\n\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\5\23\u035b\n\23\3\23\3\23\5\23\u035f\n\23\5\23\u0361")
        buf.write("\n\23\5\23\u0363\n\23\3\23\5\23\u0366\n\23\3\23\5\23\u0369")
        buf.write("\n\23\3\23\5\23\u036c\n\23\3\24\3\24\3\24\3\24\7\24\u0372")
        buf.write("\n\24\f\24\16\24\u0375\13\24\3\24\3\24\3\24\5\24\u037a")
        buf.write("\n\24\3\24\3\24\3\24\3\24\5\24\u0380\n\24\5\24\u0382\n")
        buf.write("\24\3\25\3\25\5\25\u0386\n\25\3\25\5\25\u0389\n\25\3\25")
        buf.write("\5\25\u038c\n\25\3\26\3\26\3\26\5\26\u0391\n\26\3\26\3")
        buf.write("\26\3\26\5\26\u0396\n\26\3\26\5\26\u0399\n\26\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\5\27\u03a1\n\27\3\27\3\27\5\27\u03a5")
        buf.write("\n\27\3\27\3\27\3\27\7\27\u03aa\n\27\f\27\16\27\u03ad")
        buf.write("\13\27\5\27\u03af\n\27\3\27\3\27\3\27\3\27\3\27\7\27\u03b6")
        buf.write("\n\27\f\27\16\27\u03b9\13\27\5\27\u03bb\n\27\3\27\3\27")
        buf.write("\5\27\u03bf\n\27\3\27\3\27\3\27\3\27\7\27\u03c5\n\27\f")
        buf.write("\27\16\27\u03c8\13\27\5\27\u03ca\n\27\3\30\3\30\5\30\u03ce")
        buf.write("\n\30\3\30\5\30\u03d1\n\30\3\30\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u03df\n\30\3\30")
        buf.write("\3\30\5\30\u03e3\n\30\3\30\5\30\u03e6\n\30\3\30\3\30\5")
        buf.write("\30\u03ea\n\30\3\30\5\30\u03ed\n\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\5\31\u03f4\n\31\3\31\5\31\u03f7\n\31\3\31\3\31\3")
        buf.write("\31\7\31\u03fc\n\31\f\31\16\31\u03ff\13\31\3\31\5\31\u0402")
        buf.write("\n\31\5\31\u0404\n\31\3\31\3\31\3\31\3\31\7\31\u040a\n")
        buf.write("\31\f\31\16\31\u040d\13\31\5\31\u040f\n\31\3\31\3\31\5")
        buf.write("\31\u0413\n\31\3\31\3\31\3\31\3\32\3\32\5\32\u041a\n\32")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0425")
        buf.write("\n\33\f\33\16\33\u0428\13\33\5\33\u042a\n\33\3\33\3\33")
        buf.write("\3\33\3\33\5\33\u0430\n\33\3\33\3\33\3\33\7\33\u0435\n")
        buf.write("\33\f\33\16\33\u0438\13\33\3\33\3\33\5\33\u043c\n\33\3")
        buf.write("\33\3\33\3\33\5\33\u0441\n\33\3\33\3\33\3\33\3\34\3\34")
        buf.write("\5\34\u0448\n\34\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\5\36\u0453\n\36\3\36\3\36\3\36\3\36\7\36\u0459")
        buf.write("\n\36\f\36\16\36\u045c\13\36\5\36\u045e\n\36\3\36\3\36")
        buf.write("\3\36\3\36\7\36\u0464\n\36\f\36\16\36\u0467\13\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \7 \u0475\n ")
        buf.write("\f \16 \u0478\13 \3 \3 \3 \3 \5 \u047e\n \3 \3 \3 \5 ")
        buf.write("\u0483\n \3 \5 \u0486\n \3!\3!\3!\3!\3!\3!\7!\u048e\n")
        buf.write("!\f!\16!\u0491\13!\5!\u0493\n!\3!\5!\u0496\n!\3!\3!\3")
        buf.write("!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7\"\u04a2\n\"\f\"\16\"\u04a5")
        buf.write("\13\"\5\"\u04a7\n\"\3\"\5\"\u04aa\n\"\3\"\3\"\7\"\u04ae")
        buf.write("\n\"\f\"\16\"\u04b1\13\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3")
        buf.write("#\7#\u04bc\n#\f#\16#\u04bf\13#\5#\u04c1\n#\3#\5#\u04c4")
        buf.write("\n#\3#\3#\7#\u04c8\n#\f#\16#\u04cb\13#\3#\3#\3#\5#\u04d0")
        buf.write("\n#\3#\3#\3$\3$\3$\3$\5$\u04d8\n$\3$\5$\u04db\n$\3$\3")
        buf.write("$\5$\u04df\n$\3$\3$\5$\u04e3\n$\3$\5$\u04e6\n$\3%\3%\3")
        buf.write("%\5%\u04eb\n%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u04f7\n")
        buf.write("&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\5\'\u0507\n\'\3\'\3\'\5\'\u050b\n\'\3\'\3\'\3\'\3")
        buf.write("\'\5\'\u0511\n\'\5\'\u0513\n\'\3\'\5\'\u0516\n\'\3(\3")
        buf.write("(\3(\3(\3(\3(\5(\u051e\n(\3(\3(\7(\u0522\n(\f(\16(\u0525")
        buf.write("\13(\3(\3(\3(\5(\u052a\n(\3(\3(\3(\5(\u052f\n(\3(\5(\u0532")
        buf.write("\n(\3)\3)\3)\3)\3)\7)\u0539\n)\f)\16)\u053c\13)\3)\3)")
        buf.write("\3*\3*\3*\3*\3*\5*\u0545\n*\3+\3+\3+\3+\3+\3+\3+\5+\u054e")
        buf.write("\n+\3+\3+\3+\3+\7+\u0554\n+\f+\16+\u0557\13+\5+\u0559")
        buf.write("\n+\3+\3+\3+\3+\3+\5+\u0560\n+\3+\5+\u0563\n+\3,\3,\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5")
        buf.write("-\u058b\n-\3-\5-\u058e\n-\3.\3.\3.\3.\5.\u0594\n.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\5.\u05a0\n.\5.\u05a2\n.\3.\5")
        buf.write(".\u05a5\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\3/\5/\u05bd\n/\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\5\60\u05c8\n\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\3\60\5\60\u05d0\n\60\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\3\61\7\61\u05d9\n\61\f\61\16\61\u05dc\13\61")
        buf.write("\7\61\u05de\n\61\f\61\16\61\u05e1\13\61\5\61\u05e3\n\61")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u05eb\n\62\3\63\3")
        buf.write("\63\3\63\3\63\3\64\3\64\3\64\3\64\5\64\u05f5\n\64\3\65")
        buf.write("\3\65\3\65\3\66\3\66\3\66\3\67\3\67\38\38\39\39\3:\3:")
        buf.write("\3:\3:\3;\3;\3;\3;\3;\3;\3;\3;\5;\u060f\n;\3;\3;\3;\3")
        buf.write(";\5;\u0615\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0620\n;\3")
        buf.write("<\3<\3<\3=\3=\3=\3>\3>\3>\3>\3>\3>\5>\u062e\n>\3?\3?\3")
        buf.write("?\3?\3?\3?\5?\u0636\n?\3@\3@\3@\3@\3@\5@\u063d\n@\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\5A\u0654\nA\3B\3B\3B\3B\3B\3C\3C\3C\3C\3C\3C\5C\u0661")
        buf.write("\nC\3D\3D\3D\3D\5D\u0667\nD\3D\3D\3D\5D\u066c\nD\3D\5")
        buf.write("D\u066f\nD\3E\3E\3E\3E\5E\u0675\nE\3E\3E\3E\7E\u067a\n")
        buf.write("E\fE\16E\u067d\13E\3E\5E\u0680\nE\3F\3F\5F\u0684\nF\3")
        buf.write("G\3G\3G\3G\5G\u068a\nG\3G\3G\3G\7G\u068f\nG\fG\16G\u0692")
        buf.write("\13G\3G\5G\u0695\nG\3H\3H\3H\3H\5H\u069b\nH\3H\3H\3H\7")
        buf.write("H\u06a0\nH\fH\16H\u06a3\13H\3H\3H\3H\3H\5H\u06a9\nH\3")
        buf.write("H\5H\u06ac\nH\3I\3I\3I\3I\5I\u06b2\nI\3I\3I\3I\7I\u06b7")
        buf.write("\nI\fI\16I\u06ba\13I\3I\5I\u06bd\nI\3J\3J\3J\3J\3J\5J")
        buf.write("\u06c4\nJ\3J\3J\3J\3K\3K\3K\3K\5K\u06cd\nK\3K\3K\5K\u06d1")
        buf.write("\nK\3L\3L\3L\3L\5L\u06d7\nL\3L\3L\3L\7L\u06dc\nL\fL\16")
        buf.write("L\u06df\13L\3L\5L\u06e2\nL\3M\3M\3M\3M\3M\3M\3M\3N\3N")
        buf.write("\3N\3N\5N\u06ef\nN\3N\3N\3O\3O\5O\u06f5\nO\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0706\nQ\3Q\3Q\5")
        buf.write("Q\u070a\nQ\3Q\3Q\3Q\3R\3R\3R\5R\u0712\nR\3R\3R\5R\u0716")
        buf.write("\nR\3R\3R\3R\3R\7R\u071c\nR\fR\16R\u071f\13R\3R\5R\u0722")
        buf.write("\nR\5R\u0724\nR\3S\3S\5S\u0728\nS\3S\3S\5S\u072c\nS\3")
        buf.write("S\3S\5S\u0730\nS\3S\3S\5S\u0734\nS\3S\3S\3S\3S\5S\u073a")
        buf.write("\nS\3S\3S\5S\u073e\nS\5S\u0740\nS\3T\3T\3T\5T\u0745\n")
        buf.write("T\3T\3T\3T\3T\7T\u074b\nT\fT\16T\u074e\13T\5T\u0750\n")
        buf.write("T\3T\5T\u0753\nT\3T\3T\3T\3T\3T\7T\u075a\nT\fT\16T\u075d")
        buf.write("\13T\3T\3T\5T\u0761\nT\3T\3T\3T\5T\u0766\nT\3T\5T\u0769")
        buf.write("\nT\5T\u076b\nT\3U\3U\5U\u076f\nU\3U\3U\5U\u0773\nU\3")
        buf.write("U\5U\u0776\nU\3U\3U\5U\u077a\nU\3V\3V\3W\3W\5W\u0780\n")
        buf.write("W\3W\3W\3W\5W\u0785\nW\3W\3W\3W\3W\3W\5W\u078c\nW\5W\u078e")
        buf.write("\nW\3W\3W\5W\u0792\nW\3W\3W\3W\3W\7W\u0798\nW\fW\16W\u079b")
        buf.write("\13W\3W\3W\3W\5W\u07a0\nW\3W\3W\5W\u07a4\nW\3W\5W\u07a7")
        buf.write("\nW\3W\3W\3W\3W\3W\3W\3W\5W\u07b0\nW\3W\5W\u07b3\nW\5")
        buf.write("W\u07b5\nW\3X\3X\3X\3X\3X\3X\3X\5X\u07be\nX\3X\3X\3X\3")
        buf.write("X\3X\3X\3X\3X\3X\5X\u07c9\nX\3X\3X\5X\u07cd\nX\5X\u07cf")
        buf.write("\nX\5X\u07d1\nX\3Y\3Y\3Y\3Y\5Y\u07d7\nY\3Y\3Y\3Y\5Y\u07dc")
        buf.write("\nY\3Y\3Y\3Y\3Y\3Y\5Y\u07e3\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Y\5Y\u07f0\nY\5Y\u07f2\nY\5Y\u07f4\nY\3Y\5Y\u07f7")
        buf.write("\nY\3Y\5Y\u07fa\nY\3Z\3Z\3Z\3Z\3Z\5Z\u0801\nZ\3Z\5Z\u0804")
        buf.write("\nZ\3Z\3Z\3Z\3Z\5Z\u080a\nZ\3Z\3Z\3Z\5Z\u080f\nZ\5Z\u0811")
        buf.write("\nZ\3Z\5Z\u0814\nZ\3Z\3Z\3Z\3Z\5Z\u081a\nZ\3Z\3Z\3Z\3")
        buf.write("Z\3Z\3Z\5Z\u0822\nZ\5Z\u0824\nZ\3Z\5Z\u0827\nZ\3Z\3Z\5")
        buf.write("Z\u082b\nZ\3Z\5Z\u082e\nZ\3Z\3Z\3Z\3Z\5Z\u0834\nZ\3Z\5")
        buf.write("Z\u0837\nZ\3Z\3Z\5Z\u083b\nZ\3Z\5Z\u083e\nZ\3Z\3Z\3Z\3")
        buf.write("Z\5Z\u0844\nZ\3Z\5Z\u0847\nZ\5Z\u0849\nZ\3[\3[\5[\u084d")
        buf.write("\n[\3\\\3\\\3\\\5\\\u0852\n\\\3]\3]\3]\3]\3]\3]\5]\u085a")
        buf.write("\n]\3]\3]\5]\u085e\n]\3]\5]\u0861\n]\3^\3^\3^\5^\u0866")
        buf.write("\n^\3_\3_\3_\3_\3`\3`\5`\u086e\n`\3`\3`\3`\5`\u0873\n")
        buf.write("`\3a\3a\3a\3a\3a\3b\3b\5b\u087c\nb\3b\7b\u087f\nb\fb\16")
        buf.write("b\u0882\13b\3c\3c\5c\u0886\nc\3d\3d\3d\3d\5d\u088c\nd")
        buf.write("\3d\3d\5d\u0890\nd\3d\5d\u0893\nd\3d\3d\5d\u0897\nd\3")
        buf.write("d\3d\3d\3d\5d\u089d\nd\3d\3d\3d\3d\3d\3d\5d\u08a5\nd\3")
        buf.write("d\3d\3d\5d\u08aa\nd\5d\u08ac\nd\3d\5d\u08af\nd\3d\7d\u08b2")
        buf.write("\nd\fd\16d\u08b5\13d\3e\3e\5e\u08b9\ne\3e\5e\u08bc\ne")
        buf.write("\3e\3e\3e\5e\u08c1\ne\3e\5e\u08c4\ne\3e\5e\u08c7\ne\3")
        buf.write("e\3e\3e\3e\5e\u08cd\ne\3e\3e\3e\3e\3e\3e\5e\u08d5\ne\3")
        buf.write("e\3e\3e\3e\3e\3e\5e\u08dd\ne\3e\5e\u08e0\ne\5e\u08e2\n")
        buf.write("e\3f\3f\5f\u08e6\nf\3f\3f\3f\5f\u08eb\nf\3f\5f\u08ee\n")
        buf.write("f\3f\3f\3f\5f\u08f3\nf\3f\3f\5f\u08f7\nf\3f\3f\5f\u08fb")
        buf.write("\nf\3f\3f\3f\3f\5f\u0901\nf\3f\3f\3f\3f\3f\3f\5f\u0909")
        buf.write("\nf\3f\3f\5f\u090d\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3")
        buf.write("f\3f\3f\3f\5f\u091d\nf\3f\5f\u0920\nf\5f\u0922\nf\3g\3")
        buf.write("g\3g\3g\3g\3g\3g\3g\3g\5g\u092d\ng\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\5h\u0938\nh\3i\3i\3i\3i\3i\7i\u093f\ni\fi\16i")
        buf.write("\u0942\13i\3i\3i\3j\3j\3j\3j\3j\5j\u094b\nj\3k\3k\3k\3")
        buf.write("k\3k\3k\3k\3k\5k\u0955\nk\5k\u0957\nk\5k\u0959\nk\3k\5")
        buf.write("k\u095c\nk\3k\5k\u095f\nk\3k\3k\3k\3k\3k\3k\3k\3k\3k\5")
        buf.write("k\u096a\nk\5k\u096c\nk\5k\u096e\nk\3k\5k\u0971\nk\3l\5")
        buf.write("l\u0974\nl\3l\5l\u0977\nl\3l\5l\u097a\nl\3l\5l\u097d\n")
        buf.write("l\3l\5l\u0980\nl\3l\3l\3l\3m\3m\3m\3m\3m\3m\3m\5m\u098c")
        buf.write("\nm\3m\5m\u098f\nm\3m\5m\u0992\nm\3m\3m\3m\3m\3m\7m\u0999")
        buf.write("\nm\fm\16m\u099c\13m\5m\u099e\nm\3m\5m\u09a1\nm\3n\3n")
        buf.write("\3n\3n\3n\5n\u09a8\nn\3n\5n\u09ab\nn\3n\3n\3n\3n\3n\3")
        buf.write("n\3n\3n\3n\3n\3n\3n\5n\u09b9\nn\3n\5n\u09bc\nn\3n\3n\3")
        buf.write("n\3n\3n\5n\u09c3\nn\3n\3n\3n\3n\3n\3n\3n\3n\3n\5n\u09ce")
        buf.write("\nn\3o\3o\5o\u09d2\no\3p\3p\3p\3p\3p\3p\3p\3p\3p\6p\u09dd")
        buf.write("\np\rp\16p\u09de\3p\3p\5p\u09e3\np\3p\3p\3p\3p\6p\u09e9")
        buf.write("\np\rp\16p\u09ea\3p\3p\5p\u09ef\np\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0a01\np\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\3p\3p\3p\3p\3p\7p\u0a10\np\fp\16p\u0a13\13")
        buf.write("p\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0a1d\nq\3r\3r\3s\3s\3s\5")
        buf.write("s\u0a24\ns\3s\3s\3s\7s\u0a29\ns\fs\16s\u0a2c\13s\3t\3")
        buf.write("t\3t\3t\3t\5t\u0a33\nt\3t\3t\3t\3t\3t\3u\3u\5u\u0a3c\n")
        buf.write("u\3u\3u\5u\u0a40\nu\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0a4a\n")
        buf.write("u\3v\3v\3v\7v\u0a4f\nv\fv\16v\u0a52\13v\3w\3w\3w\7w\u0a57")
        buf.write("\nw\fw\16w\u0a5a\13w\3x\3x\3x\7x\u0a5f\nx\fx\16x\u0a62")
        buf.write("\13x\3y\5y\u0a65\ny\3y\3y\3z\3z\3z\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0a7b\nz\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\5z\u0a84\nz\3z\3z\3z\3z\5z\u0a8a\nz\3z\3z\3z\3z\5")
        buf.write("z\u0a90\nz\3z\3z\3z\3z\5z\u0a96\nz\3z\3z\3z\3z\3z\3z\3")
        buf.write("z\3z\5z\u0aa0\nz\3{\3{\3{\3{\3{\5{\u0aa7\n{\3{\7{\u0aaa")
        buf.write("\n{\f{\16{\u0aad\13{\3|\3|\5|\u0ab1\n|\3|\3|\5|\u0ab5")
        buf.write("\n|\3|\3|\3|\3|\3|\5|\u0abc\n|\3}\3}\5}\u0ac0\n}\3}\5")
        buf.write("}\u0ac3\n}\3}\3}\3}\5}\u0ac8\n}\3}\3}\5}\u0acc\n}\3}\3")
        buf.write("}\5}\u0ad0\n}\3}\3}\3}\3}\3}\7}\u0ad7\n}\f}\16}\u0ada")
        buf.write("\13}\5}\u0adc\n}\3}\3}\5}\u0ae0\n}\3~\3~\3~\5~\u0ae5\n")
        buf.write("~\3~\3~\5~\u0ae9\n~\3\177\3\177\3\177\3\177\3\177\3\177")
        buf.write("\3\177\5\177\u0af2\n\177\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\5\u0080\u0af9\n\u0080\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\7\u0081\u0b00\n\u0081\f\u0081\16\u0081")
        buf.write("\u0b03\13\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u0b0e\n\u0081")
        buf.write("\5\u0081\u0b10\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\5\u0082\u0b18\n\u0082\3\u0082\3\u0082")
        buf.write("\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0b20\n\u0082")
        buf.write("\3\u0082\5\u0082\u0b23\n\u0082\5\u0082\u0b25\n\u0082\3")
        buf.write("\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0b2c\n")
        buf.write("\u0083\3\u0084\3\u0084\5\u0084\u0b30\n\u0084\3\u0085\3")
        buf.write("\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\7\u0086")
        buf.write("\u0b39\n\u0086\f\u0086\16\u0086\u0b3c\13\u0086\3\u0086")
        buf.write("\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\7\u0087\u0b5b\n\u0087\f\u0087\16\u0087\u0b5e\13\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087")
        buf.write("\u0b6d\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088")
        buf.write("\u0b73\n\u0088\3\u0089\3\u0089\3\u0089\7\u0089\u0b78\n")
        buf.write("\u0089\f\u0089\16\u0089\u0b7b\13\u0089\3\u008a\3\u008a")
        buf.write("\3\u008a\5\u008a\u0b80\n\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\5\u008a\u0b85\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\5\u008a\u0b8d\n\u008a\3\u008a\5\u008a")
        buf.write("\u0b90\n\u008a\5\u008a\u0b92\n\u008a\3\u008b\3\u008b\3")
        buf.write("\u008b\7\u008b\u0b97\n\u008b\f\u008b\16\u008b\u0b9a\13")
        buf.write("\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c")
        buf.write("\u0ba1\n\u008c\3\u008d\3\u008d\7\u008d\u0ba5\n\u008d\f")
        buf.write("\u008d\16\u008d\u0ba8\13\u008d\3\u008e\3\u008e\5\u008e")
        buf.write("\u0bac\n\u008e\3\u008e\3\u008e\5\u008e\u0bb0\n\u008e\3")
        buf.write("\u008e\3\u008e\3\u008e\5\u008e\u0bb5\n\u008e\5\u008e\u0bb7")
        buf.write("\n\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e")
        buf.write("\u0bbe\n\u008e\3\u008e\3\u008e\5\u008e\u0bc2\n\u008e\3")
        buf.write("\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0bc9\n")
        buf.write("\u008e\5\u008e\u0bcb\n\u008e\5\u008e\u0bcd\n\u008e\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u0090\5\u0090\u0bd8\n\u0090\3\u0090\3\u0090\5\u0090")
        buf.write("\u0bdc\n\u0090\5\u0090\u0bde\n\u0090\3\u0090\5\u0090\u0be1")
        buf.write("\n\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\5\u0090\u0bf1\n\u0090\3\u0091\3\u0091\5\u0091")
        buf.write("\u0bf5\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\3\u0092\3\u0092\3\u0092\7\u0092\u0c07\n\u0092")
        buf.write("\f\u0092\16\u0092\u0c0a\13\u0092\3\u0092\5\u0092\u0c0d")
        buf.write("\n\u0092\3\u0092\3\u0092\5\u0092\u0c11\n\u0092\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\5\u0094\u0c1c\n\u0094\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\5\u0095\u0c23\n\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0c39\n\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\5\u0095\u0c73\n\u0095\3\u0095\3\u0095\5\u0095\u0c77\n")
        buf.write("\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095")
        buf.write("\u0c85\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0098\5\u0098")
        buf.write("\u0c92\n\u0098\3\u0098\3\u0098\3\u0099\3\u0099\5\u0099")
        buf.write("\u0c98\n\u0099\3\u009a\5\u009a\u0c9b\n\u009a\3\u009a\3")
        buf.write("\u009a\3\u009a\3\u009a\7\u009a\u0ca1\n\u009a\f\u009a\16")
        buf.write("\u009a\u0ca4\13\u009a\3\u009a\3\u009a\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009b\7\u009b\u0cad\n\u009b\f\u009b")
        buf.write("\16\u009b\u0cb0\13\u009b\3\u009b\3\u009b\3\u009c\5\u009c")
        buf.write("\u0cb5\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\7\u009c\u0cbc\n\u009c\f\u009c\16\u009c\u0cbf\13\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\7\u009c\u0ccd")
        buf.write("\n\u009c\f\u009c\16\u009c\u0cd0\13\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\5\u009c\u0cd5\n\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\5\u009c\u0cdd\n\u009c\3\u009d")
        buf.write("\3\u009d\5\u009d\u0ce1\n\u009d\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\7\u009e\u0ce7\n\u009e\f\u009e\16\u009e\u0cea")
        buf.write("\13\u009e\3\u009e\3\u009e\3\u009f\3\u009f\5\u009f\u0cf0")
        buf.write("\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0cfb\n\u00a0\f\u00a0")
        buf.write("\16\u00a0\u0cfe\13\u00a0\3\u00a1\3\u00a1\3\u00a1\7\u00a1")
        buf.write("\u0d03\n\u00a1\f\u00a1\16\u00a1\u0d06\13\u00a1\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\5\u00a2\u0d12\n\u00a2\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0d19\n\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0d1f\n\u00a3\3\u00a3")
        buf.write("\3\u00a3\5\u00a3\u0d23\n\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0d34")
        buf.write("\n\u00a3\3\u00a4\5\u00a4\u0d37\n\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0d40")
        buf.write("\n\u00a5\3\u00a5\5\u00a5\u0d43\n\u00a5\3\u00a5\5\u00a5")
        buf.write("\u0d46\n\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7")
        buf.write("\u0d53\n\u00a7\3\u00a8\3\u00a8\5\u00a8\u0d57\n\u00a8\3")
        buf.write("\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9")
        buf.write("\u0d5f\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa")
        buf.write("\u0d65\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\7\u00ab")
        buf.write("\u0d6b\n\u00ab\f\u00ab\16\u00ab\u0d6e\13\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0d74\n\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0d7a\n\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0d89")
        buf.write("\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac")
        buf.write("\3\u00ac\5\u00ac\u0d92\n\u00ac\3\u00ac\3\u00ac\3\u00ad")
        buf.write("\3\u00ad\5\u00ad\u0d98\n\u00ad\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\5\u00ae\u0d9e\n\u00ae\3\u00ae\5\u00ae\u0da1\n")
        buf.write("\u00ae\3\u00ae\3\u00ae\5\u00ae\u0da5\n\u00ae\3\u00ae\3")
        buf.write("\u00ae\3\u00ae\7\u00ae\u0daa\n\u00ae\f\u00ae\16\u00ae")
        buf.write("\u0dad\13\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af")
        buf.write("\5\u00af\u0db4\n\u00af\3\u00af\5\u00af\u0db7\n\u00af\3")
        buf.write("\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0dbd\n\u00af\3")
        buf.write("\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0dc3\n\u00af\5")
        buf.write("\u00af\u0dc5\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5")
        buf.write("\u00af\u0dcb\n\u00af\3\u00af\5\u00af\u0dce\n\u00af\5\u00af")
        buf.write("\u0dd0\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af")
        buf.write("\u0dd6\n\u00af\5\u00af\u0dd8\n\u00af\3\u00af\3\u00af\3")
        buf.write("\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0de6\n\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0ded\n\u00b0")
        buf.write("\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0df4")
        buf.write("\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1")
        buf.write("\u0dfb\n\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\5\u00b2\u0e02\n\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\5\u00b3\u0e09\n\u00b3\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\3\u00b3\5\u00b3\u0e10\n\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b4\3\u00b4\5\u00b4\u0e16\n\u00b4\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\5\u00b5\u0e1b\n\u00b5\3\u00b5\3\u00b5\3\u00b6")
        buf.write("\3\u00b6\5\u00b6\u0e21\n\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\5\u00b6\u0e26\n\u00b6\7\u00b6\u0e28\n\u00b6\f\u00b6\16")
        buf.write("\u00b6\u0e2b\13\u00b6\3\u00b7\3\u00b7\3\u00b7\7\u00b7")
        buf.write("\u0e30\n\u00b7\f\u00b7\16\u00b7\u0e33\13\u00b7\3\u00b8")
        buf.write("\3\u00b8\5\u00b8\u0e37\n\u00b8\3\u00b9\3\u00b9\3\u00ba")
        buf.write("\3\u00ba\3\u00bb\5\u00bb\u0e3e\n\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0e47")
        buf.write("\n\u00bc\3\u00bd\3\u00bd\5\u00bd\u0e4b\n\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e51\n\u00bd\3\u00bd")
        buf.write("\5\u00bd\u0e54\n\u00bd\3\u00be\3\u00be\5\u00be\u0e58\n")
        buf.write("\u00be\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0e5d\n\u00bf\3")
        buf.write("\u00bf\3\u00bf\5\u00bf\u0e61\n\u00bf\3\u00bf\3\u00bf\5")
        buf.write("\u00bf\u0e65\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u0e69\n\u00bf")
        buf.write("\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0e70")
        buf.write("\n\u00c1\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0e83\n\u00c3")
        buf.write("\3\u00c4\3\u00c4\3\u00c5\3\u00c5\5\u00c5\u0e89\n\u00c5")
        buf.write("\3\u00c5\2\3\u00de\u00c6\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c")
        buf.write("\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e")
        buf.write("\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140")
        buf.write("\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152")
        buf.write("\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164")
        buf.write("\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176")
        buf.write("\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188")
        buf.write("\2?\3\2\u01a6\u01a7\4\2\u01a6\u01a6\u01a9\u01a9\4\2\u0102")
        buf.write("\u0102\u018c\u018c\4\2\u01a6\u01a7\u01a9\u01a9\4\2ss\u0086")
        buf.write("\u0086\4\2\6\6((\3\2\u008d\u008e\5\2\66\66aa\u00c2\u00c2")
        buf.write("\4\2MM\u00d2\u00d2\4\2\u0156\u0157\u0163\u0163\4\2\u0087")
        buf.write("\u0087\u0172\u0172\5\2\u010d\u010d\u0175\u0175\u019c\u019c")
        buf.write("\5\2\u00b2\u00b2\u00db\u00db\u0107\u0107\4\2xxzz\5\2\u00fe")
        buf.write("\u00fe\u0123\u0123\u013e\u013e\4\2\u011c\u011c\u0132\u0132")
        buf.write("\5\2\u010b\u010b\u0150\u0150\u0152\u0152\3\2\u0165\u0166")
        buf.write("\5\2\u0142\u0142\u016d\u016d\u017d\u017d\5\2\u00d3\u00d3")
        buf.write("\u0108\u0108\u0118\u0118\4\2\u0118\u0118\u017c\u017c\5")
        buf.write("\2SS\u00e5\u00e5\u017c\u017c\5\2ss\u00eb\u00eb\u018d\u018d")
        buf.write("\4\2\u013e\u013e\u0178\u0178\4\2\u00c5\u00c5\u0134\u0134")
        buf.write("\3\2\u0156\u0157\4\2\u00b2\u00b2\u00c8\u00c8\3\2\u00b9")
        buf.write("\u00ba\6\2\u00e6\u00e6\u0158\u0158\u0179\u0179\u01a9\u01a9")
        buf.write("\4\2\13\1388\4\2\u0119\u0119\u0176\u0176\6\2\u010a\u010a")
        buf.write("\u0111\u0111\u012f\u012f\u0181\u0181\5\2\u0154\u0154\u0165")
        buf.write("\u0165\u0177\u0177\4\2\u00d0\u00d0\u016a\u016a\3\2\u01c6")
        buf.write("\u01c7\3\2\u01c3\u01c5\4\2\u01c6\u01c7\u01c9\u01cb\5\2")
        buf.write("\5\5\b\b\u00ae\u00ae\4\2\5\5::\3\2\u01ab\u01ac\4\2\u0170")
        buf.write("\u0170\u0172\u0172\4\2\u0115\u0115\u0146\u0146\4\2\u0082")
        buf.write("\u0082\u0121\u0121\5\2oo\u00ef\u00ef\u0121\u0121\5\2o")
        buf.write("o\u0121\u0121\u0135\u0135\4\2YY\u0171\u0171\4\2uu\u01a6")
        buf.write("\u01a7\5\2SSii\u009d\u009d\6\2oo\u0121\u0121\u0135\u0135")
        buf.write("\u016b\u016b\4\2\u01a7\u01a7\u01a9\u01a9\5\2\u0105\u0105")
        buf.write("\u0162\u0162\u0173\u0173\7\2\u00e2\u00e2\u0137\u0137\u013d")
        buf.write("\u013d\u0183\u0185\u0199\u019a\3\2\u00f3\u00f4\4\2\u0161")
        buf.write("\u0161\u0172\u0172\5\2SSxx\u0165\u0165\4\2\34\34rr\4\2")
        buf.write("\u0137\u0137\u01a7\u01a7\4\2\u01a7\u01a7\u01ab\u01ab9")
        buf.write("\2\24\24\60\60CCLLNN\u0085\u0085\u008f\u008f\u0091\u0091")
        buf.write("\u0099\u009a\u00a9\u00a9\u00af\u00af\u00b4\u00b4\u00d0")
        buf.write("\u00d0\u00d9\u00d9\u00db\u00db\u00e2\u00e3\u00e6\u00e8")
        buf.write("\u00ec\u00ed\u00ef\u00ef\u00f1\u00f4\u0102\u0102\u0104")
        buf.write("\u0105\u0107\u0107\u010a\u010a\u010d\u010d\u010f\u0111")
        buf.write("\u0115\u011a\u011c\u011f\u0121\u0121\u0124\u0124\u0126")
        buf.write("\u0126\u0128\u012b\u012d\u0139\u013d\u013d\u0141\u0141")
        buf.write("\u0143\u0143\u0146\u0146\u0148\u0149\u014b\u014b\u014d")
        buf.write("\u014e\u0151\u0158\u015a\u015f\u0161\u0163\u0165\u0165")
        buf.write("\u0167\u0167\u016a\u016c\u016e\u0177\u0179\u017a\u017c")
        buf.write("\u017c\u017e\u0185\u0189\u018c\u0190\u0190\u0192\u0196")
        buf.write("\u0198\u019f\u01a8\u01a8\3\2\u01b1\u01b8\7\2\u011b\u011b")
        buf.write("\u012c\u012c\u013b\u013b\u0188\u0188\u01c5\u01c5\2\u10dc")
        buf.write("\2\u018d\3\2\2\2\4\u0192\3\2\2\2\6\u019a\3\2\2\2\b\u01a4")
        buf.write("\3\2\2\2\n\u01ab\3\2\2\2\f\u01c0\3\2\2\2\16\u023f\3\2")
        buf.write("\2\2\20\u0241\3\2\2\2\22\u024a\3\2\2\2\24\u024d\3\2\2")
        buf.write("\2\26\u02a9\3\2\2\2\30\u02ab\3\2\2\2\32\u02b8\3\2\2\2")
        buf.write("\34\u02ee\3\2\2\2\36\u02f1\3\2\2\2 \u031f\3\2\2\2\"\u0322")
        buf.write("\3\2\2\2$\u0332\3\2\2\2&\u036d\3\2\2\2(\u0385\3\2\2\2")
        buf.write("*\u0398\3\2\2\2,\u039a\3\2\2\2.\u03cb\3\2\2\2\60\u03ee")
        buf.write("\3\2\2\2\62\u0419\3\2\2\2\64\u041b\3\2\2\2\66\u0447\3")
        buf.write("\2\2\28\u0449\3\2\2\2:\u044b\3\2\2\2<\u046b\3\2\2\2>\u046d")
        buf.write("\3\2\2\2@\u0487\3\2\2\2B\u049a\3\2\2\2D\u04b5\3\2\2\2")
        buf.write("F\u04d3\3\2\2\2H\u04ea\3\2\2\2J\u04f6\3\2\2\2L\u04f8\3")
        buf.write("\2\2\2N\u0517\3\2\2\2P\u0533\3\2\2\2R\u053f\3\2\2\2T\u0546")
        buf.write("\3\2\2\2V\u0564\3\2\2\2X\u0566\3\2\2\2Z\u058f\3\2\2\2")
        buf.write("\\\u05bc\3\2\2\2^\u05cf\3\2\2\2`\u05d1\3\2\2\2b\u05ea")
        buf.write("\3\2\2\2d\u05ec\3\2\2\2f\u05f4\3\2\2\2h\u05f6\3\2\2\2")
        buf.write("j\u05f9\3\2\2\2l\u05fc\3\2\2\2n\u05fe\3\2\2\2p\u0600\3")
        buf.write("\2\2\2r\u0602\3\2\2\2t\u061f\3\2\2\2v\u0621\3\2\2\2x\u0624")
        buf.write("\3\2\2\2z\u062d\3\2\2\2|\u0635\3\2\2\2~\u063c\3\2\2\2")
        buf.write("\u0080\u0653\3\2\2\2\u0082\u0655\3\2\2\2\u0084\u0660\3")
        buf.write("\2\2\2\u0086\u0662\3\2\2\2\u0088\u0670\3\2\2\2\u008a\u0683")
        buf.write("\3\2\2\2\u008c\u0685\3\2\2\2\u008e\u0696\3\2\2\2\u0090")
        buf.write("\u06ad\3\2\2\2\u0092\u06be\3\2\2\2\u0094\u06c8\3\2\2\2")
        buf.write("\u0096\u06d2\3\2\2\2\u0098\u06e3\3\2\2\2\u009a\u06ea\3")
        buf.write("\2\2\2\u009c\u06f4\3\2\2\2\u009e\u06f6\3\2\2\2\u00a0\u06fd")
        buf.write("\3\2\2\2\u00a2\u0723\3\2\2\2\u00a4\u073f\3\2\2\2\u00a6")
        buf.write("\u076a\3\2\2\2\u00a8\u076e\3\2\2\2\u00aa\u077b\3\2\2\2")
        buf.write("\u00ac\u07b4\3\2\2\2\u00ae\u07d0\3\2\2\2\u00b0\u07f9\3")
        buf.write("\2\2\2\u00b2\u0848\3\2\2\2\u00b4\u084a\3\2\2\2\u00b6\u084e")
        buf.write("\3\2\2\2\u00b8\u0853\3\2\2\2\u00ba\u0862\3\2\2\2\u00bc")
        buf.write("\u0867\3\2\2\2\u00be\u086b\3\2\2\2\u00c0\u0874\3\2\2\2")
        buf.write("\u00c2\u0879\3\2\2\2\u00c4\u0885\3\2\2\2\u00c6\u0887\3")
        buf.write("\2\2\2\u00c8\u08b8\3\2\2\2\u00ca\u08e5\3\2\2\2\u00cc\u0923")
        buf.write("\3\2\2\2\u00ce\u092e\3\2\2\2\u00d0\u0939\3\2\2\2\u00d2")
        buf.write("\u0945\3\2\2\2\u00d4\u094c\3\2\2\2\u00d6\u0973\3\2\2\2")
        buf.write("\u00d8\u0984\3\2\2\2\u00da\u09cd\3\2\2\2\u00dc\u09d1\3")
        buf.write("\2\2\2\u00de\u0a00\3\2\2\2\u00e0\u0a1c\3\2\2\2\u00e2\u0a1e")
        buf.write("\3\2\2\2\u00e4\u0a20\3\2\2\2\u00e6\u0a2d\3\2\2\2\u00e8")
        buf.write("\u0a49\3\2\2\2\u00ea\u0a4b\3\2\2\2\u00ec\u0a53\3\2\2\2")
        buf.write("\u00ee\u0a5b\3\2\2\2\u00f0\u0a64\3\2\2\2\u00f2\u0a9f\3")
        buf.write("\2\2\2\u00f4\u0aa6\3\2\2\2\u00f6\u0ab4\3\2\2\2\u00f8\u0abd")
        buf.write("\3\2\2\2\u00fa\u0ae1\3\2\2\2\u00fc\u0af1\3\2\2\2\u00fe")
        buf.write("\u0af8\3\2\2\2\u0100\u0afa\3\2\2\2\u0102\u0b24\3\2\2\2")
        buf.write("\u0104\u0b26\3\2\2\2\u0106\u0b2d\3\2\2\2\u0108\u0b31\3")
        buf.write("\2\2\2\u010a\u0b33\3\2\2\2\u010c\u0b6c\3\2\2\2\u010e\u0b6e")
        buf.write("\3\2\2\2\u0110\u0b74\3\2\2\2\u0112\u0b91\3\2\2\2\u0114")
        buf.write("\u0b93\3\2\2\2\u0116\u0ba0\3\2\2\2\u0118\u0ba2\3\2\2\2")
        buf.write("\u011a\u0bcc\3\2\2\2\u011c\u0bce\3\2\2\2\u011e\u0bf0\3")
        buf.write("\2\2\2\u0120\u0bf2\3\2\2\2\u0122\u0c10\3\2\2\2\u0124\u0c12")
        buf.write("\3\2\2\2\u0126\u0c1b\3\2\2\2\u0128\u0c84\3\2\2\2\u012a")
        buf.write("\u0c86\3\2\2\2\u012c\u0c8b\3\2\2\2\u012e\u0c91\3\2\2\2")
        buf.write("\u0130\u0c95\3\2\2\2\u0132\u0c9a\3\2\2\2\u0134\u0ca7\3")
        buf.write("\2\2\2\u0136\u0cb4\3\2\2\2\u0138\u0ce0\3\2\2\2\u013a\u0ce2")
        buf.write("\3\2\2\2\u013c\u0cef\3\2\2\2\u013e\u0cf1\3\2\2\2\u0140")
        buf.write("\u0cff\3\2\2\2\u0142\u0d11\3\2\2\2\u0144\u0d33\3\2\2\2")
        buf.write("\u0146\u0d36\3\2\2\2\u0148\u0d3a\3\2\2\2\u014a\u0d49\3")
        buf.write("\2\2\2\u014c\u0d52\3\2\2\2\u014e\u0d56\3\2\2\2\u0150\u0d5e")
        buf.write("\3\2\2\2\u0152\u0d64\3\2\2\2\u0154\u0d88\3\2\2\2\u0156")
        buf.write("\u0d8a\3\2\2\2\u0158\u0d97\3\2\2\2\u015a\u0d99\3\2\2\2")
        buf.write("\u015c\u0dae\3\2\2\2\u015e\u0dec\3\2\2\2\u0160\u0dfa\3")
        buf.write("\2\2\2\u0162\u0e01\3\2\2\2\u0164\u0e0f\3\2\2\2\u0166\u0e15")
        buf.write("\3\2\2\2\u0168\u0e1a\3\2\2\2\u016a\u0e1e\3\2\2\2\u016c")
        buf.write("\u0e2c\3\2\2\2\u016e\u0e36\3\2\2\2\u0170\u0e38\3\2\2\2")
        buf.write("\u0172\u0e3a\3\2\2\2\u0174\u0e3d\3\2\2\2\u0176\u0e46\3")
        buf.write("\2\2\2\u0178\u0e48\3\2\2\2\u017a\u0e57\3\2\2\2\u017c\u0e68")
        buf.write("\3\2\2\2\u017e\u0e6a\3\2\2\2\u0180\u0e6f\3\2\2\2\u0182")
        buf.write("\u0e71\3\2\2\2\u0184\u0e82\3\2\2\2\u0186\u0e84\3\2\2\2")
        buf.write("\u0188\u0e86\3\2\2\2\u018a\u018c\5\4\3\2\u018b\u018a\3")
        buf.write("\2\2\2\u018c\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e")
        buf.write("\3\2\2\2\u018e\u0190\3\2\2\2\u018f\u018d\3\2\2\2\u0190")
        buf.write("\u0191\7\2\2\3\u0191\3\3\2\2\2\u0192\u0194\5\6\4\2\u0193")
        buf.write("\u0195\5\u00b4[\2\u0194\u0193\3\2\2\2\u0194\u0195\3\2")
        buf.write("\2\2\u0195\5\3\2\2\2\u0196\u0198\5\b\5\2\u0197\u0199\7")
        buf.write("\u01c1\2\2\u0198\u0197\3\2\2\2\u0198\u0199\3\2\2\2\u0199")
        buf.write("\u019b\3\2\2\2\u019a\u0196\3\2\2\2\u019b\u019c\3\2\2\2")
        buf.write("\u019c\u019a\3\2\2\2\u019c\u019d\3\2\2\2\u019d\7\3\2\2")
        buf.write("\2\u019e\u01a5\5\n\6\2\u019f\u01a5\5\f\7\2\u01a0\u01a5")
        buf.write("\5\16\b\2\u01a1\u01a5\5\u00b8]\2\u01a2\u01a5\5\20\t\2")
        buf.write("\u01a3\u01a5\5\22\n\2\u01a4\u019e\3\2\2\2\u01a4\u019f")
        buf.write("\3\2\2\2\u01a4\u01a0\3\2\2\2\u01a4\u01a1\3\2\2\2\u01a4")
        buf.write("\u01a2\3\2\2\2\u01a4\u01a3\3\2\2\2\u01a5\t\3\2\2\2\u01a6")
        buf.write("\u01ac\5\24\13\2\u01a7\u01ac\5\32\16\2\u01a8\u01ac\5\36")
        buf.write("\20\2\u01a9\u01ac\5\"\22\2\u01aa\u01ac\5$\23\2\u01ab\u01a6")
        buf.write("\3\2\2\2\u01ab\u01a7\3\2\2\2\u01ab\u01a8\3\2\2\2\u01ab")
        buf.write("\u01a9\3\2\2\2\u01ab\u01aa\3\2\2\2\u01ac\13\3\2\2\2\u01ad")
        buf.write("\u01c1\5,\27\2\u01ae\u01c1\5.\30\2\u01af\u01c1\5\60\31")
        buf.write("\2\u01b0\u01c1\5\62\32\2\u01b1\u01c1\5> \2\u01b2\u01c1")
        buf.write("\5L\'\2\u01b3\u01c1\5N(\2\u01b4\u01c1\5\u0098M\2\u01b5")
        buf.write("\u01c1\5T+\2\u01b6\u01c1\5X-\2\u01b7\u01c1\5Z.\2\u01b8")
        buf.write("\u01c1\5\u0086D\2\u01b9\u01c1\5\u0088E\2\u01ba\u01c1\5")
        buf.write("\u008aF\2\u01bb\u01c1\5\u0090I\2\u01bc\u01c1\5\u0092J")
        buf.write("\2\u01bd\u01c1\5\u0094K\2\u01be\u01c1\5\u009aN\2\u01bf")
        buf.write("\u01c1\5\u0096L\2\u01c0\u01ad\3\2\2\2\u01c0\u01ae\3\2")
        buf.write("\2\2\u01c0\u01af\3\2\2\2\u01c0\u01b0\3\2\2\2\u01c0\u01b1")
        buf.write("\3\2\2\2\u01c0\u01b2\3\2\2\2\u01c0\u01b3\3\2\2\2\u01c0")
        buf.write("\u01b4\3\2\2\2\u01c0\u01b5\3\2\2\2\u01c0\u01b6\3\2\2\2")
        buf.write("\u01c0\u01b7\3\2\2\2\u01c0\u01b8\3\2\2\2\u01c0\u01b9\3")
        buf.write("\2\2\2\u01c0\u01ba\3\2\2\2\u01c0\u01bb\3\2\2\2\u01c0\u01bc")
        buf.write("\3\2\2\2\u01c0\u01bd\3\2\2\2\u01c0\u01be\3\2\2\2\u01c0")
        buf.write("\u01bf\3\2\2\2\u01c1\r\3\2\2\2\u01c2\u01c4\7\16\2\2\u01c3")
        buf.write("\u01c5\7\u01c1\2\2\u01c4\u01c3\3\2\2\2\u01c4\u01c5\3\2")
        buf.write("\2\2\u01c5\u01c7\3\2\2\2\u01c6\u01c8\5\6\4\2\u01c7\u01c6")
        buf.write("\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9")
        buf.write("\u01cb\7@\2\2\u01ca\u01cc\7\u01c1\2\2\u01cb\u01ca\3\2")
        buf.write("\2\2\u01cb\u01cc\3\2\2\2\u01cc\u0240\3\2\2\2\u01cd\u01cf")
        buf.write("\7\20\2\2\u01ce\u01d0\7\u01c1\2\2\u01cf\u01ce\3\2\2\2")
        buf.write("\u01cf\u01d0\3\2\2\2\u01d0\u0240\3\2\2\2\u01d1\u01d3\7")
        buf.write("&\2\2\u01d2\u01d4\7\u01c1\2\2\u01d3\u01d2\3\2\2\2\u01d3")
        buf.write("\u01d4\3\2\2\2\u01d4\u0240\3\2\2\2\u01d5\u01d6\7U\2\2")
        buf.write("\u01d6\u01d8\5\u0180\u00c1\2\u01d7\u01d9\7\u01c1\2\2\u01d8")
        buf.write("\u01d7\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u0240\3\2\2\2")
        buf.write("\u01da\u01db\5\u0180\u00c1\2\u01db\u01dd\7\u01c2\2\2\u01dc")
        buf.write("\u01de\7\u01c1\2\2\u01dd\u01dc\3\2\2\2\u01dd\u01de\3\2")
        buf.write("\2\2\u01de\u0240\3\2\2\2\u01df\u01e0\7\\\2\2\u01e0\u01e1")
        buf.write("\5\u00ecw\2\u01e1\u01e4\5\b\5\2\u01e2\u01e3\7?\2\2\u01e3")
        buf.write("\u01e5\5\b\5\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2")
        buf.write("\u01e5\u01e7\3\2\2\2\u01e6\u01e8\7\u01c1\2\2\u01e7\u01e6")
        buf.write("\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u0240\3\2\2\2\u01e9")
        buf.write("\u01eb\7\u0099\2\2\u01ea\u01ec\5\u00dep\2\u01eb\u01ea")
        buf.write("\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ee\3\2\2\2\u01ed")
        buf.write("\u01ef\7\u01c1\2\2\u01ee\u01ed\3\2\2\2\u01ee\u01ef\3\2")
        buf.write("\2\2\u01ef\u0240\3\2\2\2\u01f0\u01f6\7\u018a\2\2\u01f1")
        buf.write("\u01f2\t\2\2\2\u01f2\u01f3\7\u01c0\2\2\u01f3\u01f4\t\3")
        buf.write("\2\2\u01f4\u01f5\7\u01c0\2\2\u01f5\u01f7\t\2\2\2\u01f6")
        buf.write("\u01f1\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f9\3\2\2\2")
        buf.write("\u01f8\u01fa\7\u01c1\2\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa")
        buf.write("\3\2\2\2\u01fa\u0240\3\2\2\2\u01fb\u01fc\7\16\2\2\u01fc")
        buf.write("\u01fe\7\u0190\2\2\u01fd\u01ff\7\u01c1\2\2\u01fe\u01fd")
        buf.write("\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0201\3\2\2\2\u0200")
        buf.write("\u0202\5\6\4\2\u0201\u0200\3\2\2\2\u0201\u0202\3\2\2\2")
        buf.write("\u0202\u0203\3\2\2\2\u0203\u0204\7@\2\2\u0204\u0206\7")
        buf.write("\u0190\2\2\u0205\u0207\7\u01c1\2\2\u0206\u0205\3\2\2\2")
        buf.write("\u0206\u0207\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209\7")
        buf.write("\16\2\2\u0209\u020b\7\u00e8\2\2\u020a\u020c\7\u01c1\2")
        buf.write("\2\u020b\u020a\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020e")
        buf.write("\3\2\2\2\u020d\u020f\5\6\4\2\u020e\u020d\3\2\2\2\u020e")
        buf.write("\u020f\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211\7@\2\2")
        buf.write("\u0211\u0213\7\u00e8\2\2\u0212\u0214\7\u01c1\2\2\u0213")
        buf.write("\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0240\3\2\2\2")
        buf.write("\u0215\u0216\7\u00c9\2\2\u0216\u0217\t\4\2\2\u0217\u0219")
        buf.write("\5\u00dep\2\u0218\u021a\7\u01c1\2\2\u0219\u0218\3\2\2")
        buf.write("\2\u0219\u021a\3\2\2\2\u021a\u0240\3\2\2\2\u021b\u021c")
        buf.write("\7\u00cc\2\2\u021c\u0226\5\u00ecw\2\u021d\u0227\5\b\5")
        buf.write("\2\u021e\u0220\7\20\2\2\u021f\u0221\7\u01c1\2\2\u0220")
        buf.write("\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0227\3\2\2\2")
        buf.write("\u0222\u0224\7&\2\2\u0223\u0225\7\u01c1\2\2\u0224\u0223")
        buf.write("\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0227\3\2\2\2\u0226")
        buf.write("\u021d\3\2\2\2\u0226\u021e\3\2\2\2\u0226\u0222\3\2\2\2")
        buf.write("\u0227\u0240\3\2\2\2\u0228\u0229\7\u008c\2\2\u0229\u022b")
        buf.write("\5\u00dep\2\u022a\u022c\7\u01c1\2\2\u022b\u022a\3\2\2")
        buf.write("\2\u022b\u022c\3\2\2\2\u022c\u0240\3\2\2\2\u022d\u022e")
        buf.write("\7\u0090\2\2\u022e\u022f\7\u01be\2\2\u022f\u0230\t\5\2")
        buf.write("\2\u0230\u0231\7\u01c0\2\2\u0231\u0232\5\u00dco\2\u0232")
        buf.write("\u0233\7\u01c0\2\2\u0233\u0238\5\u00dco\2\u0234\u0235")
        buf.write("\7\u01c0\2\2\u0235\u0237\5\u00dco\2\u0236\u0234\3\2\2")
        buf.write("\2\u0237\u023a\3\2\2\2\u0238\u0236\3\2\2\2\u0238\u0239")
        buf.write("\3\2\2\2\u0239\u023b\3\2\2\2\u023a\u0238\3\2\2\2\u023b")
        buf.write("\u023d\7\u01bf\2\2\u023c\u023e\7\u01c1\2\2\u023d\u023c")
        buf.write("\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u0240\3\2\2\2\u023f")
        buf.write("\u01c2\3\2\2\2\u023f\u01cd\3\2\2\2\u023f\u01d1\3\2\2\2")
        buf.write("\u023f\u01d5\3\2\2\2\u023f\u01da\3\2\2\2\u023f\u01df\3")
        buf.write("\2\2\2\u023f\u01e9\3\2\2\2\u023f\u01f0\3\2\2\2\u023f\u01fb")
        buf.write("\3\2\2\2\u023f\u0215\3\2\2\2\u023f\u021b\3\2\2\2\u023f")
        buf.write("\u0228\3\2\2\2\u023f\u022d\3\2\2\2\u0240\17\3\2\2\2\u0241")
        buf.write("\u0242\7\u01c1\2\2\u0242\21\3\2\2\2\u0243\u024b\5\u00a2")
        buf.write("R\2\u0244\u024b\5\u00a4S\2\u0245\u024b\5\u00a6T\2\u0246")
        buf.write("\u024b\5\u00acW\2\u0247\u024b\5\u00b0Y\2\u0248\u024b\5")
        buf.write("\u00b2Z\2\u0249\u024b\5\u00b6\\\2\u024a\u0243\3\2\2\2")
        buf.write("\u024a\u0244\3\2\2\2\u024a\u0245\3\2\2\2\u024a\u0246\3")
        buf.write("\2\2\2\u024a\u0247\3\2\2\2\u024a\u0248\3\2\2\2\u024a\u0249")
        buf.write("\3\2\2\2\u024b\23\3\2\2\2\u024c\u024e\5\u00e4s\2\u024d")
        buf.write("\u024c\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024f\3\2\2\2")
        buf.write("\u024f\u0257\7o\2\2\u0250\u0251\7\u00b8\2\2\u0251\u0252")
        buf.write("\7\u01be\2\2\u0252\u0253\5\u00dep\2\u0253\u0255\7\u01bf")
        buf.write("\2\2\u0254\u0256\7\u0087\2\2\u0255\u0254\3\2\2\2\u0255")
        buf.write("\u0256\3\2\2\2\u0256\u0258\3\2\2\2\u0257\u0250\3\2\2\2")
        buf.write("\u0257\u0258\3\2\2\2\u0258\u025a\3\2\2\2\u0259\u025b\7")
        buf.write("d\2\2\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025c")
        buf.write("\3\2\2\2\u025c\u025e\5\u0166\u00b4\2\u025d\u025f\5\u0134")
        buf.write("\u009b\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f")
        buf.write("\u0264\3\2\2\2\u0260\u0262\7\n\2\2\u0261\u0260\3\2\2\2")
        buf.write("\u0261\u0262\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265\7")
        buf.write("\u01a8\2\2\u0264\u0261\3\2\2\2\u0264\u0265\3\2\2\2\u0265")
        buf.write("\u0266\3\2\2\2\u0266\u0267\7\u0198\2\2\u0267\u0268\5\u0114")
        buf.write("\u008b\2\u0268\u0269\7z\2\2\u0269\u0274\5\u00ecw\2\u026a")
        buf.write("\u026b\7\u00ca\2\2\u026b\u026e\7n\2\2\u026c\u026d\7\7")
        buf.write("\2\2\u026d\u026f\5\u00ecw\2\u026e\u026c\3\2\2\2\u026e")
        buf.write("\u026f\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271\7\u00b6")
        buf.write("\2\2\u0271\u0273\5\26\f\2\u0272\u026a\3\2\2\2\u0273\u0276")
        buf.write("\3\2\2\2\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275")
        buf.write("\u0284\3\2\2\2\u0276\u0274\3\2\2\2\u0277\u0278\7\u00ca")
        buf.write("\2\2\u0278\u0279\7t\2\2\u0279\u027c\7n\2\2\u027a\u027b")
        buf.write("\7\23\2\2\u027b\u027d\7\u00b4\2\2\u027c\u027a\3\2\2\2")
        buf.write("\u027c\u027d\3\2\2\2\u027d\u0280\3\2\2\2\u027e\u027f\7")
        buf.write("\7\2\2\u027f\u0281\5\u00ecw\2\u0280\u027e\3\2\2\2\u0280")
        buf.write("\u0281\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0283\7\u00b6")
        buf.write("\2\2\u0283\u0285\5\30\r\2\u0284\u0277\3\2\2\2\u0284\u0285")
        buf.write("\3\2\2\2\u0285\u0293\3\2\2\2\u0286\u0287\7\u00ca\2\2\u0287")
        buf.write("\u0288\7t\2\2\u0288\u0289\7n\2\2\u0289\u028a\7\23\2\2")
        buf.write("\u028a\u028d\7\u00af\2\2\u028b\u028c\7\7\2\2\u028c\u028e")
        buf.write("\5\u00ecw\2\u028d\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028e")
        buf.write("\u028f\3\2\2\2\u028f\u0290\7\u00b6\2\2\u0290\u0292\5\26")
        buf.write("\f\2\u0291\u0286\3\2\2\2\u0292\u0295\3\2\2\2\u0293\u0291")
        buf.write("\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0297\3\2\2\2\u0295")
        buf.write("\u0293\3\2\2\2\u0296\u0298\5&\24\2\u0297\u0296\3\2\2\2")
        buf.write("\u0297\u0298\3\2\2\2\u0298\u029a\3\2\2\2\u0299\u029b\5")
        buf.write("\u010a\u0086\2\u029a\u0299\3\2\2\2\u029a\u029b\3\2\2\2")
        buf.write("\u029b\u029c\3\2\2\2\u029c\u029d\7\u01c1\2\2\u029d\25")
        buf.write("\3\2\2\2\u029e\u029f\7\u00c2\2\2\u029f\u02a0\7\u00ab\2")
        buf.write("\2\u02a0\u02a5\5\u00e8u\2\u02a1\u02a2\7\u01c0\2\2\u02a2")
        buf.write("\u02a4\5\u00e8u\2\u02a3\u02a1\3\2\2\2\u02a4\u02a7\3\2")
        buf.write("\2\2\u02a5\u02a3\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02aa")
        buf.write("\3\2\2\2\u02a7\u02a5\3\2\2\2\u02a8\u02aa\7\66\2\2\u02a9")
        buf.write("\u029e\3\2\2\2\u02a9\u02a8\3\2\2\2\u02aa\27\3\2\2\2\u02ab")
        buf.write("\u02b0\7a\2\2\u02ac\u02ad\7\u01be\2\2\u02ad\u02ae\5\u016c")
        buf.write("\u00b7\2\u02ae\u02af\7\u01bf\2\2\u02af\u02b1\3\2\2\2\u02b0")
        buf.write("\u02ac\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b5\3\2\2\2")
        buf.write("\u02b2\u02b6\5\u013e\u00a0\2\u02b3\u02b4\7\65\2\2\u02b4")
        buf.write("\u02b6\7\u00c6\2\2\u02b5\u02b2\3\2\2\2\u02b5\u02b3\3\2")
        buf.write("\2\2\u02b6\31\3\2\2\2\u02b7\u02b9\5\u00e4s\2\u02b8\u02b7")
        buf.write("\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("\u02c2\7\66\2\2\u02bb\u02bc\7\u00b8\2\2\u02bc\u02bd\7")
        buf.write("\u01be\2\2\u02bd\u02be\5\u00dep\2\u02be\u02c0\7\u01bf")
        buf.write("\2\2\u02bf\u02c1\7\u0087\2\2\u02c0\u02bf\3\2\2\2\u02c0")
        buf.write("\u02c1\3\2\2\2\u02c1\u02c3\3\2\2\2\u02c2\u02bb\3\2\2\2")
        buf.write("\u02c2\u02c3\3\2\2\2\u02c3\u02c5\3\2\2\2\u02c4\u02c6\7")
        buf.write("R\2\2\u02c5\u02c4\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c7")
        buf.write("\3\2\2\2\u02c7\u02c9\5\34\17\2\u02c8\u02ca\5\u0134\u009b")
        buf.write("\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02cc")
        buf.write("\3\2\2\2\u02cb\u02cd\5&\24\2\u02cc\u02cb\3\2\2\2\u02cc")
        buf.write("\u02cd\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02cf\7R\2\2")
        buf.write("\u02cf\u02d1\5\u0114\u008b\2\u02d0\u02ce\3\2\2\2\u02d0")
        buf.write("\u02d1\3\2\2\2\u02d1\u02df\3\2\2\2\u02d2\u02dd\7\u00cb")
        buf.write("\2\2\u02d3\u02de\5\u00ecw\2\u02d4\u02d5\7*\2\2\u02d5\u02db")
        buf.write("\7w\2\2\u02d6\u02d8\7\u011c\2\2\u02d7\u02d6\3\2\2\2\u02d7")
        buf.write("\u02d8\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02dc\5\u016e")
        buf.write("\u00b8\2\u02da\u02dc\7\u01a6\2\2\u02db\u02d7\3\2\2\2\u02db")
        buf.write("\u02da\3\2\2\2\u02dc\u02de\3\2\2\2\u02dd\u02d3\3\2\2\2")
        buf.write("\u02dd\u02d4\3\2\2\2\u02de\u02e0\3\2\2\2\u02df\u02d2\3")
        buf.write("\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e2\3\2\2\2\u02e1\u02e3")
        buf.write("\5\u0102\u0082\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3\3\2\2")
        buf.write("\2\u02e3\u02e5\3\2\2\2\u02e4\u02e6\5\u010a\u0086\2\u02e5")
        buf.write("\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e8\3\2\2\2")
        buf.write("\u02e7\u02e9\7\u01c1\2\2\u02e8\u02e7\3\2\2\2\u02e8\u02e9")
        buf.write("\3\2\2\2\u02e9\33\3\2\2\2\u02ea\u02ef\5\u0130\u0099\2")
        buf.write("\u02eb\u02ef\5\u0166\u00b4\2\u02ec\u02ef\5\u009cO\2\u02ed")
        buf.write("\u02ef\7\u01a6\2\2\u02ee\u02ea\3\2\2\2\u02ee\u02eb\3\2")
        buf.write("\2\2\u02ee\u02ec\3\2\2\2\u02ee\u02ed\3\2\2\2\u02ef\35")
        buf.write("\3\2\2\2\u02f0\u02f2\5\u00e4s\2\u02f1\u02f0\3\2\2\2\u02f1")
        buf.write("\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02fb\7a\2\2")
        buf.write("\u02f4\u02f5\7\u00b8\2\2\u02f5\u02f6\7\u01be\2\2\u02f6")
        buf.write("\u02f7\5\u00dep\2\u02f7\u02f9\7\u01bf\2\2\u02f8\u02fa")
        buf.write("\7\u0087\2\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa")
        buf.write("\u02fc\3\2\2\2\u02fb\u02f4\3\2\2\2\u02fb\u02fc\3\2\2\2")
        buf.write("\u02fc\u02fe\3\2\2\2\u02fd\u02ff\7d\2\2\u02fe\u02fd\3")
        buf.write("\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u0303")
        buf.write("\5\u0166\u00b4\2\u0301\u0303\5\u009cO\2\u0302\u0300\3")
        buf.write("\2\2\2\u0302\u0301\3\2\2\2\u0303\u0305\3\2\2\2\u0304\u0306")
        buf.write("\5\u0134\u009b\2\u0305\u0304\3\2\2\2\u0305\u0306\3\2\2")
        buf.write("\2\u0306\u030b\3\2\2\2\u0307\u0308\7\u01be\2\2\u0308\u0309")
        buf.write("\5\u016c\u00b7\2\u0309\u030a\7\u01bf\2\2\u030a\u030c\3")
        buf.write("\2\2\2\u030b\u0307\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030e")
        buf.write("\3\2\2\2\u030d\u030f\5&\24\2\u030e\u030d\3\2\2\2\u030e")
        buf.write("\u030f\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0312\5 \21\2")
        buf.write("\u0311\u0313\5\u0102\u0082\2\u0312\u0311\3\2\2\2\u0312")
        buf.write("\u0313\3\2\2\2\u0313\u0315\3\2\2\2\u0314\u0316\5\u010a")
        buf.write("\u0086\2\u0315\u0314\3\2\2\2\u0315\u0316\3\2\2\2\u0316")
        buf.write("\u0318\3\2\2\2\u0317\u0319\7\u01c1\2\2\u0318\u0317\3\2")
        buf.write("\2\2\u0318\u0319\3\2\2\2\u0319\37\3\2\2\2\u031a\u0320")
        buf.write("\5\u013e\u00a0\2\u031b\u0320\5\u0126\u0094\2\u031c\u0320")
        buf.write("\5\u00a6T\2\u031d\u031e\7\65\2\2\u031e\u0320\7\u00c6\2")
        buf.write("\2\u031f\u031a\3\2\2\2\u031f\u031b\3\2\2\2\u031f\u031c")
        buf.write("\3\2\2\2\u031f\u031d\3\2\2\2\u0320!\3\2\2\2\u0321\u0323")
        buf.write("\5\u00e4s\2\u0322\u0321\3\2\2\2\u0322\u0323\3\2\2\2\u0323")
        buf.write("\u0324\3\2\2\2\u0324\u0326\5\u00f4{\2\u0325\u0327\5\u0100")
        buf.write("\u0081\2\u0326\u0325\3\2\2\2\u0326\u0327\3\2\2\2\u0327")
        buf.write("\u0329\3\2\2\2\u0328\u032a\5\u0102\u0082\2\u0329\u0328")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c\3\2\2\2\u032b")
        buf.write("\u032d\5\u010a\u0086\2\u032c\u032b\3\2\2\2\u032c\u032d")
        buf.write("\3\2\2\2\u032d\u032f\3\2\2\2\u032e\u0330\7\u01c1\2\2\u032f")
        buf.write("\u032e\3\2\2\2\u032f\u0330\3\2\2\2\u0330#\3\2\2\2\u0331")
        buf.write("\u0333\5\u00e4s\2\u0332\u0331\3\2\2\2\u0332\u0333\3\2")
        buf.write("\2\2\u0333\u0334\3\2\2\2\u0334\u033c\7\u00c2\2\2\u0335")
        buf.write("\u0336\7\u00b8\2\2\u0336\u0337\7\u01be\2\2\u0337\u0338")
        buf.write("\5\u00dep\2\u0338\u033a\7\u01bf\2\2\u0339\u033b\7\u0087")
        buf.write("\2\2\u033a\u0339\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033d")
        buf.write("\3\2\2\2\u033c\u0335\3\2\2\2\u033c\u033d\3\2\2\2\u033d")
        buf.write("\u0340\3\2\2\2\u033e\u0341\5\u0166\u00b4\2\u033f\u0341")
        buf.write("\5\u009cO\2\u0340\u033e\3\2\2\2\u0340\u033f\3\2\2\2\u0341")
        buf.write("\u0343\3\2\2\2\u0342\u0344\5\u0132\u009a\2\u0343\u0342")
        buf.write("\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345\3\2\2\2\u0345")
        buf.write("\u0346\7\u00ab\2\2\u0346\u034b\5\u00e8u\2\u0347\u0348")
        buf.write("\7\u01c0\2\2\u0348\u034a\5\u00e8u\2\u0349\u0347\3\2\2")
        buf.write("\2\u034a\u034d\3\2\2\2\u034b\u0349\3\2\2\2\u034b\u034c")
        buf.write("\3\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2\u034e")
        buf.write("\u0350\5&\24\2\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2")
        buf.write("\u0350\u0353\3\2\2\2\u0351\u0352\7R\2\2\u0352\u0354\5")
        buf.write("\u0114\u008b\2\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2")
        buf.write("\u0354\u0362\3\2\2\2\u0355\u0360\7\u00cb\2\2\u0356\u0361")
        buf.write("\5\u00eav\2\u0357\u0358\7*\2\2\u0358\u035e\7w\2\2\u0359")
        buf.write("\u035b\7\u011c\2\2\u035a\u0359\3\2\2\2\u035a\u035b\3\2")
        buf.write("\2\2\u035b\u035c\3\2\2\2\u035c\u035f\5\u016e\u00b8\2\u035d")
        buf.write("\u035f\7\u01a6\2\2\u035e\u035a\3\2\2\2\u035e\u035d\3\2")
        buf.write("\2\2\u035f\u0361\3\2\2\2\u0360\u0356\3\2\2\2\u0360\u0357")
        buf.write("\3\2\2\2\u0361\u0363\3\2\2\2\u0362\u0355\3\2\2\2\u0362")
        buf.write("\u0363\3\2\2\2\u0363\u0365\3\2\2\2\u0364\u0366\5\u0102")
        buf.write("\u0082\2\u0365\u0364\3\2\2\2\u0365\u0366\3\2\2\2\u0366")
        buf.write("\u0368\3\2\2\2\u0367\u0369\5\u010a\u0086\2\u0368\u0367")
        buf.write("\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036b\3\2\2\2\u036a")
        buf.write("\u036c\7\u01c1\2\2\u036b\u036a\3\2\2\2\u036b\u036c\3\2")
        buf.write("\2\2\u036c%\3\2\2\2\u036d\u036e\7\u0157\2\2\u036e\u0373")
        buf.write("\5(\25\2\u036f\u0370\7\u01c0\2\2\u0370\u0372\5(\25\2\u0371")
        buf.write("\u036f\3\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2")
        buf.write("\u0373\u0374\3\2\2\2\u0374\u0381\3\2\2\2\u0375\u0373\3")
        buf.write("\2\2\2\u0376\u0379\7d\2\2\u0377\u037a\7\u01a6\2\2\u0378")
        buf.write("\u037a\5\u0160\u00b1\2\u0379\u0377\3\2\2\2\u0379\u0378")
        buf.write("\3\2\2\2\u037a\u037f\3\2\2\2\u037b\u037c\7\u01be\2\2\u037c")
        buf.write("\u037d\5\u016c\u00b7\2\u037d\u037e\7\u01bf\2\2\u037e\u0380")
        buf.write("\3\2\2\2\u037f\u037b\3\2\2\2\u037f\u0380\3\2\2\2\u0380")
        buf.write("\u0382\3\2\2\2\u0381\u0376\3\2\2\2\u0381\u0382\3\2\2\2")
        buf.write("\u0382\'\3\2\2\2\u0383\u0386\5*\26\2\u0384\u0386\5\u00de")
        buf.write("p\2\u0385\u0383\3\2\2\2\u0385\u0384\3\2\2\2\u0386\u038b")
        buf.write("\3\2\2\2\u0387\u0389\7\n\2\2\u0388\u0387\3\2\2\2\u0388")
        buf.write("\u0389\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038c\5\u013c")
        buf.write("\u009f\2\u038b\u0388\3\2\2\2\u038b\u038c\3\2\2\2\u038c")
        buf.write(")\3\2\2\2\u038d\u0391\7\u0104\2\2\u038e\u0391\7\u012a")
        buf.write("\2\2\u038f\u0391\5\u0160\u00b1\2\u0390\u038d\3\2\2\2\u0390")
        buf.write("\u038e\3\2\2\2\u0390\u038f\3\2\2\2\u0391\u0392\3\2\2\2")
        buf.write("\u0392\u0395\7\u01b9\2\2\u0393\u0396\7\u01c3\2\2\u0394")
        buf.write("\u0396\5\u0180\u00c1\2\u0395\u0393\3\2\2\2\u0395\u0394")
        buf.write("\3\2\2\2\u0396\u0399\3\2\2\2\u0397\u0399\7\u01a0\2\2\u0398")
        buf.write("\u0390\3\2\2\2\u0398\u0397\3\2\2\2\u0399+\3\2\2\2\u039a")
        buf.write("\u039b\7(\2\2\u039b\u039c\7\61\2\2\u039c\u03a0\5\u0180")
        buf.write("\u00c1\2\u039d\u039e\7#\2\2\u039e\u039f\7\u01ad\2\2\u039f")
        buf.write("\u03a1\t\6\2\2\u03a0\u039d\3\2\2\2\u03a0\u03a1\3\2\2\2")
        buf.write("\u03a1\u03ae\3\2\2\2\u03a2\u03a4\7z\2\2\u03a3\u03a5\7")
        buf.write("\u008b\2\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5")
        buf.write("\u03a6\3\2\2\2\u03a6\u03ab\5\u0158\u00ad\2\u03a7\u03a8")
        buf.write("\7\u01c0\2\2\u03a8\u03aa\5\u0158\u00ad\2\u03a9\u03a7\3")
        buf.write("\2\2\2\u03aa\u03ad\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ab\u03ac")
        buf.write("\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ae")
        buf.write("\u03a2\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03ba\3\2\2\2")
        buf.write("\u03b0\u03b1\7m\2\2\u03b1\u03b2\7z\2\2\u03b2\u03b7\5\u0158")
        buf.write("\u00ad\2\u03b3\u03b4\7\u01c0\2\2\u03b4\u03b6\5\u0158\u00ad")
        buf.write("\2\u03b5\u03b3\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7\u03b5")
        buf.write("\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03bb\3\2\2\2\u03b9")
        buf.write("\u03b7\3\2\2\2\u03ba\u03b0\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03be\3\2\2\2\u03bc\u03bd\7\36\2\2\u03bd\u03bf")
        buf.write("\5\u0180\u00c1\2\u03be\u03bc\3\2\2\2\u03be\u03bf\3\2\2")
        buf.write("\2\u03bf\u03c9\3\2\2\2\u03c0\u03c1\7\u00cd\2\2\u03c1\u03c6")
        buf.write("\5\u0154\u00ab\2\u03c2\u03c3\7\u01c0\2\2\u03c3\u03c5\5")
        buf.write("\u0154\u00ab\2\u03c4\u03c2\3\2\2\2\u03c5\u03c8\3\2\2\2")
        buf.write("\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03ca\3")
        buf.write("\2\2\2\u03c8\u03c6\3\2\2\2\u03c9\u03c0\3\2\2\2\u03c9\u03ca")
        buf.write("\3\2\2\2\u03ca-\3\2\2\2\u03cb\u03cd\7(\2\2\u03cc\u03ce")
        buf.write("\7\u00c0\2\2\u03cd\u03cc\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce")
        buf.write("\u03d0\3\2\2\2\u03cf\u03d1\5\u0172\u00ba\2\u03d0\u03cf")
        buf.write("\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2")
        buf.write("\u03d3\7_\2\2\u03d3\u03d4\5\u0180\u00c1\2\u03d4\u03d5")
        buf.write("\7z\2\2\u03d5\u03d6\5\u0120\u0091\2\u03d6\u03d7\7\u01be")
        buf.write("\2\2\u03d7\u03d8\5\u016a\u00b6\2\u03d8\u03de\7\u01bf\2")
        buf.write("\2\u03d9\u03da\7^\2\2\u03da\u03db\7\u01be\2\2\u03db\u03dc")
        buf.write("\5\u016c\u00b7\2\u03dc\u03dd\7\u01bf\2\2\u03dd\u03df\3")
        buf.write("\2\2\2\u03de\u03d9\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e2")
        buf.write("\3\2\2\2\u03e0\u03e1\7\u00cb\2\2\u03e1\u03e3\5\u00ecw")
        buf.write("\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e5")
        buf.write("\3\2\2\2\u03e4\u03e6\5\u00d0i\2\u03e5\u03e4\3\2\2\2\u03e5")
        buf.write("\u03e6\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e8\7z\2\2")
        buf.write("\u03e8\u03ea\5\u0180\u00c1\2\u03e9\u03e7\3\2\2\2\u03e9")
        buf.write("\u03ea\3\2\2\2\u03ea\u03ec\3\2\2\2\u03eb\u03ed\7\u01c1")
        buf.write("\2\2\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed/\3")
        buf.write("\2\2\2\u03ee\u03ef\t\7\2\2\u03ef\u03f0\t\b\2\2\u03f0\u03f3")
        buf.write("\5\u0164\u00b3\2\u03f1\u03f2\7\u01c1\2\2\u03f2\u03f4\7")
        buf.write("\u01a7\2\2\u03f3\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4")
        buf.write("\u0403\3\2\2\2\u03f5\u03f7\7\u01be\2\2\u03f6\u03f5\3\2")
        buf.write("\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fd")
        buf.write("\5F$\2\u03f9\u03fa\7\u01c0\2\2\u03fa\u03fc\5F$\2\u03fb")
        buf.write("\u03f9\3\2\2\2\u03fc\u03ff\3\2\2\2\u03fd\u03fb\3\2\2\2")
        buf.write("\u03fd\u03fe\3\2\2\2\u03fe\u0401\3\2\2\2\u03ff\u03fd\3")
        buf.write("\2\2\2\u0400\u0402\7\u01bf\2\2\u0401\u0400\3\2\2\2\u0401")
        buf.write("\u0402\3\2\2\2\u0402\u0404\3\2\2\2\u0403\u03f6\3\2\2\2")
        buf.write("\u0403\u0404\3\2\2\2\u0404\u040e\3\2\2\2\u0405\u0406\7")
        buf.write("\u00cd\2\2\u0406\u040b\5H%\2\u0407\u0408\7\u01c0\2\2\u0408")
        buf.write("\u040a\5H%\2\u0409\u0407\3\2\2\2\u040a\u040d\3\2\2\2\u040b")
        buf.write("\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040f\3\2\2\2")
        buf.write("\u040d\u040b\3\2\2\2\u040e\u0405\3\2\2\2\u040e\u040f\3")
        buf.write("\2\2\2\u040f\u0412\3\2\2\2\u0410\u0411\7M\2\2\u0411\u0413")
        buf.write("\7\u0096\2\2\u0412\u0410\3\2\2\2\u0412\u0413\3\2\2\2\u0413")
        buf.write("\u0414\3\2\2\2\u0414\u0415\7\n\2\2\u0415\u0416\5\6\4\2")
        buf.write("\u0416\61\3\2\2\2\u0417\u041a\5\64\33\2\u0418\u041a\5")
        buf.write(":\36\2\u0419\u0417\3\2\2\2\u0419\u0418\3\2\2\2\u041a\63")
        buf.write("\3\2\2\2\u041b\u041c\t\7\2\2\u041c\u041d\7\u00bb\2\2\u041d")
        buf.write("\u041e\5\u0162\u00b2\2\u041e\u041f\7z\2\2\u041f\u0429")
        buf.write("\5\u0160\u00b1\2\u0420\u0421\7\u00cd\2\2\u0421\u0426\5")
        buf.write("\66\34\2\u0422\u0423\7\u01c0\2\2\u0423\u0425\5\66\34\2")
        buf.write("\u0424\u0422\3\2\2\2\u0425\u0428\3\2\2\2\u0426\u0424\3")
        buf.write("\2\2\2\u0426\u0427\3\2\2\2\u0427\u042a\3\2\2\2\u0428\u0426")
        buf.write("\3\2\2\2\u0429\u0420\3\2\2\2\u0429\u042a\3\2\2\2\u042a")
        buf.write("\u042f\3\2\2\2\u042b\u0430\7M\2\2\u042c\u0430\7\u00d2")
        buf.write("\2\2\u042d\u042e\7b\2\2\u042e\u0430\7w\2\2\u042f\u042b")
        buf.write("\3\2\2\2\u042f\u042c\3\2\2\2\u042f\u042d\3\2\2\2\u0430")
        buf.write("\u0431\3\2\2\2\u0431\u0436\58\35\2\u0432\u0433\7\u01c0")
        buf.write("\2\2\u0433\u0435\58\35\2\u0434\u0432\3\2\2\2\u0435\u0438")
        buf.write("\3\2\2\2\u0436\u0434\3\2\2\2\u0436\u0437\3\2\2\2\u0437")
        buf.write("\u043b\3\2\2\2\u0438\u0436\3\2\2\2\u0439\u043a\7\u00cd")
        buf.write("\2\2\u043a\u043c\7\t\2\2\u043b\u0439\3\2\2\2\u043b\u043c")
        buf.write("\3\2\2\2\u043c\u0440\3\2\2\2\u043d\u043e\7t\2\2\u043e")
        buf.write("\u043f\7M\2\2\u043f\u0441\7\u0096\2\2\u0440\u043d\3\2")
        buf.write("\2\2\u0440\u0441\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0443")
        buf.write("\7\n\2\2\u0443\u0444\5\6\4\2\u0444\65\3\2\2\2\u0445\u0448")
        buf.write("\7\u010d\2\2\u0446\u0448\5\u00bc_\2\u0447\u0445\3\2\2")
        buf.write("\2\u0447\u0446\3\2\2\2\u0448\67\3\2\2\2\u0449\u044a\t")
        buf.write("\t\2\2\u044a9\3\2\2\2\u044b\u044c\t\7\2\2\u044c\u044d")
        buf.write("\7\u00bb\2\2\u044d\u044e\5\u0162\u00b2\2\u044e\u0452\7")
        buf.write("z\2\2\u044f\u0450\7\5\2\2\u0450\u0453\7\u00a9\2\2\u0451")
        buf.write("\u0453\7\61\2\2\u0452\u044f\3\2\2\2\u0452\u0451\3\2\2")
        buf.write("\2\u0453\u045d\3\2\2\2\u0454\u0455\7\u00cd\2\2\u0455\u045a")
        buf.write("\5\66\34\2\u0456\u0457\7\u01c0\2\2\u0457\u0459\5\66\34")
        buf.write("\2\u0458\u0456\3\2\2\2\u0459\u045c\3\2\2\2\u045a\u0458")
        buf.write("\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045e\3\2\2\2\u045c")
        buf.write("\u045a\3\2\2\2\u045d\u0454\3\2\2\2\u045d\u045e\3\2\2\2")
        buf.write("\u045e\u045f\3\2\2\2\u045f\u0460\t\n\2\2\u0460\u0465\5")
        buf.write("<\37\2\u0461\u0462\7\u01c0\2\2\u0462\u0464\58\35\2\u0463")
        buf.write("\u0461\3\2\2\2\u0464\u0467\3\2\2\2\u0465\u0463\3\2\2\2")
        buf.write("\u0465\u0466\3\2\2\2\u0466\u0468\3\2\2\2\u0467\u0465\3")
        buf.write("\2\2\2\u0468\u0469\7\n\2\2\u0469\u046a\5\6\4\2\u046a;")
        buf.write("\3\2\2\2\u046b\u046c\5\u0182\u00c2\2\u046c=\3\2\2\2\u046d")
        buf.write("\u046e\t\7\2\2\u046e\u046f\7T\2\2\u046f\u047d\5\u0164")
        buf.write("\u00b3\2\u0470\u0471\7\u01be\2\2\u0471\u0476\5F$\2\u0472")
        buf.write("\u0473\7\u01c0\2\2\u0473\u0475\5F$\2\u0474\u0472\3\2\2")
        buf.write("\2\u0475\u0478\3\2\2\2\u0476\u0474\3\2\2\2\u0476\u0477")
        buf.write("\3\2\2\2\u0477\u0479\3\2\2\2\u0478\u0476\3\2\2\2\u0479")
        buf.write("\u047a\7\u01bf\2\2\u047a\u047e\3\2\2\2\u047b\u047c\7\u01be")
        buf.write("\2\2\u047c\u047e\7\u01bf\2\2\u047d\u0470\3\2\2\2\u047d")
        buf.write("\u047b\3\2\2\2\u047e\u0482\3\2\2\2\u047f\u0483\5@!\2\u0480")
        buf.write("\u0483\5B\"\2\u0481\u0483\5D#\2\u0482\u047f\3\2\2\2\u0482")
        buf.write("\u0480\3\2\2\2\u0482\u0481\3\2\2\2\u0483\u0485\3\2\2\2")
        buf.write("\u0484\u0486\7\u01c1\2\2\u0485\u0484\3\2\2\2\u0485\u0486")
        buf.write("\3\2\2\2\u0486?\3\2\2\2\u0487\u0488\7\u009a\2\2\u0488")
        buf.write("\u0492\7\u00b2\2\2\u0489\u048a\7\u00cd\2\2\u048a\u048f")
        buf.write("\5J&\2\u048b\u048c\7\u01c0\2\2\u048c\u048e\5J&\2\u048d")
        buf.write("\u048b\3\2\2\2\u048e\u0491\3\2\2\2\u048f\u048d\3\2\2\2")
        buf.write("\u048f\u0490\3\2\2\2\u0490\u0493\3\2\2\2\u0491\u048f\3")
        buf.write("\2\2\2\u0492\u0489\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495")
        buf.write("\3\2\2\2\u0494\u0496\7\n\2\2\u0495\u0494\3\2\2\2\u0495")
        buf.write("\u0496\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498\7\u0099")
        buf.write("\2\2\u0498\u0499\5\"\22\2\u0499A\3\2\2\2\u049a\u049b\7")
        buf.write("\u009a\2\2\u049b\u049c\7\u01a6\2\2\u049c\u04a6\5\u00c0")
        buf.write("a\2\u049d\u049e\7\u00cd\2\2\u049e\u04a3\5J&\2\u049f\u04a0")
        buf.write("\7\u01c0\2\2\u04a0\u04a2\5J&\2\u04a1\u049f\3\2\2\2\u04a2")
        buf.write("\u04a5\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a3\u04a4\3\2\2\2")
        buf.write("\u04a4\u04a7\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a6\u049d\3")
        buf.write("\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a9\3\2\2\2\u04a8\u04aa")
        buf.write("\7\n\2\2\u04a9\u04a8\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa")
        buf.write("\u04ab\3\2\2\2\u04ab\u04af\7\16\2\2\u04ac\u04ae\5\b\5")
        buf.write("\2\u04ad\u04ac\3\2\2\2\u04ae\u04b1\3\2\2\2\u04af\u04ad")
        buf.write("\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\3\2\2\2\u04b1")
        buf.write("\u04af\3\2\2\2\u04b2\u04b3\7\u0099\2\2\u04b3\u04b4\7@")
        buf.write("\2\2\u04b4C\3\2\2\2\u04b5\u04b6\7\u009a\2\2\u04b6\u04c0")
        buf.write("\5\u0178\u00bd\2\u04b7\u04b8\7\u00cd\2\2\u04b8\u04bd\5")
        buf.write("J&\2\u04b9\u04ba\7\u01c0\2\2\u04ba\u04bc\5J&\2\u04bb\u04b9")
        buf.write("\3\2\2\2\u04bc\u04bf\3\2\2\2\u04bd\u04bb\3\2\2\2\u04bd")
        buf.write("\u04be\3\2\2\2\u04be\u04c1\3\2\2\2\u04bf\u04bd\3\2\2\2")
        buf.write("\u04c0\u04b7\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c3\3")
        buf.write("\2\2\2\u04c2\u04c4\7\n\2\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4")
        buf.write("\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c9\7\16\2\2\u04c6")
        buf.write("\u04c8\5\b\5\2\u04c7\u04c6\3\2\2\2\u04c8\u04cb\3\2\2\2")
        buf.write("\u04c9\u04c7\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cc\3")
        buf.write("\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04cd\7\u0099\2\2\u04cd")
        buf.write("\u04cf\5\u00dep\2\u04ce\u04d0\7\u01c1\2\2\u04cf\u04ce")
        buf.write("\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1")
        buf.write("\u04d2\7@\2\2\u04d2E\3\2\2\2\u04d3\u04d7\7\u01a6\2\2\u04d4")
        buf.write("\u04d5\5\u0180\u00c1\2\u04d5\u04d6\7\u01b9\2\2\u04d6\u04d8")
        buf.write("\3\2\2\2\u04d7\u04d4\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8")
        buf.write("\u04da\3\2\2\2\u04d9\u04db\7\n\2\2\u04da\u04d9\3\2\2\2")
        buf.write("\u04da\u04db\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04de\5")
        buf.write("\u0178\u00bd\2\u04dd\u04df\7\u00c7\2\2\u04de\u04dd\3\2")
        buf.write("\2\2\u04de\u04df\3\2\2\2\u04df\u04e2\3\2\2\2\u04e0\u04e1")
        buf.write("\7\u01ad\2\2\u04e1\u04e3\5\u017a\u00be\2\u04e2\u04e0\3")
        buf.write("\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e5\3\2\2\2\u04e4\u04e6")
        buf.write("\t\13\2\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6")
        buf.write("G\3\2\2\2\u04e7\u04eb\7\u010d\2\2\u04e8\u04eb\7\u0167")
        buf.write("\2\2\u04e9\u04eb\5\u00bc_\2\u04ea\u04e7\3\2\2\2\u04ea")
        buf.write("\u04e8\3\2\2\2\u04ea\u04e9\3\2\2\2\u04ebI\3\2\2\2\u04ec")
        buf.write("\u04ed\7\u009a\2\2\u04ed\u04ee\7u\2\2\u04ee\u04ef\7z\2")
        buf.write("\2\u04ef\u04f0\7u\2\2\u04f0\u04f7\7\u0128\2\2\u04f1\u04f2")
        buf.write("\7\24\2\2\u04f2\u04f3\7z\2\2\u04f3\u04f4\7u\2\2\u04f4")
        buf.write("\u04f7\7\u0128\2\2\u04f5\u04f7\5\u00bc_\2\u04f6\u04ec")
        buf.write("\3\2\2\2\u04f6\u04f1\3\2\2\2\u04f6\u04f5\3\2\2\2\u04f7")
        buf.write("K\3\2\2\2\u04f8\u04f9\7(\2\2\u04f9\u04fa\7\u00b0\2\2\u04fa")
        buf.write("\u04fb\5\u0180\u00c1\2\u04fb\u04fc\7z\2\2\u04fc\u04fd")
        buf.write("\5\u0120\u0091\2\u04fd\u04fe\7\u01be\2\2\u04fe\u04ff\5")
        buf.write("\u016c\u00b7\2\u04ff\u0512\7\u01bf\2\2\u0500\u0506\7\u00cd")
        buf.write("\2\2\u0501\u0507\7\u011a\2\2\u0502\u0503\7\u0174\2\2\u0503")
        buf.write("\u0504\7\u01a7\2\2\u0504\u0507\t\f\2\2\u0505\u0507\7\u0182")
        buf.write("\2\2\u0506\u0501\3\2\2\2\u0506\u0502\3\2\2\2\u0506\u0505")
        buf.write("\3\2\2\2\u0507\u050a\3\2\2\2\u0508\u0509\7\u01c0\2\2\u0509")
        buf.write("\u050b\7\u014b\2\2\u050a\u0508\3\2\2\2\u050a\u050b\3\2")
        buf.write("\2\2\u050b\u0510\3\2\2\2\u050c\u050d\7\u01c0\2\2\u050d")
        buf.write("\u050e\7\u0127\2\2\u050e\u050f\7\u01ad\2\2\u050f\u0511")
        buf.write("\5\u0170\u00b9\2\u0510\u050c\3\2\2\2\u0510\u0511\3\2\2")
        buf.write("\2\u0511\u0513\3\2\2\2\u0512\u0500\3\2\2\2\u0512\u0513")
        buf.write("\3\2\2\2\u0513\u0515\3\2\2\2\u0514\u0516\7\u01c1\2\2\u0515")
        buf.write("\u0514\3\2\2\2\u0515\u0516\3\2\2\2\u0516M\3\2\2\2\u0517")
        buf.write("\u0518\7(\2\2\u0518\u0519\7\u00b2\2\2\u0519\u051a\5\u0160")
        buf.write("\u00b1\2\u051a\u051b\7\u01be\2\2\u051b\u051d\5\u00c2b")
        buf.write("\2\u051c\u051e\7\u01c0\2\2\u051d\u051c\3\2\2\2\u051d\u051e")
        buf.write("\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0523\7\u01bf\2\2\u0520")
        buf.write("\u0522\5P)\2\u0521\u0520\3\2\2\2\u0522\u0525\3\2\2\2\u0523")
        buf.write("\u0521\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0529\3\2\2\2")
        buf.write("\u0525\u0523\3\2\2\2\u0526\u0527\7z\2\2\u0527\u052a\5")
        buf.write("\u0180\u00c1\2\u0528\u052a\7\65\2\2\u0529\u0526\3\2\2")
        buf.write("\2\u0529\u0528\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052e")
        buf.write("\3\2\2\2\u052b\u052c\7\u0189\2\2\u052c\u052f\5\u0180\u00c1")
        buf.write("\2\u052d\u052f\7\65\2\2\u052e\u052b\3\2\2\2\u052e\u052d")
        buf.write("\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0531\3\2\2\2\u0530")
        buf.write("\u0532\7\u01c1\2\2\u0531\u0530\3\2\2\2\u0531\u0532\3\2")
        buf.write("\2\2\u0532O\3\2\2\2\u0533\u0534\7\u00cd\2\2\u0534\u0535")
        buf.write("\7\u01be\2\2\u0535\u053a\5\u00d2j\2\u0536\u0537\7\u01c0")
        buf.write("\2\2\u0537\u0539\5\u00d2j\2\u0538\u0536\3\2\2\2\u0539")
        buf.write("\u053c\3\2\2\2\u053a\u0538\3\2\2\2\u053a\u053b\3\2\2\2")
        buf.write("\u053b\u053d\3\2\2\2\u053c\u053a\3\2\2\2\u053d\u053e\7")
        buf.write("\u01bf\2\2\u053eQ\3\2\2\2\u053f\u0540\5\u0182\u00c2\2")
        buf.write("\u0540\u0544\7\u01ad\2\2\u0541\u0545\5\u0182\u00c2\2\u0542")
        buf.write("\u0545\5\u0170\u00b9\2\u0543\u0545\7\u01a7\2\2\u0544\u0541")
        buf.write("\3\2\2\2\u0544\u0542\3\2\2\2\u0544\u0543\3\2\2\2\u0545")
        buf.write("S\3\2\2\2\u0546\u0547\7(\2\2\u0547\u0548\7\u00c8\2\2\u0548")
        buf.write("\u054d\5\u0162\u00b2\2\u0549\u054a\7\u01be\2\2\u054a\u054b")
        buf.write("\5\u016c\u00b7\2\u054b\u054c\7\u01bf\2\2\u054c\u054e\3")
        buf.write("\2\2\2\u054d\u0549\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0558")
        buf.write("\3\2\2\2\u054f\u0550\7\u00cd\2\2\u0550\u0555\5V,\2\u0551")
        buf.write("\u0552\7\u01c0\2\2\u0552\u0554\5V,\2\u0553\u0551\3\2\2")
        buf.write("\2\u0554\u0557\3\2\2\2\u0555\u0553\3\2\2\2\u0555\u0556")
        buf.write("\3\2\2\2\u0556\u0559\3\2\2\2\u0557\u0555\3\2\2\2\u0558")
        buf.write("\u054f\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u055a\3\2\2\2")
        buf.write("\u055a\u055b\7\n\2\2\u055b\u055f\5\"\22\2\u055c\u055d")
        buf.write("\7\u00cd\2\2\u055d\u055e\7\31\2\2\u055e\u0560\7\u0080")
        buf.write("\2\2\u055f\u055c\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0562")
        buf.write("\3\2\2\2\u0561\u0563\7\u01c1\2\2\u0562\u0561\3\2\2\2\u0562")
        buf.write("\u0563\3\2\2\2\u0563U\3\2\2\2\u0564\u0565\t\r\2\2\u0565")
        buf.write("W\3\2\2\2\u0566\u0567\7\6\2\2\u0567\u0568\7\u00b2\2\2")
        buf.write("\u0568\u058a\5\u0160\u00b1\2\u0569\u056a\7\u00ab\2\2\u056a")
        buf.write("\u056b\7\u01be\2\2\u056b\u056c\7\u0133\2\2\u056c\u056d")
        buf.write("\7\u01ad\2\2\u056d\u056e\t\16\2\2\u056e\u058b\7\u01bf")
        buf.write("\2\2\u056f\u0570\7\4\2\2\u0570\u058b\5\u00c4c\2\u0571")
        buf.write("\u0572\7\6\2\2\u0572\u0573\7\37\2\2\u0573\u058b\5\u00c6")
        buf.write("d\2\u0574\u0575\7=\2\2\u0575\u0576\7\"\2\2\u0576\u058b")
        buf.write("\5\u0180\u00c1\2\u0577\u0578\7\u00cd\2\2\u0578\u0579\7")
        buf.write("\31\2\2\u0579\u057a\7\4\2\2\u057a\u057b\7\"\2\2\u057b")
        buf.write("\u057c\5\u0180\u00c1\2\u057c\u057d\7O\2\2\u057d\u057e")
        buf.write("\7g\2\2\u057e\u057f\7\u01be\2\2\u057f\u0580\5\u016c\u00b7")
        buf.write("\2\u0580\u0581\7\u01bf\2\2\u0581\u0582\7\u0095\2\2\u0582")
        buf.write("\u0583\5\u0160\u00b1\2\u0583\u0584\7\u01be\2\2\u0584\u0585")
        buf.write("\5\u016c\u00b7\2\u0585\u0586\7\u01bf\2\2\u0586\u058b\3")
        buf.write("\2\2\2\u0587\u0588\7\31\2\2\u0588\u0589\7\"\2\2\u0589")
        buf.write("\u058b\5\u0180\u00c1\2\u058a\u0569\3\2\2\2\u058a\u056f")
        buf.write("\3\2\2\2\u058a\u0571\3\2\2\2\u058a\u0574\3\2\2\2\u058a")
        buf.write("\u0577\3\2\2\2\u058a\u0587\3\2\2\2\u058b\u058d\3\2\2\2")
        buf.write("\u058c\u058e\7\u01c1\2\2\u058d\u058c\3\2\2\2\u058d\u058e")
        buf.write("\3\2\2\2\u058eY\3\2\2\2\u058f\u0590\7\6\2\2\u0590\u0593")
        buf.write("\7\61\2\2\u0591\u0594\5\u0180\u00c1\2\u0592\u0594\7*\2")
        buf.write("\2\u0593\u0591\3\2\2\2\u0593\u0592\3\2\2\2\u0594\u05a1")
        buf.write("\3\2\2\2\u0595\u0596\7\u0141\2\2\u0596\u0597\7\u0143\2")
        buf.write("\2\u0597\u0598\7\u01ad\2\2\u0598\u05a2\5\u0180\u00c1\2")
        buf.write("\u0599\u059a\7\36\2\2\u059a\u05a2\5\u0180\u00c1\2\u059b")
        buf.write("\u059c\7\u00ab\2\2\u059c\u059f\5\\/\2\u059d\u059e\7\u00cd")
        buf.write("\2\2\u059e\u05a0\5\u0084C\2\u059f\u059d\3\2\2\2\u059f")
        buf.write("\u05a0\3\2\2\2\u05a0\u05a2\3\2\2\2\u05a1\u0595\3\2\2\2")
        buf.write("\u05a1\u0599\3\2\2\2\u05a1\u059b\3\2\2\2\u05a2\u05a4\3")
        buf.write("\2\2\2\u05a3\u05a5\7\u01c1\2\2\u05a4\u05a3\3\2\2\2\u05a4")
        buf.write("\u05a5\3\2\2\2\u05a5[\3\2\2\2\u05a6\u05bd\5^\60\2\u05a7")
        buf.write("\u05bd\5`\61\2\u05a8\u05bd\5d\63\2\u05a9\u05bd\5f\64\2")
        buf.write("\u05aa\u05bd\5h\65\2\u05ab\u05bd\5j\66\2\u05ac\u05bd\5")
        buf.write("l\67\2\u05ad\u05bd\5n8\2\u05ae\u05bd\5p9\2\u05af\u05bd")
        buf.write("\5r:\2\u05b0\u05bd\5t;\2\u05b1\u05b2\7\u0114\2\2\u05b2")
        buf.write("\u05bd\5\u0156\u00ac\2\u05b3\u05bd\7\3\2\2\u05b4\u05bd")
        buf.write("\5v<\2\u05b5\u05bd\5x=\2\u05b6\u05bd\5z>\2\u05b7\u05bd")
        buf.write("\5|?\2\u05b8\u05bd\5~@\2\u05b9\u05bd\5\u0080A\2\u05ba")
        buf.write("\u05bd\5\u0082B\2\u05bb\u05bd\5\u0084C\2\u05bc\u05a6\3")
        buf.write("\2\2\2\u05bc\u05a7\3\2\2\2\u05bc\u05a8\3\2\2\2\u05bc\u05a9")
        buf.write("\3\2\2\2\u05bc\u05aa\3\2\2\2\u05bc\u05ab\3\2\2\2\u05bc")
        buf.write("\u05ac\3\2\2\2\u05bc\u05ad\3\2\2\2\u05bc\u05ae\3\2\2\2")
        buf.write("\u05bc\u05af\3\2\2\2\u05bc\u05b0\3\2\2\2\u05bc\u05b1\3")
        buf.write("\2\2\2\u05bc\u05b3\3\2\2\2\u05bc\u05b4\3\2\2\2\u05bc\u05b5")
        buf.write("\3\2\2\2\u05bc\u05b6\3\2\2\2\u05bc\u05b7\3\2\2\2\u05bc")
        buf.write("\u05b8\3\2\2\2\u05bc\u05b9\3\2\2\2\u05bc\u05ba\3\2\2\2")
        buf.write("\u05bc\u05bb\3\2\2\2\u05bd]\3\2\2\2\u05be\u05bf\7\u00dd")
        buf.write("\2\2\u05bf\u05d0\5\u0170\u00b9\2\u05c0\u05c1\7\u00de\2")
        buf.write("\2\u05c1\u05d0\7x\2\2\u05c2\u05c7\7z\2\2\u05c3\u05c4\7")
        buf.write("\u0127\2\2\u05c4\u05c5\7\u01ad\2\2\u05c5\u05c8\7z\2\2")
        buf.write("\u05c6\u05c8\7x\2\2\u05c7\u05c3\3\2\2\2\u05c7\u05c6\3")
        buf.write("\2\2\2\u05c8\u05d0\3\2\2\2\u05c9\u05ca\7\u00df\2\2\u05ca")
        buf.write("\u05d0\5\u0170\u00b9\2\u05cb\u05cc\7\u00e0\2\2\u05cc\u05d0")
        buf.write("\5\u0170\u00b9\2\u05cd\u05ce\7\u00e1\2\2\u05ce\u05d0\t")
        buf.write("\17\2\2\u05cf\u05be\3\2\2\2\u05cf\u05c0\3\2\2\2\u05cf")
        buf.write("\u05c2\3\2\2\2\u05cf\u05c9\3\2\2\2\u05cf\u05cb\3\2\2\2")
        buf.write("\u05cf\u05cd\3\2\2\2\u05d0_\3\2\2\2\u05d1\u05d2\7\u00ea")
        buf.write("\2\2\u05d2\u05e2\7\u01ad\2\2\u05d3\u05e3\7x\2\2\u05d4")
        buf.write("\u05df\7z\2\2\u05d5\u05da\5b\62\2\u05d6\u05d7\7\u01c0")
        buf.write("\2\2\u05d7\u05d9\5b\62\2\u05d8\u05d6\3\2\2\2\u05d9\u05dc")
        buf.write("\3\2\2\2\u05da\u05d8\3\2\2\2\u05da\u05db\3\2\2\2\u05db")
        buf.write("\u05de\3\2\2\2\u05dc\u05da\3\2\2\2\u05dd\u05d5\3\2\2\2")
        buf.write("\u05de\u05e1\3\2\2\2\u05df\u05dd\3\2\2\2\u05df\u05e0\3")
        buf.write("\2\2\2\u05e0\u05e3\3\2\2\2\u05e1\u05df\3\2\2\2\u05e2\u05d3")
        buf.write("\3\2\2\2\u05e2\u05d4\3\2\2\2\u05e3a\3\2\2\2\u05e4\u05e5")
        buf.write("\7\u00dc\2\2\u05e5\u05e6\7\u01ad\2\2\u05e6\u05eb\5\u0170")
        buf.write("\u00b9\2\u05e7\u05e8\7\u00e9\2\2\u05e8\u05e9\7\u01ad\2")
        buf.write("\2\u05e9\u05eb\t\20\2\2\u05ea\u05e4\3\2\2\2\u05ea\u05e7")
        buf.write("\3\2\2\2\u05ebc\3\2\2\2\u05ec\u05ed\7#\2\2\u05ed\u05ee")
        buf.write("\7\u01ad\2\2\u05ee\u05ef\t\6\2\2\u05efe\3\2\2\2\u05f0")
        buf.write("\u05f1\7\u00f5\2\2\u05f1\u05f5\5\u0170\u00b9\2\u05f2\u05f3")
        buf.write("\7\u00f6\2\2\u05f3\u05f5\t\21\2\2\u05f4\u05f0\3\2\2\2")
        buf.write("\u05f4\u05f2\3\2\2\2\u05f5g\3\2\2\2\u05f6\u05f7\7\u00fd")
        buf.write("\2\2\u05f7\u05f8\5\u0170\u00b9\2\u05f8i\3\2\2\2\u05f9")
        buf.write("\u05fa\7\u010d\2\2\u05fa\u05fb\5\u0170\u00b9\2\u05fbk")
        buf.write("\3\2\2\2\u05fc\u05fd\t\22\2\2\u05fdm\3\2\2\2\u05fe\u05ff")
        buf.write("\t\23\2\2\u05ffo\3\2\2\2\u0600\u0601\t\24\2\2\u0601q\3")
        buf.write("\2\2\2\u0602\u0603\7\u0103\2\2\u0603\u0604\7\u01ad\2\2")
        buf.write("\u0604\u0605\t\25\2\2\u0605s\3\2\2\2\u0606\u0607\7\u00ff")
        buf.write("\2\2\u0607\u0620\5\u0170\u00b9\2\u0608\u0609\7\u018f\2")
        buf.write("\2\u0609\u0620\5\u0170\u00b9\2\u060a\u060b\7\u0101\2\2")
        buf.write("\u060b\u060e\7\u01ad\2\2\u060c\u060f\5\u0180\u00c1\2\u060d")
        buf.write("\u060f\7\u01a9\2\2\u060e\u060c\3\2\2\2\u060e\u060d\3\2")
        buf.write("\2\2\u060f\u0620\3\2\2\2\u0610\u0611\7\u0100\2\2\u0611")
        buf.write("\u0614\7\u01ad\2\2\u0612\u0615\5\u0180\u00c1\2\u0613\u0615")
        buf.write("\7\u01a9\2\2\u0614\u0612\3\2\2\2\u0614\u0613\3\2\2\2\u0615")
        buf.write("\u0620\3\2\2\2\u0616\u0617\7\u0144\2\2\u0617\u0618\7\u01ad")
        buf.write("\2\2\u0618\u0620\t\17\2\2\u0619\u061a\7\u018e\2\2\u061a")
        buf.write("\u061b\7\u01ad\2\2\u061b\u0620\t\17\2\2\u061c\u061d\7")
        buf.write("\u0191\2\2\u061d\u061e\7\u01ad\2\2\u061e\u0620\7\u01a7")
        buf.write("\2\2\u061f\u0606\3\2\2\2\u061f\u0608\3\2\2\2\u061f\u060a")
        buf.write("\3\2\2\2\u061f\u0610\3\2\2\2\u061f\u0616\3\2\2\2\u061f")
        buf.write("\u0619\3\2\2\2\u061f\u061c\3\2\2\2\u0620u\3\2\2\2\u0621")
        buf.write("\u0622\7\u0140\2\2\u0622\u0623\t\17\2\2\u0623w\3\2\2\2")
        buf.write("\u0624\u0625\7\u015a\2\2\u0625\u0626\t\26\2\2\u0626y\3")
        buf.write("\2\2\2\u0627\u0628\7\u0168\2\2\u0628\u062e\t\27\2\2\u0629")
        buf.write("\u062a\7\u018d\2\2\u062a\u062e\5\u0170\u00b9\2\u062b\u062c")
        buf.write("\7\u0159\2\2\u062c\u062e\t\30\2\2\u062d\u0627\3\2\2\2")
        buf.write("\u062d\u0629\3\2\2\2\u062d\u062b\3\2\2\2\u062e{\3\2\2")
        buf.write("\2\u062f\u0636\7\u010c\2\2\u0630\u0636\7\u0109\2\2\u0631")
        buf.write("\u0636\7\u0145\2\2\u0632\u0636\7\u010e\2\2\u0633\u0634")
        buf.write("\7\u0122\2\2\u0634\u0636\5\u0170\u00b9\2\u0635\u062f\3")
        buf.write("\2\2\2\u0635\u0630\3\2\2\2\u0635\u0631\3\2\2\2\u0635\u0632")
        buf.write("\3\2\2\2\u0635\u0633\3\2\2\2\u0636}\3\2\2\2\u0637\u0638")
        buf.write("\7\u00d4\2\2\u0638\u063d\5\u0170\u00b9\2\u0639\u063a\7")
        buf.write("\u0164\2\2\u063a\u063d\t\17\2\2\u063b\u063d\t\17\2\2\u063c")
        buf.write("\u0637\3\2\2\2\u063c\u0639\3\2\2\2\u063c\u063b\3\2\2\2")
        buf.write("\u063d\177\3\2\2\2\u063e\u063f\7\u00d6\2\2\u063f\u0654")
        buf.write("\5\u0170\u00b9\2\u0640\u0641\7\u00d5\2\2\u0641\u0654\5")
        buf.write("\u0170\u00b9\2\u0642\u0643\7\u00d7\2\2\u0643\u0654\5\u0170")
        buf.write("\u00b9\2\u0644\u0645\7\u00d8\2\2\u0645\u0654\5\u0170\u00b9")
        buf.write("\2\u0646\u0647\7\u00da\2\2\u0647\u0654\5\u0170\u00b9\2")
        buf.write("\u0648\u0649\7\u00ee\2\2\u0649\u064a\7\u01ad\2\2\u064a")
        buf.write("\u0654\7\u01a7\2\2\u064b\u064c\7\u00f0\2\2\u064c\u0654")
        buf.write("\5\u0170\u00b9\2\u064d\u064e\7\u014f\2\2\u064e\u0654\5")
        buf.write("\u0170\u00b9\2\u064f\u0650\7\u0160\2\2\u0650\u0654\5\u0170")
        buf.write("\u00b9\2\u0651\u0652\7\u0169\2\2\u0652\u0654\5\u0170\u00b9")
        buf.write("\2\u0653\u063e\3\2\2\2\u0653\u0640\3\2\2\2\u0653\u0642")
        buf.write("\3\2\2\2\u0653\u0644\3\2\2\2\u0653\u0646\3\2\2\2\u0653")
        buf.write("\u0648\3\2\2\2\u0653\u064b\3\2\2\2\u0653\u064d\3\2\2\2")
        buf.write("\u0653\u064f\3\2\2\2\u0653\u0651\3\2\2\2\u0654\u0081\3")
        buf.write("\2\2\2\u0655\u0656\7\u0187\2\2\u0656\u0657\7\u01ad\2\2")
        buf.write("\u0657\u0658\7\u01a7\2\2\u0658\u0659\t\31\2\2\u0659\u0083")
        buf.write("\3\2\2\2\u065a\u065b\7\u009e\2\2\u065b\u065c\7\u00d2\2")
        buf.write("\2\u065c\u0661\7\u01a7\2\2\u065d\u065e\7\u009e\2\2\u065e")
        buf.write("\u0661\7\u0125\2\2\u065f\u0661\7\u014c\2\2\u0660\u065a")
        buf.write("\3\2\2\2\u0660\u065d\3\2\2\2\u0660\u065f\3\2\2\2\u0661")
        buf.write("\u0085\3\2\2\2\u0662\u0663\7=\2\2\u0663\u0666\7_\2\2\u0664")
        buf.write("\u0665\7\\\2\2\u0665\u0667\7F\2\2\u0666\u0664\3\2\2\2")
        buf.write("\u0666\u0667\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u066b\5")
        buf.write("\u0180\u00c1\2\u0669\u066a\7z\2\2\u066a\u066c\5\u0160")
        buf.write("\u00b1\2\u066b\u0669\3\2\2\2\u066b\u066c\3\2\2\2\u066c")
        buf.write("\u066e\3\2\2\2\u066d\u066f\7\u01c1\2\2\u066e\u066d\3\2")
        buf.write("\2\2\u066e\u066f\3\2\2\2\u066f\u0087\3\2\2\2\u0670\u0671")
        buf.write("\7=\2\2\u0671\u0674\t\b\2\2\u0672\u0673\7\\\2\2\u0673")
        buf.write("\u0675\7F\2\2\u0674\u0672\3\2\2\2\u0674\u0675\3\2\2\2")
        buf.write("\u0675\u0676\3\2\2\2\u0676\u067b\5\u0164\u00b3\2\u0677")
        buf.write("\u0678\7\u01c0\2\2\u0678\u067a\5\u0164\u00b3\2\u0679\u0677")
        buf.write("\3\2\2\2\u067a\u067d\3\2\2\2\u067b\u0679\3\2\2\2\u067b")
        buf.write("\u067c\3\2\2\2\u067c\u067f\3\2\2\2\u067d\u067b\3\2\2\2")
        buf.write("\u067e\u0680\7\u01c1\2\2\u067f\u067e\3\2\2\2\u067f\u0680")
        buf.write("\3\2\2\2\u0680\u0089\3\2\2\2\u0681\u0684\5\u008cG\2\u0682")
        buf.write("\u0684\5\u008eH\2\u0683\u0681\3\2\2\2\u0683\u0682\3\2")
        buf.write("\2\2\u0684\u008b\3\2\2\2\u0685\u0686\7=\2\2\u0686\u0689")
        buf.write("\7\u00bb\2\2\u0687\u0688\7\\\2\2\u0688\u068a\7F\2\2\u0689")
        buf.write("\u0687\3\2\2\2\u0689\u068a\3\2\2\2\u068a\u068b\3\2\2\2")
        buf.write("\u068b\u0690\5\u0162\u00b2\2\u068c\u068d\7\u01c0\2\2\u068d")
        buf.write("\u068f\5\u0162\u00b2\2\u068e\u068c\3\2\2\2\u068f\u0692")
        buf.write("\3\2\2\2\u0690\u068e\3\2\2\2\u0690\u0691\3\2\2\2\u0691")
        buf.write("\u0694\3\2\2\2\u0692\u0690\3\2\2\2\u0693\u0695\7\u01c1")
        buf.write("\2\2\u0694\u0693\3\2\2\2\u0694\u0695\3\2\2\2\u0695\u008d")
        buf.write("\3\2\2\2\u0696\u0697\7=\2\2\u0697\u069a\7\u00bb\2\2\u0698")
        buf.write("\u0699\7\\\2\2\u0699\u069b\7F\2\2\u069a\u0698\3\2\2\2")
        buf.write("\u069a\u069b\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u06a1\5")
        buf.write("\u0162\u00b2\2\u069d\u069e\7\u01c0\2\2\u069e\u06a0\5\u0162")
        buf.write("\u00b2\2\u069f\u069d\3\2\2\2\u06a0\u06a3\3\2\2\2\u06a1")
        buf.write("\u069f\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a4\3\2\2\2")
        buf.write("\u06a3\u06a1\3\2\2\2\u06a4\u06a8\7z\2\2\u06a5\u06a9\7")
        buf.write("\61\2\2\u06a6\u06a7\7\5\2\2\u06a7\u06a9\7\u00a9\2\2\u06a8")
        buf.write("\u06a5\3\2\2\2\u06a8\u06a6\3\2\2\2\u06a9\u06ab\3\2\2\2")
        buf.write("\u06aa\u06ac\7\u01c1\2\2\u06ab\u06aa\3\2\2\2\u06ab\u06ac")
        buf.write("\3\2\2\2\u06ac\u008f\3\2\2\2\u06ad\u06ae\7=\2\2\u06ae")
        buf.write("\u06b1\7T\2\2\u06af\u06b0\7\\\2\2\u06b0\u06b2\7F\2\2\u06b1")
        buf.write("\u06af\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06b3\3\2\2\2")
        buf.write("\u06b3\u06b8\5\u0164\u00b3\2\u06b4\u06b5\7\u01c0\2\2\u06b5")
        buf.write("\u06b7\5\u0164\u00b3\2\u06b6\u06b4\3\2\2\2\u06b7\u06ba")
        buf.write("\3\2\2\2\u06b8\u06b6\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9")
        buf.write("\u06bc\3\2\2\2\u06ba\u06b8\3\2\2\2\u06bb\u06bd\7\u01c1")
        buf.write("\2\2\u06bc\u06bb\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u0091")
        buf.write("\3\2\2\2\u06be\u06bf\7=\2\2\u06bf\u06c3\7\u00b0\2\2\u06c0")
        buf.write("\u06c1\5\u0160\u00b1\2\u06c1\u06c2\7\u01b9\2\2\u06c2\u06c4")
        buf.write("\3\2\2\2\u06c3\u06c0\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4")
        buf.write("\u06c5\3\2\2\2\u06c5\u06c6\5\u0180\u00c1\2\u06c6\u06c7")
        buf.write("\7\u01c1\2\2\u06c7\u0093\3\2\2\2\u06c8\u06c9\7=\2\2\u06c9")
        buf.write("\u06cc\7\u00b2\2\2\u06ca\u06cb\7\\\2\2\u06cb\u06cd\7F")
        buf.write("\2\2\u06cc\u06ca\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06ce")
        buf.write("\3\2\2\2\u06ce\u06d0\5\u0160\u00b1\2\u06cf\u06d1\7\u01c1")
        buf.write("\2\2\u06d0\u06cf\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u0095")
        buf.write("\3\2\2\2\u06d2\u06d3\7=\2\2\u06d3\u06d6\7\u00c8\2\2\u06d4")
        buf.write("\u06d5\7\\\2\2\u06d5\u06d7\7F\2\2\u06d6\u06d4\3\2\2\2")
        buf.write("\u06d6\u06d7\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06dd\5")
        buf.write("\u0162\u00b2\2\u06d9\u06da\7\u01c0\2\2\u06da\u06dc\5\u0162")
        buf.write("\u00b2\2\u06db\u06d9\3\2\2\2\u06dc\u06df\3\2\2\2\u06dd")
        buf.write("\u06db\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06e1\3\2\2\2")
        buf.write("\u06df\u06dd\3\2\2\2\u06e0\u06e2\7\u01c1\2\2\u06e1\u06e0")
        buf.write("\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2\u0097\3\2\2\2\u06e3")
        buf.write("\u06e4\7(\2\2\u06e4\u06e5\7\u0192\2\2\u06e5\u06e6\5\u0162")
        buf.write("\u00b2\2\u06e6\u06e7\7R\2\2\u06e7\u06e8\5\u0178\u00bd")
        buf.write("\2\u06e8\u06e9\5\u017a\u00be\2\u06e9\u0099\3\2\2\2\u06ea")
        buf.write("\u06eb\7=\2\2\u06eb\u06ee\7\u0192\2\2\u06ec\u06ed\7\\")
        buf.write("\2\2\u06ed\u06ef\7F\2\2\u06ee\u06ec\3\2\2\2\u06ee\u06ef")
        buf.write("\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\5\u0162\u00b2")
        buf.write("\2\u06f1\u009b\3\2\2\2\u06f2\u06f5\5\u009eP\2\u06f3\u06f5")
        buf.write("\5\u00a0Q\2\u06f4\u06f2\3\2\2\2\u06f4\u06f3\3\2\2\2\u06f5")
        buf.write("\u009d\3\2\2\2\u06f6\u06f7\7}\2\2\u06f7\u06f8\7\u01be")
        buf.write("\2\2\u06f8\u06f9\5\u0180\u00c1\2\u06f9\u06fa\7\u01c0\2")
        buf.write("\2\u06fa\u06fb\7\u01a9\2\2\u06fb\u06fc\7\u01bf\2\2\u06fc")
        buf.write("\u009f\3\2\2\2\u06fd\u06fe\7|\2\2\u06fe\u06ff\7\u01be")
        buf.write("\2\2\u06ff\u0700\7\u01a9\2\2\u0700\u0701\7\u01c0\2\2\u0701")
        buf.write("\u0702\7\u01a9\2\2\u0702\u0703\7\u01bf\2\2\u0703\u0705")
        buf.write("\7\u01b9\2\2\u0704\u0706\5\u0180\u00c1\2\u0705\u0704\3")
        buf.write("\2\2\2\u0705\u0706\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0709")
        buf.write("\7\u01b9\2\2\u0708\u070a\5\u0180\u00c1\2\u0709\u0708\3")
        buf.write("\2\2\2\u0709\u070a\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070c")
        buf.write("\7\u01b9\2\2\u070c\u070d\5\u0180\u00c1\2\u070d\u00a1\3")
        buf.write("\2\2\2\u070e\u070f\7\64\2\2\u070f\u0711\7\u01a6\2\2\u0710")
        buf.write("\u0712\7\n\2\2\u0711\u0710\3\2\2\2\u0711\u0712\3\2\2\2")
        buf.write("\u0712\u0713\3\2\2\2\u0713\u0715\5\u00c0a\2\u0714\u0716")
        buf.write("\7\u01c1\2\2\u0715\u0714\3\2\2\2\u0715\u0716\3\2\2\2\u0716")
        buf.write("\u0724\3\2\2\2\u0717\u0718\7\64\2\2\u0718\u071d\5\u00be")
        buf.write("`\2\u0719\u071a\7\u01c0\2\2\u071a\u071c\5\u00be`\2\u071b")
        buf.write("\u0719\3\2\2\2\u071c\u071f\3\2\2\2\u071d\u071b\3\2\2\2")
        buf.write("\u071d\u071e\3\2\2\2\u071e\u0721\3\2\2\2\u071f\u071d\3")
        buf.write("\2\2\2\u0720\u0722\7\u01c1\2\2\u0721\u0720\3\2\2\2\u0721")
        buf.write("\u0722\3\2\2\2\u0722\u0724\3\2\2\2\u0723\u070e\3\2\2\2")
        buf.write("\u0723\u0717\3\2\2\2\u0724\u00a3\3\2\2\2\u0725\u0727\7")
        buf.write("\33\2\2\u0726\u0728\7\u011c\2\2\u0727\u0726\3\2\2\2\u0727")
        buf.write("\u0728\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072b\5\u016e")
        buf.write("\u00b8\2\u072a\u072c\7\u01c1\2\2\u072b\u072a\3\2\2\2\u072b")
        buf.write("\u072c\3\2\2\2\u072c\u0740\3\2\2\2\u072d\u072f\7\63\2")
        buf.write("\2\u072e\u0730\7\u011c\2\2\u072f\u072e\3\2\2\2\u072f\u0730")
        buf.write("\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0733\5\u016e\u00b8")
        buf.write("\2\u0732\u0734\7\u01c1\2\2\u0733\u0732\3\2\2\2\u0733\u0734")
        buf.write("\3\2\2\2\u0734\u0740\3\2\2\2\u0735\u0740\5\u00d4k\2\u0736")
        buf.write("\u0740\5\u00d8m\2\u0737\u0739\7{\2\2\u0738\u073a\7\u011c")
        buf.write("\2\2\u0739\u0738\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073b")
        buf.write("\3\2\2\2\u073b\u073d\5\u016e\u00b8\2\u073c\u073e\7\u01c1")
        buf.write("\2\2\u073d\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u0740")
        buf.write("\3\2\2\2\u073f\u0725\3\2\2\2\u073f\u072d\3\2\2\2\u073f")
        buf.write("\u0735\3\2\2\2\u073f\u0736\3\2\2\2\u073f\u0737\3\2\2\2")
        buf.write("\u0740\u00a5\3\2\2\2\u0741\u0744\7E\2\2\u0742\u0743\7")
        buf.write("\u01a6\2\2\u0743\u0745\7\u01ad\2\2\u0744\u0742\3\2\2\2")
        buf.write("\u0744\u0745\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u074f\5")
        buf.write("\u0164\u00b3\2\u0747\u074c\5\u00a8U\2\u0748\u0749\7\u01c0")
        buf.write("\2\2\u0749\u074b\5\u00a8U\2\u074a\u0748\3\2\2\2\u074b")
        buf.write("\u074e\3\2\2\2\u074c\u074a\3\2\2\2\u074c\u074d\3\2\2\2")
        buf.write("\u074d\u0750\3\2\2\2\u074e\u074c\3\2\2\2\u074f\u0747\3")
        buf.write("\2\2\2\u074f\u0750\3\2\2\2\u0750\u0752\3\2\2\2\u0751\u0753")
        buf.write("\7\u01c1\2\2\u0752\u0751\3\2\2\2\u0752\u0753\3\2\2\2\u0753")
        buf.write("\u076b\3\2\2\2\u0754\u0755\7E\2\2\u0755\u0756\7\u01be")
        buf.write("\2\2\u0756\u075b\5\u00aaV\2\u0757\u0758\7\u01c6\2\2\u0758")
        buf.write("\u075a\5\u00aaV\2\u0759\u0757\3\2\2\2\u075a\u075d\3\2")
        buf.write("\2\2\u075b\u0759\3\2\2\2\u075b\u075c\3\2\2\2\u075c\u075e")
        buf.write("\3\2\2\2\u075d\u075b\3\2\2\2\u075e\u0765\7\u01bf\2\2\u075f")
        buf.write("\u0761\7\n\2\2\u0760\u075f\3\2\2\2\u0760\u0761\3\2\2\2")
        buf.write("\u0761\u0762\3\2\2\2\u0762\u0763\t\32\2\2\u0763\u0764")
        buf.write("\7\u01ad\2\2\u0764\u0766\7\u01a9\2\2\u0765\u0760\3\2\2")
        buf.write("\2\u0765\u0766\3\2\2\2\u0766\u0768\3\2\2\2\u0767\u0769")
        buf.write("\7\u01c1\2\2\u0768\u0767\3\2\2\2\u0768\u0769\3\2\2\2\u0769")
        buf.write("\u076b\3\2\2\2\u076a\u0741\3\2\2\2\u076a\u0754\3\2\2\2")
        buf.write("\u076b\u00a7\3\2\2\2\u076c\u076d\7\u01a6\2\2\u076d\u076f")
        buf.write("\7\u01ad\2\2\u076e\u076c\3\2\2\2\u076e\u076f\3\2\2\2\u076f")
        buf.write("\u0779\3\2\2\2\u0770\u0773\5\u00dco\2\u0771\u0773\5\u0180")
        buf.write("\u00c1\2\u0772\u0770\3\2\2\2\u0772\u0771\3\2\2\2\u0773")
        buf.write("\u0775\3\2\2\2\u0774\u0776\t\33\2\2\u0775\u0774\3\2\2")
        buf.write("\2\u0775\u0776\3\2\2\2\u0776\u077a\3\2\2\2\u0777\u077a")
        buf.write("\7\65\2\2\u0778\u077a\7u\2\2\u0779\u0772\3\2\2\2\u0779")
        buf.write("\u0777\3\2\2\2\u0779\u0778\3\2\2\2\u077a\u00a9\3\2\2\2")
        buf.write("\u077b\u077c\t\3\2\2\u077c\u00ab\3\2\2\2\u077d\u077f\5")
        buf.write("\u00bc_\2\u077e\u0780\7\u01c1\2\2\u077f\u077e\3\2\2\2")
        buf.write("\u077f\u0780\3\2\2\2\u0780\u07b5\3\2\2\2\u0781\u078d\7")
        buf.write("V\2\2\u0782\u0784\7\5\2\2\u0783\u0785\7\u015f\2\2\u0784")
        buf.write("\u0783\3\2\2\2\u0784\u0785\3\2\2\2\u0785\u078e\3\2\2\2")
        buf.write("\u0786\u078b\5\u00aeX\2\u0787\u0788\7\u01be\2\2\u0788")
        buf.write("\u0789\5\u016c\u00b7\2\u0789\u078a\7\u01bf\2\2\u078a\u078c")
        buf.write("\3\2\2\2\u078b\u0787\3\2\2\2\u078b\u078c\3\2\2\2\u078c")
        buf.write("\u078e\3\2\2\2\u078d\u0782\3\2\2\2\u078d\u0786\3\2\2\2")
        buf.write("\u078e\u0791\3\2\2\2\u078f\u0790\7z\2\2\u0790\u0792\5")
        buf.write("\u0160\u00b1\2\u0791\u078f\3\2\2\2\u0791\u0792\3\2\2\2")
        buf.write("\u0792\u0793\3\2\2\2\u0793\u0794\7\u00b7\2\2\u0794\u0799")
        buf.write("\5\u0180\u00c1\2\u0795\u0796\7\u01c0\2\2\u0796\u0798\5")
        buf.write("\u0180\u00c1\2\u0797\u0795\3\2\2\2\u0798\u079b\3\2\2\2")
        buf.write("\u0799\u0797\3\2\2\2\u0799\u079a\3\2\2\2\u079a\u079f\3")
        buf.write("\2\2\2\u079b\u0799\3\2\2\2\u079c\u079d\7\u00cd\2\2\u079d")
        buf.write("\u079e\7V\2\2\u079e\u07a0\7\u0080\2\2\u079f\u079c\3\2")
        buf.write("\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a3\3\2\2\2\u07a1\u07a2")
        buf.write("\7\n\2\2\u07a2\u07a4\5\u0180\u00c1\2\u07a3\u07a1\3\2\2")
        buf.write("\2\u07a3\u07a4\3\2\2\2\u07a4\u07a6\3\2\2\2\u07a5\u07a7")
        buf.write("\7\u01c1\2\2\u07a6\u07a5\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7")
        buf.write("\u07b5\3\2\2\2\u07a8\u07af\7\u009b\2\2\u07a9\u07aa\7\u01be")
        buf.write("\2\2\u07aa\u07ab\7\u00cd\2\2\u07ab\u07ac\7\u00f2\2\2\u07ac")
        buf.write("\u07ad\7\u01ad\2\2\u07ad\u07ae\7\u01a6\2\2\u07ae\u07b0")
        buf.write("\7\u01bf\2\2\u07af\u07a9\3\2\2\2\u07af\u07b0\3\2\2\2\u07b0")
        buf.write("\u07b2\3\2\2\2\u07b1\u07b3\7\u01c1\2\2\u07b2\u07b1\3\2")
        buf.write("\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b5\3\2\2\2\u07b4\u077d")
        buf.write("\3\2\2\2\u07b4\u0781\3\2\2\2\u07b4\u07a8\3\2\2\2\u07b5")
        buf.write("\u00ad\3\2\2\2\u07b6\u07d1\7E\2\2\u07b7\u07b8\7\u00c8")
        buf.write("\2\2\u07b8\u07d1\5\u0180\u00c1\2\u07b9\u07ba\7\u0186\2")
        buf.write("\2\u07ba\u07d1\5\u0180\u00c1\2\u07bb\u07bd\7\u00f1\2\2")
        buf.write("\u07bc\u07be\5\u0180\u00c1\2\u07bd\u07bc\3\2\2\2\u07bd")
        buf.write("\u07be\3\2\2\2\u07be\u07d1\3\2\2\2\u07bf\u07c0\7(\2\2")
        buf.write("\u07c0\u07d1\t\34\2\2\u07c1\u07d1\7\u017b\2\2\u07c2\u07d1")
        buf.write("\7\u0126\2\2\u07c3\u07d1\7\u00a5\2\2\u07c4\u07d1\7\u0095")
        buf.write("\2\2\u07c5\u07d1\7a\2\2\u07c6\u07ce\7\6\2\2\u07c7\u07c9")
        buf.write("\7\b\2\2\u07c8\u07c7\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9")
        buf.write("\u07cc\3\2\2\2\u07ca\u07cd\5\u0180\u00c1\2\u07cb\u07cd")
        buf.write("\7\61\2\2\u07cc\u07ca\3\2\2\2\u07cc\u07cb\3\2\2\2\u07cd")
        buf.write("\u07cf\3\2\2\2\u07ce\u07c8\3\2\2\2\u07ce\u07cf\3\2\2\2")
        buf.write("\u07cf\u07d1\3\2\2\2\u07d0\u07b6\3\2\2\2\u07d0\u07b7\3")
        buf.write("\2\2\2\u07d0\u07b9\3\2\2\2\u07d0\u07bb\3\2\2\2\u07d0\u07bf")
        buf.write("\3\2\2\2\u07d0\u07c1\3\2\2\2\u07d0\u07c2\3\2\2\2\u07d0")
        buf.write("\u07c3\3\2\2\2\u07d0\u07c4\3\2\2\2\u07d0\u07c5\3\2\2\2")
        buf.write("\u07d0\u07c6\3\2\2\2\u07d1\u00af\3\2\2\2\u07d2\u07d3\7")
        buf.write("\u00ab\2\2\u07d3\u07d6\7\u01a6\2\2\u07d4\u07d5\7\u01b9")
        buf.write("\2\2\u07d5\u07d7\5\u0180\u00c1\2\u07d6\u07d4\3\2\2\2\u07d6")
        buf.write("\u07d7\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07d9\7\u01ad")
        buf.write("\2\2\u07d9\u07db\5\u00dep\2\u07da\u07dc\7\u01c1\2\2\u07db")
        buf.write("\u07da\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07fa\3\2\2\2")
        buf.write("\u07dd\u07de\7\u00ab\2\2\u07de\u07df\7\u01a6\2\2\u07df")
        buf.write("\u07e0\5\u0186\u00c4\2\u07e0\u07e2\5\u00dep\2\u07e1\u07e3")
        buf.write("\7\u01c1\2\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3")
        buf.write("\u07fa\3\2\2\2\u07e4\u07e5\7\u00ab\2\2\u07e5\u07e6\7\u01a6")
        buf.write("\2\2\u07e6\u07e7\7\u01ad\2\2\u07e7\u07e8\7/\2\2\u07e8")
        buf.write("\u07f3\5\u00d6l\2\u07e9\u07f1\7M\2\2\u07ea\u07eb\7\u0092")
        buf.write("\2\2\u07eb\u07f2\7\u0153\2\2\u07ec\u07ef\7\u00c2\2\2\u07ed")
        buf.write("\u07ee\7w\2\2\u07ee\u07f0\5\u016c\u00b7\2\u07ef\u07ed")
        buf.write("\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f2\3\2\2\2\u07f1")
        buf.write("\u07ea\3\2\2\2\u07f1\u07ec\3\2\2\2\u07f2\u07f4\3\2\2\2")
        buf.write("\u07f3\u07e9\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4\u07f6\3")
        buf.write("\2\2\2\u07f5\u07f7\7\u01c1\2\2\u07f6\u07f5\3\2\2\2\u07f6")
        buf.write("\u07f7\3\2\2\2\u07f7\u07fa\3\2\2\2\u07f8\u07fa\5\u00da")
        buf.write("n\2\u07f9\u07d2\3\2\2\2\u07f9\u07dd\3\2\2\2\u07f9\u07e4")
        buf.write("\3\2\2\2\u07f9\u07f8\3\2\2\2\u07fa\u00b1\3\2\2\2\u07fb")
        buf.write("\u07fc\7\16\2\2\u07fc\u07fd\7;\2\2\u07fd\u0800\t\35\2")
        buf.write("\2\u07fe\u0801\5\u0180\u00c1\2\u07ff\u0801\7\u01a6\2\2")
        buf.write("\u0800\u07fe\3\2\2\2\u0800\u07ff\3\2\2\2\u0800\u0801\3")
        buf.write("\2\2\2\u0801\u0803\3\2\2\2\u0802\u0804\7\u01c1\2\2\u0803")
        buf.write("\u0802\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0849\3\2\2\2")
        buf.write("\u0805\u0806\7\16\2\2\u0806\u0810\t\35\2\2\u0807\u080a")
        buf.write("\5\u0180\u00c1\2\u0808\u080a\7\u01a6\2\2\u0809\u0807\3")
        buf.write("\2\2\2\u0809\u0808\3\2\2\2\u080a\u080e\3\2\2\2\u080b\u080c")
        buf.write("\7\u00cd\2\2\u080c\u080d\7\u0136\2\2\u080d\u080f\7\u01a9")
        buf.write("\2\2\u080e\u080b\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0811")
        buf.write("\3\2\2\2\u0810\u0809\3\2\2\2\u0810\u0811\3\2\2\2\u0811")
        buf.write("\u0813\3\2\2\2\u0812\u0814\7\u01c1\2\2\u0813\u0812\3\2")
        buf.write("\2\2\u0813\u0814\3\2\2\2\u0814\u0849\3\2\2\2\u0815\u0816")
        buf.write("\7 \2\2\u0816\u0823\t\35\2\2\u0817\u081a\5\u0180\u00c1")
        buf.write("\2\u0818\u081a\7\u01a6\2\2\u0819\u0817\3\2\2\2\u0819\u0818")
        buf.write("\3\2\2\2\u081a\u0821\3\2\2\2\u081b\u081c\7\u00cd\2\2\u081c")
        buf.write("\u081d\7\u01be\2\2\u081d\u081e\7\u0103\2\2\u081e\u081f")
        buf.write("\7\u01ad\2\2\u081f\u0820\t\17\2\2\u0820\u0822\7\u01bf")
        buf.write("\2\2\u0821\u081b\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0824")
        buf.write("\3\2\2\2\u0823\u0819\3\2\2\2\u0823\u0824\3\2\2\2\u0824")
        buf.write("\u0826\3\2\2\2\u0825\u0827\7\u01c1\2\2\u0826\u0825\3\2")
        buf.write("\2\2\u0826\u0827\3\2\2\2\u0827\u0849\3\2\2\2\u0828\u082a")
        buf.write("\7 \2\2\u0829\u082b\7\u019d\2\2\u082a\u0829\3\2\2\2\u082a")
        buf.write("\u082b\3\2\2\2\u082b\u082d\3\2\2\2\u082c\u082e\7\u01c1")
        buf.write("\2\2\u082d\u082c\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u0849")
        buf.write("\3\2\2\2\u082f\u0830\7\u009e\2\2\u0830\u0833\t\35\2\2")
        buf.write("\u0831\u0834\5\u0180\u00c1\2\u0832\u0834\7\u01a6\2\2\u0833")
        buf.write("\u0831\3\2\2\2\u0833\u0832\3\2\2\2\u0833\u0834\3\2\2\2")
        buf.write("\u0834\u0836\3\2\2\2\u0835\u0837\7\u01c1\2\2\u0836\u0835")
        buf.write("\3\2\2\2\u0836\u0837\3\2\2\2\u0837\u0849\3\2\2\2\u0838")
        buf.write("\u083a\7\u009e\2\2\u0839\u083b\7\u019d\2\2\u083a\u0839")
        buf.write("\3\2\2\2\u083a\u083b\3\2\2\2\u083b\u083d\3\2\2\2\u083c")
        buf.write("\u083e\7\u01c1\2\2\u083d\u083c\3\2\2\2\u083d\u083e\3\2")
        buf.write("\2\2\u083e\u0849\3\2\2\2\u083f\u0840\7\u00a2\2\2\u0840")
        buf.write("\u0843\t\35\2\2\u0841\u0844\5\u0180\u00c1\2\u0842\u0844")
        buf.write("\7\u01a6\2\2\u0843\u0841\3\2\2\2\u0843\u0842\3\2\2\2\u0843")
        buf.write("\u0844\3\2\2\2\u0844\u0846\3\2\2\2\u0845\u0847\7\u01c1")
        buf.write("\2\2\u0846\u0845\3\2\2\2\u0846\u0847\3\2\2\2\u0847\u0849")
        buf.write("\3\2\2\2\u0848\u07fb\3\2\2\2\u0848\u0805\3\2\2\2\u0848")
        buf.write("\u0815\3\2\2\2\u0848\u0828\3\2\2\2\u0848\u082f\3\2\2\2")
        buf.write("\u0848\u0838\3\2\2\2\u0848\u083f\3\2\2\2\u0849\u00b3\3")
        buf.write("\2\2\2\u084a\u084c\7\u011d\2\2\u084b\u084d\7\u01a7\2\2")
        buf.write("\u084c\u084b\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u00b5\3")
        buf.write("\2\2\2\u084e\u084f\7\u00c4\2\2\u084f\u0851\5\u0180\u00c1")
        buf.write("\2\u0850\u0852\7\u01c1\2\2\u0851\u0850\3\2\2\2\u0851\u0852")
        buf.write("\3\2\2\2\u0852\u00b7\3\2\2\2\u0853\u0854\7\62\2\2\u0854")
        buf.write("\u0859\5\u0182\u00c2\2\u0855\u0856\7\u01be\2\2\u0856\u0857")
        buf.write("\5\u0140\u00a1\2\u0857\u0858\7\u01bf\2\2\u0858\u085a\3")
        buf.write("\2\2\2\u0859\u0855\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u085d")
        buf.write("\3\2\2\2\u085b\u085c\7\u00cd\2\2\u085c\u085e\5\u00ba^")
        buf.write("\2\u085d\u085b\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0860")
        buf.write("\3\2\2\2\u085f\u0861\7\u01c1\2\2\u0860\u085f\3\2\2\2\u0860")
        buf.write("\u0861\3\2\2\2\u0861\u00b9\3\2\2\2\u0862\u0865\5\u0182")
        buf.write("\u00c2\2\u0863\u0864\7\u01c0\2\2\u0864\u0866\5\u0182\u00c2")
        buf.write("\2\u0865\u0863\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u00bb")
        buf.write("\3\2\2\2\u0867\u0868\7E\2\2\u0868\u0869\7\n\2\2\u0869")
        buf.write("\u086a\t\36\2\2\u086a\u00bd\3\2\2\2\u086b\u086d\7\u01a6")
        buf.write("\2\2\u086c\u086e\7\n\2\2\u086d\u086c\3\2\2\2\u086d\u086e")
        buf.write("\3\2\2\2\u086e\u086f\3\2\2\2\u086f\u0872\5\u0178\u00bd")
        buf.write("\2\u0870\u0871\7\u01ad\2\2\u0871\u0873\5\u00dep\2\u0872")
        buf.write("\u0870\3\2\2\2\u0872\u0873\3\2\2\2\u0873\u00bf\3\2\2\2")
        buf.write("\u0874\u0875\7\u00b2\2\2\u0875\u0876\7\u01be\2\2\u0876")
        buf.write("\u0877\5\u00c2b\2\u0877\u0878\7\u01bf\2\2\u0878\u00c1")
        buf.write("\3\2\2\2\u0879\u0880\5\u00c4c\2\u087a\u087c\7\u01c0\2")
        buf.write("\2\u087b\u087a\3\2\2\2\u087b\u087c\3\2\2\2\u087c\u087d")
        buf.write("\3\2\2\2\u087d\u087f\5\u00c4c\2\u087e\u087b\3\2\2\2\u087f")
        buf.write("\u0882\3\2\2\2\u0880\u087e\3\2\2\2\u0880\u0881\3\2\2\2")
        buf.write("\u0881\u00c3\3\2\2\2\u0882\u0880\3\2\2\2\u0883\u0886\5")
        buf.write("\u00c6d\2\u0884\u0886\5\u00caf\2\u0885\u0883\3\2\2\2\u0885")
        buf.write("\u0884\3\2\2\2\u0886\u00c5\3\2\2\2\u0887\u088b\5\u0180")
        buf.write("\u00c1\2\u0888\u088c\5\u0178\u00bd\2\u0889\u088a\7\n\2")
        buf.write("\2\u088a\u088c\5\u00dep\2\u088b\u0888\3\2\2\2\u088b\u0889")
        buf.write("\3\2\2\2\u088c\u088f\3\2\2\2\u088d\u088e\7\36\2\2\u088e")
        buf.write("\u0890\5\u0180\u00c1\2\u088f\u088d\3\2\2\2\u088f\u0890")
        buf.write("\3\2\2\2\u0890\u0892\3\2\2\2\u0891\u0893\5\u0174\u00bb")
        buf.write("\2\u0892\u0891\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u08ab")
        buf.write("\3\2\2\2\u0894\u0895\7\"\2\2\u0895\u0897\5\u0180\u00c1")
        buf.write("\2\u0896\u0894\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0898")
        buf.write("\3\2\2\2\u0898\u0899\7\65\2\2\u0899\u089c\5\u00e0q\2\u089a")
        buf.write("\u089b\7\u00cd\2\2\u089b\u089d\7\u00c6\2\2\u089c\u089a")
        buf.write("\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u08ac\3\2\2\2\u089e")
        buf.write("\u08a4\7Y\2\2\u089f\u08a0\7\u01be\2\2\u08a0\u08a1\7\u01a7")
        buf.write("\2\2\u08a1\u08a2\7\u01c0\2\2\u08a2\u08a3\7\u01a7\2\2\u08a3")
        buf.write("\u08a5\7\u01bf\2\2\u08a4\u089f\3\2\2\2\u08a4\u08a5\3\2")
        buf.write("\2\2\u08a5\u08a9\3\2\2\2\u08a6\u08a7\7t\2\2\u08a7\u08a8")
        buf.write("\7M\2\2\u08a8\u08aa\7\u0096\2\2\u08a9\u08a6\3\2\2\2\u08a9")
        buf.write("\u08aa\3\2\2\2\u08aa\u08ac\3\2\2\2\u08ab\u0896\3\2\2\2")
        buf.write("\u08ab\u089e\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u08ae\3")
        buf.write("\2\2\2\u08ad\u08af\7\u00a0\2\2\u08ae\u08ad\3\2\2\2\u08ae")
        buf.write("\u08af\3\2\2\2\u08af\u08b3\3\2\2\2\u08b0\u08b2\5\u00c8")
        buf.write("e\2\u08b1\u08b0\3\2\2\2\u08b2\u08b5\3\2\2\2\u08b3\u08b1")
        buf.write("\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u00c7\3\2\2\2\u08b5")
        buf.write("\u08b3\3\2\2\2\u08b6\u08b7\7\"\2\2\u08b7\u08b9\5\u0180")
        buf.write("\u00c1\2\u08b8\u08b6\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9")
        buf.write("\u08bb\3\2\2\2\u08ba\u08bc\5\u0174\u00bb\2\u08bb\u08ba")
        buf.write("\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08e1\3\2\2\2\u08bd")
        buf.write("\u08be\7\u008b\2\2\u08be\u08c1\7g\2\2\u08bf\u08c1\7\u00c0")
        buf.write("\2\2\u08c0\u08bd\3\2\2\2\u08c0\u08bf\3\2\2\2\u08c1\u08c3")
        buf.write("\3\2\2\2\u08c2\u08c4\5\u0172\u00ba\2\u08c3\u08c2\3\2\2")
        buf.write("\2\u08c3\u08c4\3\2\2\2\u08c4\u08c6\3\2\2\2\u08c5\u08c7")
        buf.write("\5\u00d0i\2\u08c6\u08c5\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7")
        buf.write("\u08e2\3\2\2\2\u08c8\u08cc\7\31\2\2\u08c9\u08ca\7t\2\2")
        buf.write("\u08ca\u08cb\7M\2\2\u08cb\u08cd\7\u0096\2\2\u08cc\u08c9")
        buf.write("\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce")
        buf.write("\u08cf\7\u01be\2\2\u08cf\u08d0\5\u00ecw\2\u08d0\u08d1")
        buf.write("\7\u01bf\2\2\u08d1\u08e2\3\2\2\2\u08d2\u08d3\7O\2\2\u08d3")
        buf.write("\u08d5\7g\2\2\u08d4\u08d2\3\2\2\2\u08d4\u08d5\3\2\2\2")
        buf.write("\u08d5\u08d6\3\2\2\2\u08d6\u08d7\7\u0095\2\2\u08d7\u08d8")
        buf.write("\5\u0160\u00b1\2\u08d8\u08d9\7\u01be\2\2\u08d9\u08da\5")
        buf.write("\u016c\u00b7\2\u08da\u08dc\7\u01bf\2\2\u08db\u08dd\5\u00cc")
        buf.write("g\2\u08dc\u08db\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08df")
        buf.write("\3\2\2\2\u08de\u08e0\5\u00ceh\2\u08df\u08de\3\2\2\2\u08df")
        buf.write("\u08e0\3\2\2\2\u08e0\u08e2\3\2\2\2\u08e1\u08c0\3\2\2\2")
        buf.write("\u08e1\u08c8\3\2\2\2\u08e1\u08d4\3\2\2\2\u08e2\u00c9\3")
        buf.write("\2\2\2\u08e3\u08e4\7\"\2\2\u08e4\u08e6\5\u0180\u00c1\2")
        buf.write("\u08e5\u08e3\3\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u0921\3")
        buf.write("\2\2\2\u08e7\u08e8\7\u008b\2\2\u08e8\u08eb\7g\2\2\u08e9")
        buf.write("\u08eb\7\u00c0\2\2\u08ea\u08e7\3\2\2\2\u08ea\u08e9\3\2")
        buf.write("\2\2\u08eb\u08ed\3\2\2\2\u08ec\u08ee\5\u0172\u00ba\2\u08ed")
        buf.write("\u08ec\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u08ef\3\2\2\2")
        buf.write("\u08ef\u08f0\7\u01be\2\2\u08f0\u08f2\5\u016c\u00b7\2\u08f1")
        buf.write("\u08f3\t\37\2\2\u08f2\u08f1\3\2\2\2\u08f2\u08f3\3\2\2")
        buf.write("\2\u08f3\u08f4\3\2\2\2\u08f4\u08f6\7\u01bf\2\2\u08f5\u08f7")
        buf.write("\5\u00d0i\2\u08f6\u08f5\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7")
        buf.write("\u08fa\3\2\2\2\u08f8\u08f9\7z\2\2\u08f9\u08fb\5\u0180")
        buf.write("\u00c1\2\u08fa\u08f8\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb")
        buf.write("\u0922\3\2\2\2\u08fc\u0900\7\31\2\2\u08fd\u08fe\7t\2\2")
        buf.write("\u08fe\u08ff\7M\2\2\u08ff\u0901\7\u0096\2\2\u0900\u08fd")
        buf.write("\3\2\2\2\u0900\u0901\3\2\2\2\u0901\u0902\3\2\2\2\u0902")
        buf.write("\u0903\7\u01be\2\2\u0903\u0904\5\u00ecw\2\u0904\u0905")
        buf.write("\7\u01bf\2\2\u0905\u0922\3\2\2\2\u0906\u0908\7\65\2\2")
        buf.write("\u0907\u0909\7\u01be\2\2\u0908\u0907\3\2\2\2\u0908\u0909")
        buf.write("\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090c\5\u0128\u0095")
        buf.write("\2\u090b\u090d\7\u01bf\2\2\u090c\u090b\3\2\2\2\u090c\u090d")
        buf.write("\3\2\2\2\u090d\u090e\3\2\2\2\u090e\u090f\7M\2\2\u090f")
        buf.write("\u0910\5\u0180\u00c1\2\u0910\u0922\3\2\2\2\u0911\u0912")
        buf.write("\7O\2\2\u0912\u0913\7g\2\2\u0913\u0914\7\u01be\2\2\u0914")
        buf.write("\u0915\5\u016c\u00b7\2\u0915\u0916\7\u01bf\2\2\u0916\u0917")
        buf.write("\7\u0095\2\2\u0917\u0918\5\u0160\u00b1\2\u0918\u0919\7")
        buf.write("\u01be\2\2\u0919\u091a\5\u016c\u00b7\2\u091a\u091c\7\u01bf")
        buf.write("\2\2\u091b\u091d\5\u00ccg\2\u091c\u091b\3\2\2\2\u091c")
        buf.write("\u091d\3\2\2\2\u091d\u091f\3\2\2\2\u091e\u0920\5\u00ce")
        buf.write("h\2\u091f\u091e\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0922")
        buf.write("\3\2\2\2\u0921\u08ea\3\2\2\2\u0921\u08fc\3\2\2\2\u0921")
        buf.write("\u0906\3\2\2\2\u0921\u0911\3\2\2\2\u0922\u00cb\3\2\2\2")
        buf.write("\u0923\u0924\7z\2\2\u0924\u092c\7\66\2\2\u0925\u0926\7")
        buf.write("\u0147\2\2\u0926\u092d\7\u00d1\2\2\u0927\u092d\7\25\2")
        buf.write("\2\u0928\u0929\7\u00ab\2\2\u0929\u092d\7u\2\2\u092a\u092b")
        buf.write("\7\u00ab\2\2\u092b\u092d\7\65\2\2\u092c\u0925\3\2\2\2")
        buf.write("\u092c\u0927\3\2\2\2\u092c\u0928\3\2\2\2\u092c\u092a\3")
        buf.write("\2\2\2\u092d\u00cd\3\2\2\2\u092e\u092f\7z\2\2\u092f\u0937")
        buf.write("\7\u00c2\2\2\u0930\u0931\7\u0147\2\2\u0931\u0938\7\u00d1")
        buf.write("\2\2\u0932\u0938\7\25\2\2\u0933\u0934\7\u00ab\2\2\u0934")
        buf.write("\u0938\7u\2\2\u0935\u0936\7\u00ab\2\2\u0936\u0938\7\65")
        buf.write("\2\2\u0937\u0930\3\2\2\2\u0937\u0932\3\2\2\2\u0937\u0933")
        buf.write("\3\2\2\2\u0937\u0935\3\2\2\2\u0938\u00cf\3\2\2\2\u0939")
        buf.write("\u093a\7\u00cd\2\2\u093a\u093b\7\u01be\2\2\u093b\u0940")
        buf.write("\5\u00d2j\2\u093c\u093d\7\u01c0\2\2\u093d\u093f\5\u00d2")
        buf.write("j\2\u093e\u093c\3\2\2\2\u093f\u0942\3\2\2\2\u0940\u093e")
        buf.write("\3\2\2\2\u0940\u0941\3\2\2\2\u0941\u0943\3\2\2\2\u0942")
        buf.write("\u0940\3\2\2\2\u0943\u0944\7\u01bf\2\2\u0944\u00d1\3\2")
        buf.write("\2\2\u0945\u0946\5\u0182\u00c2\2\u0946\u094a\7\u01ad\2")
        buf.write("\2\u0947\u094b\5\u0182\u00c2\2\u0948\u094b\5\u0170\u00b9")
        buf.write("\2\u0949\u094b\7\u01a7\2\2\u094a\u0947\3\2\2\2\u094a\u0948")
        buf.write("\3\2\2\2\u094a\u0949\3\2\2\2\u094b\u00d3\3\2\2\2\u094c")
        buf.write("\u094d\7\64\2\2\u094d\u096d\5\u016e\u00b8\2\u094e\u0958")
        buf.write("\7/\2\2\u094f\u0956\5\u00d6l\2\u0950\u0951\7M\2\2\u0951")
        buf.write("\u0954\7\u00c2\2\2\u0952\u0953\7w\2\2\u0953\u0955\5\u016c")
        buf.write("\u00b7\2\u0954\u0952\3\2\2\2\u0954\u0955\3\2\2\2\u0955")
        buf.write("\u0957\3\2\2\2\u0956\u0950\3\2\2\2\u0956\u0957\3\2\2\2")
        buf.write("\u0957\u0959\3\2\2\2\u0958\u094f\3\2\2\2\u0958\u0959\3")
        buf.write("\2\2\2\u0959\u096e\3\2\2\2\u095a\u095c\7\u0129\2\2\u095b")
        buf.write("\u095a\3\2\2\2\u095b\u095c\3\2\2\2\u095c\u095e\3\2\2\2")
        buf.write("\u095d\u095f\7\u0176\2\2\u095e\u095d\3\2\2\2\u095e\u095f")
        buf.write("\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0961\7/\2\2\u0961")
        buf.write("\u0962\7M\2\2\u0962\u096b\5\"\22\2\u0963\u0969\7M\2\2")
        buf.write("\u0964\u0965\7\u0092\2\2\u0965\u096a\7\u0153\2\2\u0966")
        buf.write("\u096a\7\u00c2\2\2\u0967\u0968\7w\2\2\u0968\u096a\5\u016c")
        buf.write("\u00b7\2\u0969\u0964\3\2\2\2\u0969\u0966\3\2\2\2\u0969")
        buf.write("\u0967\3\2\2\2\u096a\u096c\3\2\2\2\u096b\u0963\3\2\2\2")
        buf.write("\u096b\u096c\3\2\2\2\u096c\u096e\3\2\2\2\u096d\u094e\3")
        buf.write("\2\2\2\u096d\u095b\3\2\2\2\u096e\u0970\3\2\2\2\u096f\u0971")
        buf.write("\7\u01c1\2\2\u0970\u096f\3\2\2\2\u0970\u0971\3\2\2\2\u0971")
        buf.write("\u00d5\3\2\2\2\u0972\u0974\t\21\2\2\u0973\u0972\3\2\2")
        buf.write("\2\u0973\u0974\3\2\2\2\u0974\u0976\3\2\2\2\u0975\u0977")
        buf.write("\t \2\2\u0976\u0975\3\2\2\2\u0976\u0977\3\2\2\2\u0977")
        buf.write("\u0979\3\2\2\2\u0978\u097a\t!\2\2\u0979\u0978\3\2\2\2")
        buf.write("\u0979\u097a\3\2\2\2\u097a\u097c\3\2\2\2\u097b\u097d\t")
        buf.write("\"\2\2\u097c\u097b\3\2\2\2\u097c\u097d\3\2\2\2\u097d\u097f")
        buf.write("\3\2\2\2\u097e\u0980\7\u0193\2\2\u097f\u097e\3\2\2\2\u097f")
        buf.write("\u0980\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0982\7M\2\2")
        buf.write("\u0982\u0983\5\"\22\2\u0983\u00d7\3\2\2\2\u0984\u098e")
        buf.write("\7I\2\2\u0985\u098c\7\u0146\2\2\u0986\u098c\7\u015e\2")
        buf.write("\2\u0987\u098c\7\u0115\2\2\u0988\u098c\7\u0130\2\2\u0989")
        buf.write("\u098a\t#\2\2\u098a\u098c\5\u00dep\2\u098b\u0985\3\2\2")
        buf.write("\2\u098b\u0986\3\2\2\2\u098b\u0987\3\2\2\2\u098b\u0988")
        buf.write("\3\2\2\2\u098b\u0989\3\2\2\2\u098b\u098c\3\2\2\2\u098c")
        buf.write("\u098d\3\2\2\2\u098d\u098f\7R\2\2\u098e\u098b\3\2\2\2")
        buf.write("\u098e\u098f\3\2\2\2\u098f\u0991\3\2\2\2\u0990\u0992\7")
        buf.write("\u011c\2\2\u0991\u0990\3\2\2\2\u0991\u0992\3\2\2\2\u0992")
        buf.write("\u0993\3\2\2\2\u0993\u099d\5\u016e\u00b8\2\u0994\u0995")
        buf.write("\7d\2\2\u0995\u099a\7\u01a6\2\2\u0996\u0997\7\u01c0\2")
        buf.write("\2\u0997\u0999\7\u01a6\2\2\u0998\u0996\3\2\2\2\u0999\u099c")
        buf.write("\3\2\2\2\u099a\u0998\3\2\2\2\u099a\u099b\3\2\2\2\u099b")
        buf.write("\u099e\3\2\2\2\u099c\u099a\3\2\2\2\u099d\u0994\3\2\2\2")
        buf.write("\u099d\u099e\3\2\2\2\u099e\u09a0\3\2\2\2\u099f\u09a1\7")
        buf.write("\u01c1\2\2\u09a0\u099f\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1")
        buf.write("\u00d9\3\2\2\2\u09a2\u09a3\7\u00ab\2\2\u09a3\u09a7\5\u0180")
        buf.write("\u00c1\2\u09a4\u09a8\5\u0180\u00c1\2\u09a5\u09a8\5\u00dc")
        buf.write("o\2\u09a6\u09a8\5\u0170\u00b9\2\u09a7\u09a4\3\2\2\2\u09a7")
        buf.write("\u09a5\3\2\2\2\u09a7\u09a6\3\2\2\2\u09a8\u09aa\3\2\2\2")
        buf.write("\u09a9\u09ab\7\u01c1\2\2\u09aa\u09a9\3\2\2\2\u09aa\u09ab")
        buf.write("\3\2\2\2\u09ab\u09ce\3\2\2\2\u09ac\u09ad\7\u00ab\2\2\u09ad")
        buf.write("\u09ae\7\u00ba\2\2\u09ae\u09af\7\u012b\2\2\u09af\u09b8")
        buf.write("\7\u0131\2\2\u09b0\u09b1\7\u0092\2\2\u09b1\u09b9\7\u0195")
        buf.write("\2\2\u09b2\u09b3\7\u0092\2\2\u09b3\u09b9\7\u00ed\2\2\u09b4")
        buf.write("\u09b5\7\u016c\2\2\u09b5\u09b9\7\u0092\2\2\u09b6\u09b9")
        buf.write("\7\u017f\2\2\u09b7\u09b9\7\u017a\2\2\u09b8\u09b0\3\2\2")
        buf.write("\2\u09b8\u09b2\3\2\2\2\u09b8\u09b4\3\2\2\2\u09b8\u09b6")
        buf.write("\3\2\2\2\u09b8\u09b7\3\2\2\2\u09b9\u09bb\3\2\2\2\u09ba")
        buf.write("\u09bc\7\u01c1\2\2\u09bb\u09ba\3\2\2\2\u09bb\u09bc\3\2")
        buf.write("\2\2\u09bc\u09ce\3\2\2\2\u09bd\u09be\7\u00ab\2\2\u09be")
        buf.write("\u09bf\7[\2\2\u09bf\u09c0\5\u0160\u00b1\2\u09c0\u09c2")
        buf.write("\5\u0170\u00b9\2\u09c1\u09c3\7\u01c1\2\2\u09c2\u09c1\3")
        buf.write("\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09ce\3\2\2\2\u09c4\u09c5")
        buf.write("\7\u00ab\2\2\u09c5\u09c6\7\u00d5\2\2\u09c6\u09ce\5\u0170")
        buf.write("\u00b9\2\u09c7\u09c8\7\u00ab\2\2\u09c8\u09c9\7\u0160\2")
        buf.write("\2\u09c9\u09ce\5\u0170\u00b9\2\u09ca\u09cb\7\u00ab\2\2")
        buf.write("\u09cb\u09cc\7\u00d7\2\2\u09cc\u09ce\5\u0170\u00b9\2\u09cd")
        buf.write("\u09a2\3\2\2\2\u09cd\u09ac\3\2\2\2\u09cd\u09bd\3\2\2\2")
        buf.write("\u09cd\u09c4\3\2\2\2\u09cd\u09c7\3\2\2\2\u09cd\u09ca\3")
        buf.write("\2\2\2\u09ce\u00db\3\2\2\2\u09cf\u09d2\5\u017c\u00bf\2")
        buf.write("\u09d0\u09d2\7\u01a6\2\2\u09d1\u09cf\3\2\2\2\u09d1\u09d0")
        buf.write("\3\2\2\2\u09d2\u00dd\3\2\2\2\u09d3\u09d4\bp\1\2\u09d4")
        buf.write("\u0a01\7\65\2\2\u09d5\u0a01\7u\2\2\u09d6\u0a01\7\u01a6")
        buf.write("\2\2\u09d7\u0a01\5\u017c\u00bf\2\u09d8\u0a01\5\u0128\u0095")
        buf.write("\2\u09d9\u09da\7\26\2\2\u09da\u09dc\5\u00dep\2\u09db\u09dd")
        buf.write("\5\u012a\u0096\2\u09dc\u09db\3\2\2\2\u09dd\u09de\3\2\2")
        buf.write("\2\u09de\u09dc\3\2\2\2\u09de\u09df\3\2\2\2\u09df\u09e2")
        buf.write("\3\2\2\2\u09e0\u09e1\7?\2\2\u09e1\u09e3\5\u00dep\2\u09e2")
        buf.write("\u09e0\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e4\3\2\2\2")
        buf.write("\u09e4\u09e5\7@\2\2\u09e5\u0a01\3\2\2\2\u09e6\u09e8\7")
        buf.write("\26\2\2\u09e7\u09e9\5\u012c\u0097\2\u09e8\u09e7\3\2\2")
        buf.write("\2\u09e9\u09ea\3\2\2\2\u09ea\u09e8\3\2\2\2\u09ea\u09eb")
        buf.write("\3\2\2\2\u09eb\u09ee\3\2\2\2\u09ec\u09ed\7?\2\2\u09ed")
        buf.write("\u09ef\5\u00dep\2\u09ee\u09ec\3\2\2\2\u09ee\u09ef\3\2")
        buf.write("\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f1\7@\2\2\u09f1\u0a01")
        buf.write("\3\2\2\2\u09f2\u0a01\5\u0168\u00b5\2\u09f3\u09f4\7\u01be")
        buf.write("\2\2\u09f4\u09f5\5\u00dep\2\u09f5\u09f6\7\u01bf\2\2\u09f6")
        buf.write("\u0a01\3\2\2\2\u09f7\u09f8\7\u01be\2\2\u09f8\u09f9\5\u00e2")
        buf.write("r\2\u09f9\u09fa\7\u01bf\2\2\u09fa\u0a01\3\2\2\2\u09fb")
        buf.write("\u09fc\7\u01c8\2\2\u09fc\u0a01\5\u00dep\b\u09fd\u09fe")
        buf.write("\t$\2\2\u09fe\u0a01\5\u00dep\6\u09ff\u0a01\5\u0148\u00a5")
        buf.write("\2\u0a00\u09d3\3\2\2\2\u0a00\u09d5\3\2\2\2\u0a00\u09d6")
        buf.write("\3\2\2\2\u0a00\u09d7\3\2\2\2\u0a00\u09d8\3\2\2\2\u0a00")
        buf.write("\u09d9\3\2\2\2\u0a00\u09e6\3\2\2\2\u0a00\u09f2\3\2\2\2")
        buf.write("\u0a00\u09f3\3\2\2\2\u0a00\u09f7\3\2\2\2\u0a00\u09fb\3")
        buf.write("\2\2\2\u0a00\u09fd\3\2\2\2\u0a00\u09ff\3\2\2\2\u0a01\u0a11")
        buf.write("\3\2\2\2\u0a02\u0a03\f\7\2\2\u0a03\u0a04\t%\2\2\u0a04")
        buf.write("\u0a10\5\u00dep\b\u0a05\u0a06\f\5\2\2\u0a06\u0a07\t&\2")
        buf.write("\2\u0a07\u0a10\5\u00dep\6\u0a08\u0a09\f\4\2\2\u0a09\u0a0a")
        buf.write("\5\u0184\u00c3\2\u0a0a\u0a0b\5\u00dep\5\u0a0b\u0a10\3")
        buf.write("\2\2\2\u0a0c\u0a0d\f\16\2\2\u0a0d\u0a0e\7\36\2\2\u0a0e")
        buf.write("\u0a10\5\u0180\u00c1\2\u0a0f\u0a02\3\2\2\2\u0a0f\u0a05")
        buf.write("\3\2\2\2\u0a0f\u0a08\3\2\2\2\u0a0f\u0a0c\3\2\2\2\u0a10")
        buf.write("\u0a13\3\2\2\2\u0a11\u0a0f\3\2\2\2\u0a11\u0a12\3\2\2\2")
        buf.write("\u0a12\u00df\3\2\2\2\u0a13\u0a11\3\2\2\2\u0a14\u0a1d\7")
        buf.write("u\2\2\u0a15\u0a1d\5\u017c\u00bf\2\u0a16\u0a1d\5\u0128")
        buf.write("\u0095\2\u0a17\u0a1d\7\u01a6\2\2\u0a18\u0a19\7\u01be\2")
        buf.write("\2\u0a19\u0a1a\5\u00e0q\2\u0a1a\u0a1b\7\u01bf\2\2\u0a1b")
        buf.write("\u0a1d\3\2\2\2\u0a1c\u0a14\3\2\2\2\u0a1c\u0a15\3\2\2\2")
        buf.write("\u0a1c\u0a16\3\2\2\2\u0a1c\u0a17\3\2\2\2\u0a1c\u0a18\3")
        buf.write("\2\2\2\u0a1d\u00e1\3\2\2\2\u0a1e\u0a1f\5\"\22\2\u0a1f")
        buf.write("\u00e3\3\2\2\2\u0a20\u0a23\7\u00cd\2\2\u0a21\u0a22\7\u019f")
        buf.write("\2\2\u0a22\u0a24\7\u01c0\2\2\u0a23\u0a21\3\2\2\2\u0a23")
        buf.write("\u0a24\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a2a\5\u00e6")
        buf.write("t\2\u0a26\u0a27\7\u01c0\2\2\u0a27\u0a29\5\u00e6t\2\u0a28")
        buf.write("\u0a26\3\2\2\2\u0a29\u0a2c\3\2\2\2\u0a2a\u0a28\3\2\2\2")
        buf.write("\u0a2a\u0a2b\3\2\2\2\u0a2b\u00e5\3\2\2\2\u0a2c\u0a2a\3")
        buf.write("\2\2\2\u0a2d\u0a32\5\u0180\u00c1\2\u0a2e\u0a2f\7\u01be")
        buf.write("\2\2\u0a2f\u0a30\5\u016c\u00b7\2\u0a30\u0a31\7\u01bf\2")
        buf.write("\2\u0a31\u0a33\3\2\2\2\u0a32\u0a2e\3\2\2\2\u0a32\u0a33")
        buf.write("\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a35\7\n\2\2\u0a35")
        buf.write("\u0a36\7\u01be\2\2\u0a36\u0a37\5\"\22\2\u0a37\u0a38\7")
        buf.write("\u01bf\2\2\u0a38\u00e7\3\2\2\2\u0a39\u0a3c\5\u0168\u00b5")
        buf.write("\2\u0a3a\u0a3c\7\u01a6\2\2\u0a3b\u0a39\3\2\2\2\u0a3b\u0a3a")
        buf.write("\3\2\2\2\u0a3c\u0a3f\3\2\2\2\u0a3d\u0a40\7\u01ad\2\2\u0a3e")
        buf.write("\u0a40\5\u0186\u00c4\2\u0a3f\u0a3d\3\2\2\2\u0a3f\u0a3e")
        buf.write("\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a4a\5\u00dep\2\u0a42")
        buf.write("\u0a43\5\u0180\u00c1\2\u0a43\u0a44\7\u01b9\2\2\u0a44\u0a45")
        buf.write("\5\u0180\u00c1\2\u0a45\u0a46\7\u01be\2\2\u0a46\u0a47\5")
        buf.write("\u0140\u00a1\2\u0a47\u0a48\7\u01bf\2\2\u0a48\u0a4a\3\2")
        buf.write("\2\2\u0a49\u0a3b\3\2\2\2\u0a49\u0a42\3\2\2\2\u0a4a\u00e9")
        buf.write("\3\2\2\2\u0a4b\u0a50\5\u00ecw\2\u0a4c\u0a4d\7\u01c0\2")
        buf.write("\2\u0a4d\u0a4f\5\u00ecw\2\u0a4e\u0a4c\3\2\2\2\u0a4f\u0a52")
        buf.write("\3\2\2\2\u0a50\u0a4e\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51")
        buf.write("\u00eb\3\2\2\2\u0a52\u0a50\3\2\2\2\u0a53\u0a58\5\u00ee")
        buf.write("x\2\u0a54\u0a55\7\u0081\2\2\u0a55\u0a57\5\u00eex\2\u0a56")
        buf.write("\u0a54\3\2\2\2\u0a57\u0a5a\3\2\2\2\u0a58\u0a56\3\2\2\2")
        buf.write("\u0a58\u0a59\3\2\2\2\u0a59\u00ed\3\2\2\2\u0a5a\u0a58\3")
        buf.write("\2\2\2\u0a5b\u0a60\5\u00f0y\2\u0a5c\u0a5d\7\7\2\2\u0a5d")
        buf.write("\u0a5f\5\u00f0y\2\u0a5e\u0a5c\3\2\2\2\u0a5f\u0a62\3\2")
        buf.write("\2\2\u0a60\u0a5e\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u00ef")
        buf.write("\3\2\2\2\u0a62\u0a60\3\2\2\2\u0a63\u0a65\7t\2\2\u0a64")
        buf.write("\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a66\3\2\2\2")
        buf.write("\u0a66\u0a67\5\u00f2z\2\u0a67\u00f1\3\2\2\2\u0a68\u0a69")
        buf.write("\7F\2\2\u0a69\u0a6a\7\u01be\2\2\u0a6a\u0a6b\5\u00e2r\2")
        buf.write("\u0a6b\u0a6c\7\u01bf\2\2\u0a6c\u0aa0\3\2\2\2\u0a6d\u0a6e")
        buf.write("\5\u00dep\2\u0a6e\u0a6f\5\u0184\u00c3\2\u0a6f\u0a70\5")
        buf.write("\u00dep\2\u0a70\u0aa0\3\2\2\2\u0a71\u0a72\5\u00dep\2\u0a72")
        buf.write("\u0a73\5\u0184\u00c3\2\u0a73\u0a74\t\'\2\2\u0a74\u0a75")
        buf.write("\7\u01be\2\2\u0a75\u0a76\5\u00e2r\2\u0a76\u0a77\7\u01bf")
        buf.write("\2\2\u0a77\u0aa0\3\2\2\2\u0a78\u0a7a\5\u00dep\2\u0a79")
        buf.write("\u0a7b\7t\2\2\u0a7a\u0a79\3\2\2\2\u0a7a\u0a7b\3\2\2\2")
        buf.write("\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a7d\7\17\2\2\u0a7d\u0a7e")
        buf.write("\5\u00dep\2\u0a7e\u0a7f\7\7\2\2\u0a7f\u0a80\5\u00dep\2")
        buf.write("\u0a80\u0aa0\3\2\2\2\u0a81\u0a83\5\u00dep\2\u0a82\u0a84")
        buf.write("\7t\2\2\u0a83\u0a82\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84")
        buf.write("\u0a85\3\2\2\2\u0a85\u0a86\7]\2\2\u0a86\u0a89\7\u01be")
        buf.write("\2\2\u0a87\u0a8a\5\u00e2r\2\u0a88\u0a8a\5\u0140\u00a1")
        buf.write("\2\u0a89\u0a87\3\2\2\2\u0a89\u0a88\3\2\2\2\u0a8a\u0a8b")
        buf.write("\3\2\2\2\u0a8b\u0a8c\7\u01bf\2\2\u0a8c\u0aa0\3\2\2\2\u0a8d")
        buf.write("\u0a8f\5\u00dep\2\u0a8e\u0a90\7t\2\2\u0a8f\u0a8e\3\2\2")
        buf.write("\2\u0a8f\u0a90\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92")
        buf.write("\7j\2\2\u0a92\u0a95\5\u00dep\2\u0a93\u0a94\7B\2\2\u0a94")
        buf.write("\u0a96\5\u00dep\2\u0a95\u0a93\3\2\2\2\u0a95\u0a96\3\2")
        buf.write("\2\2\u0a96\u0aa0\3\2\2\2\u0a97\u0a98\5\u00dep\2\u0a98")
        buf.write("\u0a99\7e\2\2\u0a99\u0a9a\5\u0174\u00bb\2\u0a9a\u0aa0")
        buf.write("\3\2\2\2\u0a9b\u0a9c\7\u01be\2\2\u0a9c\u0a9d\5\u00ecw")
        buf.write("\2\u0a9d\u0a9e\7\u01bf\2\2\u0a9e\u0aa0\3\2\2\2\u0a9f\u0a68")
        buf.write("\3\2\2\2\u0a9f\u0a6d\3\2\2\2\u0a9f\u0a71\3\2\2\2\u0a9f")
        buf.write("\u0a78\3\2\2\2\u0a9f\u0a81\3\2\2\2\u0a9f\u0a8d\3\2\2\2")
        buf.write("\u0a9f\u0a97\3\2\2\2\u0a9f\u0a9b\3\2\2\2\u0aa0\u00f3\3")
        buf.write("\2\2\2\u0aa1\u0aa7\5\u00f8}\2\u0aa2\u0aa3\7\u01be\2\2")
        buf.write("\u0aa3\u0aa4\5\u00f4{\2\u0aa4\u0aa5\7\u01bf\2\2\u0aa5")
        buf.write("\u0aa7\3\2\2\2\u0aa6\u0aa1\3\2\2\2\u0aa6\u0aa2\3\2\2\2")
        buf.write("\u0aa7\u0aab\3\2\2\2\u0aa8\u0aaa\5\u00f6|\2\u0aa9\u0aa8")
        buf.write("\3\2\2\2\u0aaa\u0aad\3\2\2\2\u0aab\u0aa9\3\2\2\2\u0aab")
        buf.write("\u0aac\3\2\2\2\u0aac\u00f5\3\2\2\2\u0aad\u0aab\3\2\2\2")
        buf.write("\u0aae\u0ab0\7\u00bf\2\2\u0aaf\u0ab1\7\5\2\2\u0ab0\u0aaf")
        buf.write("\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab5\3\2\2\2\u0ab2")
        buf.write("\u0ab5\7D\2\2\u0ab3\u0ab5\7c\2\2\u0ab4\u0aae\3\2\2\2\u0ab4")
        buf.write("\u0ab2\3\2\2\2\u0ab4\u0ab3\3\2\2\2\u0ab5\u0abb\3\2\2\2")
        buf.write("\u0ab6\u0abc\5\u00f8}\2\u0ab7\u0ab8\7\u01be\2\2\u0ab8")
        buf.write("\u0ab9\5\u00f4{\2\u0ab9\u0aba\7\u01bf\2\2\u0aba\u0abc")
        buf.write("\3\2\2\2\u0abb\u0ab6\3\2\2\2\u0abb\u0ab7\3\2\2\2\u0abc")
        buf.write("\u00f7\3\2\2\2\u0abd\u0abf\7\u00a5\2\2\u0abe\u0ac0\t(")
        buf.write("\2\2\u0abf\u0abe\3\2\2\2\u0abf\u0ac0\3\2\2\2\u0ac0\u0ac2")
        buf.write("\3\2\2\2\u0ac1\u0ac3\5\u00fa~\2\u0ac2\u0ac1\3\2\2\2\u0ac2")
        buf.write("\u0ac3\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0ac7\5\u0110")
        buf.write("\u0089\2\u0ac5\u0ac6\7d\2\2\u0ac6\u0ac8\5\u0160\u00b1")
        buf.write("\2\u0ac7\u0ac5\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0acb")
        buf.write("\3\2\2\2\u0ac9\u0aca\7R\2\2\u0aca\u0acc\5\u0114\u008b")
        buf.write("\2\u0acb\u0ac9\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0acf")
        buf.write("\3\2\2\2\u0acd\u0ace\7\u00cb\2\2\u0ace\u0ad0\5\u00ecw")
        buf.write("\2\u0acf\u0acd\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0\u0adb")
        buf.write("\3\2\2\2\u0ad1\u0ad2\7W\2\2\u0ad2\u0ad3\7\23\2\2\u0ad3")
        buf.write("\u0ad8\5\u0108\u0085\2\u0ad4\u0ad5\7\u01c0\2\2\u0ad5\u0ad7")
        buf.write("\5\u0108\u0085\2\u0ad6\u0ad4\3\2\2\2\u0ad7\u0ada\3\2\2")
        buf.write("\2\u0ad8\u0ad6\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0adc")
        buf.write("\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0adb\u0ad1\3\2\2\2\u0adb")
        buf.write("\u0adc\3\2\2\2\u0adc\u0adf\3\2\2\2\u0add\u0ade\7X\2\2")
        buf.write("\u0ade\u0ae0\5\u00ecw\2\u0adf\u0add\3\2\2\2\u0adf\u0ae0")
        buf.write("\3\2\2\2\u0ae0\u00f9\3\2\2\2\u0ae1\u0ae4\7\u00b8\2\2\u0ae2")
        buf.write("\u0ae5\5\u00fc\177\2\u0ae3\u0ae5\5\u00fe\u0080\2\u0ae4")
        buf.write("\u0ae2\3\2\2\2\u0ae4\u0ae3\3\2\2\2\u0ae5\u0ae8\3\2\2\2")
        buf.write("\u0ae6\u0ae7\7\u00cd\2\2\u0ae7\u0ae9\7\u018b\2\2\u0ae8")
        buf.write("\u0ae6\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u00fb\3\2\2\2")
        buf.write("\u0aea\u0aeb\t)\2\2\u0aeb\u0af2\7\u0087\2\2\u0aec\u0aed")
        buf.write("\7\u01be\2\2\u0aed\u0aee\5\u00dep\2\u0aee\u0aef\7\u01bf")
        buf.write("\2\2\u0aef\u0af0\7\u0087\2\2\u0af0\u0af2\3\2\2\2\u0af1")
        buf.write("\u0aea\3\2\2\2\u0af1\u0aec\3\2\2\2\u0af2\u00fd\3\2\2\2")
        buf.write("\u0af3\u0af9\7\u01a7\2\2\u0af4\u0af5\7\u01be\2\2\u0af5")
        buf.write("\u0af6\5\u00dep\2\u0af6\u0af7\7\u01bf\2\2\u0af7\u0af9")
        buf.write("\3\2\2\2\u0af8\u0af3\3\2\2\2\u0af8\u0af4\3\2\2\2\u0af9")
        buf.write("\u00ff\3\2\2\2\u0afa\u0afb\7\u0082\2\2\u0afb\u0afc\7\23")
        buf.write("\2\2\u0afc\u0b01\5\u0106\u0084\2\u0afd\u0afe\7\u01c0\2")
        buf.write("\2\u0afe\u0b00\5\u0106\u0084\2\u0aff\u0afd\3\2\2\2\u0b00")
        buf.write("\u0b03\3\2\2\2\u0b01\u0aff\3\2\2\2\u0b01\u0b02\3\2\2\2")
        buf.write("\u0b02\u0b0f\3\2\2\2\u0b03\u0b01\3\2\2\2\u0b04\u0b05\7")
        buf.write("\u0151\2\2\u0b05\u0b06\5\u00dep\2\u0b06\u0b0d\t*\2\2\u0b07")
        buf.write("\u0b08\7I\2\2\u0b08\u0b09\t+\2\2\u0b09\u0b0a\5\u00dep")
        buf.write("\2\u0b0a\u0b0b\t*\2\2\u0b0b\u0b0c\7\u0153\2\2\u0b0c\u0b0e")
        buf.write("\3\2\2\2\u0b0d\u0b07\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e")
        buf.write("\u0b10\3\2\2\2\u0b0f\u0b04\3\2\2\2\u0b0f\u0b10\3\2\2\2")
        buf.write("\u0b10\u0101\3\2\2\2\u0b11\u0b12\7M\2\2\u0b12\u0b25\7")
        buf.write("\21\2\2\u0b13\u0b14\7M\2\2\u0b14\u0b15\7\u019e\2\2\u0b15")
        buf.write("\u0b17\7\u00db\2\2\u0b16\u0b18\5\u0104\u0083\2\u0b17\u0b16")
        buf.write("\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b25\3\2\2\2\u0b19")
        buf.write("\u0b1a\7M\2\2\u0b1a\u0b1b\7\u019e\2\2\u0b1b\u0b1f\7\u015c")
        buf.write("\2\2\u0b1c\u0b1d\7\u01be\2\2\u0b1d\u0b1e\7\u01a9\2\2\u0b1e")
        buf.write("\u0b20\7\u01bf\2\2\u0b1f\u0b1c\3\2\2\2\u0b1f\u0b20\3\2")
        buf.write("\2\2\u0b20\u0b22\3\2\2\2\u0b21\u0b23\5\u0104\u0083\2\u0b22")
        buf.write("\u0b21\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b25\3\2\2\2")
        buf.write("\u0b24\u0b11\3\2\2\2\u0b24\u0b13\3\2\2\2\u0b24\u0b19\3")
        buf.write("\2\2\2\u0b25\u0103\3\2\2\2\u0b26\u0b2b\7\u01c0\2\2\u0b27")
        buf.write("\u0b28\7\u01aa\2\2\u0b28\u0b2c\7\u00e3\2\2\u0b29\u0b2c")
        buf.write("\7\u0192\2\2\u0b2a\u0b2c\7\u016f\2\2\u0b2b\u0b27\3\2\2")
        buf.write("\2\u0b2b\u0b29\3\2\2\2\u0b2b\u0b2a\3\2\2\2\u0b2c\u0105")
        buf.write("\3\2\2\2\u0b2d\u0b2f\5\u00dep\2\u0b2e\u0b30\t\37\2\2\u0b2f")
        buf.write("\u0b2e\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0107\3\2\2\2")
        buf.write("\u0b31\u0b32\5\u00dep\2\u0b32\u0109\3\2\2\2\u0b33\u0b34")
        buf.write("\7\u0080\2\2\u0b34\u0b35\7\u01be\2\2\u0b35\u0b3a\5\u010c")
        buf.write("\u0087\2\u0b36\u0b37\7\u01c0\2\2\u0b37\u0b39\5\u010c\u0087")
        buf.write("\2\u0b38\u0b36\3\2\2\2\u0b39\u0b3c\3\2\2\2\u0b3a\u0b38")
        buf.write("\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3d\3\2\2\2\u0b3c")
        buf.write("\u0b3a\3\2\2\2\u0b3d\u0b3e\7\u01bf\2\2\u0b3e\u010b\3\2")
        buf.write("\2\2\u0b3f\u0b40\7\u0110\2\2\u0b40\u0b6d\7\u01a7\2\2\u0b41")
        buf.write("\u0b42\t,\2\2\u0b42\u0b6d\7W\2\2\u0b43\u0b44\t-\2\2\u0b44")
        buf.write("\u0b6d\7\u00bf\2\2\u0b45\u0b46\t.\2\2\u0b46\u0b6d\7f\2")
        buf.write("\2\u0b47\u0b48\7\u010f\2\2\u0b48\u0b6d\7\u019b\2\2\u0b49")
        buf.write("\u0b4a\7\u0117\2\2\u0b4a\u0b6d\7\u0082\2\2\u0b4b\u0b6d")
        buf.write("\7\u0124\2\2\u0b4c\u0b4d\7\u012d\2\2\u0b4d\u0b6d\7\u0089")
        buf.write("\2\2\u0b4e\u0b4f\7\u012e\2\2\u0b4f\u0b6d\7\u0089\2\2\u0b50")
        buf.write("\u0b51\7\u0138\2\2\u0b51\u0b6d\7\u01a7\2\2\u0b52\u0b53")
        buf.write("\7\u0139\2\2\u0b53\u0b6d\7\u01a7\2\2\u0b54\u0b55\7\u0155")
        buf.write("\2\2\u0b55\u0b56\7M\2\2\u0b56\u0b57\7\u01be\2\2\u0b57")
        buf.write("\u0b5c\5\u010e\u0088\2\u0b58\u0b59\7\u01c0\2\2\u0b59\u0b5b")
        buf.write("\5\u010e\u0088\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0b5e\3\2\2")
        buf.write("\2\u0b5c\u0b5a\3\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b5f")
        buf.write("\3\2\2\2\u0b5e\u0b5c\3\2\2\2\u0b5f\u0b60\7\u01bf\2\2\u0b60")
        buf.write("\u0b6d\3\2\2\2\u0b61\u0b62\7\u0155\2\2\u0b62\u0b63\7M")
        buf.write("\2\2\u0b63\u0b6d\7\u0196\2\2\u0b64\u0b65\7\u015a\2\2\u0b65")
        buf.write("\u0b6d\t\26\2\2\u0b66\u0b6d\7\u0167\2\2\u0b67\u0b68\7")
        buf.write("\u016e\2\2\u0b68\u0b6d\7\u0089\2\2\u0b69\u0b6a\7\u00c4")
        buf.write("\2\2\u0b6a\u0b6b\7\u0089\2\2\u0b6b\u0b6d\7\u01a9\2\2\u0b6c")
        buf.write("\u0b3f\3\2\2\2\u0b6c\u0b41\3\2\2\2\u0b6c\u0b43\3\2\2\2")
        buf.write("\u0b6c\u0b45\3\2\2\2\u0b6c\u0b47\3\2\2\2\u0b6c\u0b49\3")
        buf.write("\2\2\2\u0b6c\u0b4b\3\2\2\2\u0b6c\u0b4c\3\2\2\2\u0b6c\u0b4e")
        buf.write("\3\2\2\2\u0b6c\u0b50\3\2\2\2\u0b6c\u0b52\3\2\2\2\u0b6c")
        buf.write("\u0b54\3\2\2\2\u0b6c\u0b61\3\2\2\2\u0b6c\u0b64\3\2\2\2")
        buf.write("\u0b6c\u0b66\3\2\2\2\u0b6c\u0b67\3\2\2\2\u0b6c\u0b69\3")
        buf.write("\2\2\2\u0b6d\u010d\3\2\2\2\u0b6e\u0b72\7\u01a6\2\2\u0b6f")
        buf.write("\u0b73\7\u0196\2\2\u0b70\u0b71\7\u01ad\2\2\u0b71\u0b73")
        buf.write("\5\u017c\u00bf\2\u0b72\u0b6f\3\2\2\2\u0b72\u0b70\3\2\2")
        buf.write("\2\u0b73\u010f\3\2\2\2\u0b74\u0b79\5\u0112\u008a\2\u0b75")
        buf.write("\u0b76\7\u01c0\2\2\u0b76\u0b78\5\u0112\u008a\2\u0b77\u0b75")
        buf.write("\3\2\2\2\u0b78\u0b7b\3\2\2\2\u0b79\u0b77\3\2\2\2\u0b79")
        buf.write("\u0b7a\3\2\2\2\u0b7a\u0111\3\2\2\2\u0b7b\u0b79\3\2\2\2")
        buf.write("\u0b7c\u0b7d\5\u0160\u00b1\2\u0b7d\u0b7e\7\u01b9\2\2\u0b7e")
        buf.write("\u0b80\3\2\2\2\u0b7f\u0b7c\3\2\2\2\u0b7f\u0b80\3\2\2\2")
        buf.write("\u0b80\u0b84\3\2\2\2\u0b81\u0b85\7\u01c3\2\2\u0b82\u0b83")
        buf.write("\7\u01bd\2\2\u0b83\u0b85\t/\2\2\u0b84\u0b81\3\2\2\2\u0b84")
        buf.write("\u0b82\3\2\2\2\u0b85\u0b92\3\2\2\2\u0b86\u0b87\5\u013c")
        buf.write("\u009f\2\u0b87\u0b88\7\u01ad\2\2\u0b88\u0b89\5\u00dep")
        buf.write("\2\u0b89\u0b92\3\2\2\2\u0b8a\u0b8f\5\u00dep\2\u0b8b\u0b8d")
        buf.write("\7\n\2\2\u0b8c\u0b8b\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d")
        buf.write("\u0b8e\3\2\2\2\u0b8e\u0b90\5\u013c\u009f\2\u0b8f\u0b8c")
        buf.write("\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b92\3\2\2\2\u0b91")
        buf.write("\u0b7f\3\2\2\2\u0b91\u0b86\3\2\2\2\u0b91\u0b8a\3\2\2\2")
        buf.write("\u0b92\u0113\3\2\2\2\u0b93\u0b98\5\u0116\u008c\2\u0b94")
        buf.write("\u0b95\7\u01c0\2\2\u0b95\u0b97\5\u0116\u008c\2\u0b96\u0b94")
        buf.write("\3\2\2\2\u0b97\u0b9a\3\2\2\2\u0b98\u0b96\3\2\2\2\u0b98")
        buf.write("\u0b99\3\2\2\2\u0b99\u0115\3\2\2\2\u0b9a\u0b98\3\2\2\2")
        buf.write("\u0b9b\u0ba1\5\u0118\u008d\2\u0b9c\u0b9d\7\u01be\2\2\u0b9d")
        buf.write("\u0b9e\5\u0118\u008d\2\u0b9e\u0b9f\7\u01bf\2\2\u0b9f\u0ba1")
        buf.write("\3\2\2\2\u0ba0\u0b9b\3\2\2\2\u0ba0\u0b9c\3\2\2\2\u0ba1")
        buf.write("\u0117\3\2\2\2\u0ba2\u0ba6\5\u011a\u008e\2\u0ba3\u0ba5")
        buf.write("\5\u011e\u0090\2\u0ba4\u0ba3\3\2\2\2\u0ba5\u0ba8\3\2\2")
        buf.write("\2\u0ba6\u0ba4\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0119")
        buf.write("\3\2\2\2\u0ba8\u0ba6\3\2\2\2\u0ba9\u0bab\5\u0120\u0091")
        buf.write("\2\u0baa\u0bac\5\u012e\u0098\2\u0bab\u0baa\3\2\2\2\u0bab")
        buf.write("\u0bac\3\2\2\2\u0bac\u0bcd\3\2\2\2\u0bad\u0baf\5\u0122")
        buf.write("\u0092\2\u0bae\u0bb0\5\u012e\u0098\2\u0baf\u0bae\3\2\2")
        buf.write("\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bcd\3\2\2\2\u0bb1\u0bb6")
        buf.write("\5\u0126\u0094\2\u0bb2\u0bb4\5\u012e\u0098\2\u0bb3\u0bb5")
        buf.write("\5\u013a\u009e\2\u0bb4\u0bb3\3\2\2\2\u0bb4\u0bb5\3\2\2")
        buf.write("\2\u0bb5\u0bb7\3\2\2\2\u0bb6\u0bb2\3\2\2\2\u0bb6\u0bb7")
        buf.write("\3\2\2\2\u0bb7\u0bcd\3\2\2\2\u0bb8\u0bb9\5\u011c\u008f")
        buf.write("\2\u0bb9\u0bba\5\u012e\u0098\2\u0bba\u0bcd\3\2\2\2\u0bbb")
        buf.write("\u0bbd\5\u0128\u0095\2\u0bbc\u0bbe\5\u012e\u0098\2\u0bbd")
        buf.write("\u0bbc\3\2\2\2\u0bbd\u0bbe\3\2\2\2\u0bbe\u0bcd\3\2\2\2")
        buf.write("\u0bbf\u0bc1\7\u01a6\2\2\u0bc0\u0bc2\5\u012e\u0098\2\u0bc1")
        buf.write("\u0bc0\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bcd\3\2\2\2")
        buf.write("\u0bc3\u0bc4\7\u01a6\2\2\u0bc4\u0bc5\7\u01b9\2\2\u0bc5")
        buf.write("\u0bca\5\u0128\u0095\2\u0bc6\u0bc8\5\u012e\u0098\2\u0bc7")
        buf.write("\u0bc9\5\u013a\u009e\2\u0bc8\u0bc7\3\2\2\2\u0bc8\u0bc9")
        buf.write("\3\2\2\2\u0bc9\u0bcb\3\2\2\2\u0bca\u0bc6\3\2\2\2\u0bca")
        buf.write("\u0bcb\3\2\2\2\u0bcb\u0bcd\3\2\2\2\u0bcc\u0ba9\3\2\2\2")
        buf.write("\u0bcc\u0bad\3\2\2\2\u0bcc\u0bb1\3\2\2\2\u0bcc\u0bb8\3")
        buf.write("\2\2\2\u0bcc\u0bbb\3\2\2\2\u0bcc\u0bbf\3\2\2\2\u0bcc\u0bc3")
        buf.write("\3\2\2\2\u0bcd\u011b\3\2\2\2\u0bce\u0bcf\7\27\2\2\u0bcf")
        buf.write("\u0bd0\7\u01be\2\2\u0bd0\u0bd1\7\30\2\2\u0bd1\u0bd2\5")
        buf.write("\u0160\u00b1\2\u0bd2\u0bd3\7\u01c0\2\2\u0bd3\u0bd4\t\60")
        buf.write("\2\2\u0bd4\u0bd5\7\u01bf\2\2\u0bd5\u011d\3\2\2\2\u0bd6")
        buf.write("\u0bd8\7`\2\2\u0bd7\u0bd6\3\2\2\2\u0bd7\u0bd8\3\2\2\2")
        buf.write("\u0bd8\u0bde\3\2\2\2\u0bd9\u0bdb\t\61\2\2\u0bda\u0bdc")
        buf.write("\7\u0083\2\2\u0bdb\u0bda\3\2\2\2\u0bdb\u0bdc\3\2\2\2\u0bdc")
        buf.write("\u0bde\3\2\2\2\u0bdd\u0bd7\3\2\2\2\u0bdd\u0bd9\3\2\2\2")
        buf.write("\u0bde\u0be0\3\2\2\2\u0bdf\u0be1\t\62\2\2\u0be0\u0bdf")
        buf.write("\3\2\2\2\u0be0\u0be1\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2")
        buf.write("\u0be3\7f\2\2\u0be3\u0be4\5\u0116\u008c\2\u0be4\u0be5")
        buf.write("\7z\2\2\u0be5\u0be6\5\u00ecw\2\u0be6\u0bf1\3\2\2\2\u0be7")
        buf.write("\u0be8\7)\2\2\u0be8\u0be9\7f\2\2\u0be9\u0bf1\5\u0116\u008c")
        buf.write("\2\u0bea\u0beb\7)\2\2\u0beb\u0bec\7\u00d9\2\2\u0bec\u0bf1")
        buf.write("\5\u0116\u008c\2\u0bed\u0bee\7\u0083\2\2\u0bee\u0bef\7")
        buf.write("\u00d9\2\2\u0bef\u0bf1\5\u0116\u008c\2\u0bf0\u0bdd\3\2")
        buf.write("\2\2\u0bf0\u0be7\3\2\2\2\u0bf0\u0bea\3\2\2\2\u0bf0\u0bed")
        buf.write("\3\2\2\2\u0bf1\u011f\3\2\2\2\u0bf2\u0bf4\5\u0160\u00b1")
        buf.write("\2\u0bf3\u0bf5\5\u0132\u009a\2\u0bf4\u0bf3\3\2\2\2\u0bf4")
        buf.write("\u0bf5\3\2\2\2\u0bf5\u0121\3\2\2\2\u0bf6\u0bf7\7~\2\2")
        buf.write("\u0bf7\u0bf8\7\u01be\2\2\u0bf8\u0bf9\7\u01a9\2\2\u0bf9")
        buf.write("\u0bfa\7\u01c0\2\2\u0bfa\u0bfb\7\u01a9\2\2\u0bfb\u0bfc")
        buf.write("\7\u01c0\2\2\u0bfc\u0bfd\7\u01a9\2\2\u0bfd\u0c11\7\u01bf")
        buf.write("\2\2\u0bfe\u0bff\7~\2\2\u0bff\u0c00\7\u01be\2\2\u0c00")
        buf.write("\u0c01\7\22\2\2\u0c01\u0c02\7\u01a9\2\2\u0c02\u0c0c\7")
        buf.write("\u01c0\2\2\u0c03\u0c08\5\u0124\u0093\2\u0c04\u0c05\7\u01c0")
        buf.write("\2\2\u0c05\u0c07\5\u0124\u0093\2\u0c06\u0c04\3\2\2\2\u0c07")
        buf.write("\u0c0a\3\2\2\2\u0c08\u0c06\3\2\2\2\u0c08\u0c09\3\2\2\2")
        buf.write("\u0c09\u0c0d\3\2\2\2\u0c0a\u0c08\3\2\2\2\u0c0b\u0c0d\5")
        buf.write("\u0180\u00c1\2\u0c0c\u0c03\3\2\2\2\u0c0c\u0c0b\3\2\2\2")
        buf.write("\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c0f\7\u01bf\2\2\u0c0f\u0c11")
        buf.write("\3\2\2\2\u0c10\u0bf6\3\2\2\2\u0c10\u0bfe\3\2\2\2\u0c11")
        buf.write("\u0123\3\2\2\2\u0c12\u0c13\5\u0180\u00c1\2\u0c13\u0c14")
        buf.write("\7\u01ad\2\2\u0c14\u0c15\t\63\2\2\u0c15\u0125\3\2\2\2")
        buf.write("\u0c16\u0c1c\5\u00e2r\2\u0c17\u0c18\7\u01be\2\2\u0c18")
        buf.write("\u0c19\5\u00e2r\2\u0c19\u0c1a\7\u01bf\2\2\u0c1a\u0c1c")
        buf.write("\3\2\2\2\u0c1b\u0c16\3\2\2\2\u0c1b\u0c17\3\2\2\2\u0c1c")
        buf.write("\u0127\3\2\2\2\u0c1d\u0c85\5\u0142\u00a2\2\u0c1e\u0c85")
        buf.write("\5\u0144\u00a3\2\u0c1f\u0c20\5\u0176\u00bc\2\u0c20\u0c22")
        buf.write("\7\u01be\2\2\u0c21\u0c23\5\u0140\u00a1\2\u0c22\u0c21\3")
        buf.write("\2\2\2\u0c22\u0c23\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c25")
        buf.write("\7\u01bf\2\2\u0c25\u0c85\3\2\2\2\u0c26\u0c27\7\u00e4\2")
        buf.write("\2\u0c27\u0c28\7\u01be\2\2\u0c28\u0c29\7\u01c3\2\2\u0c29")
        buf.write("\u0c85\7\u01bf\2\2\u0c2a\u0c2b\7\u00e7\2\2\u0c2b\u0c2c")
        buf.write("\7\u01be\2\2\u0c2c\u0c2d\5\u00dep\2\u0c2d\u0c2e\7\n\2")
        buf.write("\2\u0c2e\u0c2f\5\u0178\u00bd\2\u0c2f\u0c30\7\u01bf\2\2")
        buf.write("\u0c30\u0c85\3\2\2\2\u0c31\u0c32\7\'\2\2\u0c32\u0c33\7")
        buf.write("\u01be\2\2\u0c33\u0c34\5\u0178\u00bd\2\u0c34\u0c35\7\u01c0")
        buf.write("\2\2\u0c35\u0c38\5\u00dep\2\u0c36\u0c37\7\u01c0\2\2\u0c37")
        buf.write("\u0c39\5\u00dep\2\u0c38\u0c36\3\2\2\2\u0c38\u0c39\3\2")
        buf.write("\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u0c3b\7\u01bf\2\2\u0c3b")
        buf.write("\u0c85\3\2\2\2\u0c3c\u0c3d\7\u00eb\2\2\u0c3d\u0c3e\7\u01be")
        buf.write("\2\2\u0c3e\u0c3f\7\u01c3\2\2\u0c3f\u0c85\7\u01bf\2\2\u0c40")
        buf.write("\u0c41\7\35\2\2\u0c41\u0c42\7\u01be\2\2\u0c42\u0c43\5")
        buf.write("\u0140\u00a1\2\u0c43\u0c44\7\u01bf\2\2\u0c44\u0c85\3\2")
        buf.write("\2\2\u0c45\u0c85\7-\2\2\u0c46\u0c85\7.\2\2\u0c47\u0c48")
        buf.write("\7\u00f7\2\2\u0c48\u0c49\7\u01be\2\2\u0c49\u0c4a\7\u01a8")
        buf.write("\2\2\u0c4a\u0c4b\7\u01c0\2\2\u0c4b\u0c4c\5\u00dep\2\u0c4c")
        buf.write("\u0c4d\7\u01c0\2\2\u0c4d\u0c4e\5\u00dep\2\u0c4e\u0c4f")
        buf.write("\7\u01bf\2\2\u0c4f\u0c85\3\2\2\2\u0c50\u0c51\7\u00f8\2")
        buf.write("\2\u0c51\u0c52\7\u01be\2\2\u0c52\u0c53\7\u01a8\2\2\u0c53")
        buf.write("\u0c54\7\u01c0\2\2\u0c54\u0c55\5\u00dep\2\u0c55\u0c56")
        buf.write("\7\u01c0\2\2\u0c56\u0c57\5\u00dep\2\u0c57\u0c58\7\u01bf")
        buf.write("\2\2\u0c58\u0c85\3\2\2\2\u0c59\u0c5a\7\u00f9\2\2\u0c5a")
        buf.write("\u0c5b\7\u01be\2\2\u0c5b\u0c5c\7\u01a8\2\2\u0c5c\u0c5d")
        buf.write("\7\u01c0\2\2\u0c5d\u0c5e\5\u00dep\2\u0c5e\u0c5f\7\u01bf")
        buf.write("\2\2\u0c5f\u0c85\3\2\2\2\u0c60\u0c61\7\u00fa\2\2\u0c61")
        buf.write("\u0c62\7\u01be\2\2\u0c62\u0c63\7\u01a8\2\2\u0c63\u0c64")
        buf.write("\7\u01c0\2\2\u0c64\u0c65\5\u00dep\2\u0c65\u0c66\7\u01bf")
        buf.write("\2\2\u0c66\u0c85\3\2\2\2\u0c67\u0c68\7\u00fb\2\2\u0c68")
        buf.write("\u0c69\7\u01be\2\2\u0c69\u0c85\7\u01bf\2\2\u0c6a\u0c6b")
        buf.write("\7\u00fc\2\2\u0c6b\u0c6c\7\u01be\2\2\u0c6c\u0c85\7\u01bf")
        buf.write("\2\2\u0c6d\u0c6e\7Y\2\2\u0c6e\u0c6f\7\u01be\2\2\u0c6f")
        buf.write("\u0c72\5\u0178\u00bd\2\u0c70\u0c71\7\u01c0\2\2\u0c71\u0c73")
        buf.write("\7\u01a7\2\2\u0c72\u0c70\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73")
        buf.write("\u0c76\3\2\2\2\u0c74\u0c75\7\u01c0\2\2\u0c75\u0c77\7\u01a7")
        buf.write("\2\2\u0c76\u0c74\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c78")
        buf.write("\3\2\2\2\u0c78\u0c79\7\u01bf\2\2\u0c79\u0c85\3\2\2\2\u0c7a")
        buf.write("\u0c85\7\u013f\2\2\u0c7b\u0c7c\7v\2\2\u0c7c\u0c7d\7\u01be")
        buf.write("\2\2\u0c7d\u0c7e\5\u00dep\2\u0c7e\u0c7f\7\u01c0\2\2\u0c7f")
        buf.write("\u0c80\5\u00dep\2\u0c80\u0c81\7\u01bf\2\2\u0c81\u0c85")
        buf.write("\3\2\2\2\u0c82\u0c85\7\u00aa\2\2\u0c83\u0c85\7\u00b1\2")
        buf.write("\2\u0c84\u0c1d\3\2\2\2\u0c84\u0c1e\3\2\2\2\u0c84\u0c1f")
        buf.write("\3\2\2\2\u0c84\u0c26\3\2\2\2\u0c84\u0c2a\3\2\2\2\u0c84")
        buf.write("\u0c31\3\2\2\2\u0c84\u0c3c\3\2\2\2\u0c84\u0c40\3\2\2\2")
        buf.write("\u0c84\u0c45\3\2\2\2\u0c84\u0c46\3\2\2\2\u0c84\u0c47\3")
        buf.write("\2\2\2\u0c84\u0c50\3\2\2\2\u0c84\u0c59\3\2\2\2\u0c84\u0c60")
        buf.write("\3\2\2\2\u0c84\u0c67\3\2\2\2\u0c84\u0c6a\3\2\2\2\u0c84")
        buf.write("\u0c6d\3\2\2\2\u0c84\u0c7a\3\2\2\2\u0c84\u0c7b\3\2\2\2")
        buf.write("\u0c84\u0c82\3\2\2\2\u0c84\u0c83\3\2\2\2\u0c85\u0129\3")
        buf.write("\2\2\2\u0c86\u0c87\7\u00ca\2\2\u0c87\u0c88\5\u00dep\2")
        buf.write("\u0c88\u0c89\7\u00b6\2\2\u0c89\u0c8a\5\u00dep\2\u0c8a")
        buf.write("\u012b\3\2\2\2\u0c8b\u0c8c\7\u00ca\2\2\u0c8c\u0c8d\5\u00ec")
        buf.write("w\2\u0c8d\u0c8e\7\u00b6\2\2\u0c8e\u0c8f\5\u00dep\2\u0c8f")
        buf.write("\u012d\3\2\2\2\u0c90\u0c92\7\n\2\2\u0c91\u0c90\3\2\2\2")
        buf.write("\u0c91\u0c92\3\2\2\2\u0c92\u0c93\3\2\2\2\u0c93\u0c94\5")
        buf.write("\u0130\u0099\2\u0c94\u012f\3\2\2\2\u0c95\u0c97\5\u0180")
        buf.write("\u00c1\2\u0c96\u0c98\5\u0132\u009a\2\u0c97\u0c96\3\2\2")
        buf.write("\2\u0c97\u0c98\3\2\2\2\u0c98\u0131\3\2\2\2\u0c99\u0c9b")
        buf.write("\7\u00cd\2\2\u0c9a\u0c99\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b")
        buf.write("\u0c9c\3\2\2\2\u0c9c\u0c9d\7\u01be\2\2\u0c9d\u0ca2\5\u0136")
        buf.write("\u009c\2\u0c9e\u0c9f\7\u01c0\2\2\u0c9f\u0ca1\5\u0136\u009c")
        buf.write("\2\u0ca0\u0c9e\3\2\2\2\u0ca1\u0ca4\3\2\2\2\u0ca2\u0ca0")
        buf.write("\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3\u0ca5\3\2\2\2\u0ca4")
        buf.write("\u0ca2\3\2\2\2\u0ca5\u0ca6\7\u01bf\2\2\u0ca6\u0133\3\2")
        buf.write("\2\2\u0ca7\u0ca8\7\u00cd\2\2\u0ca8\u0ca9\7\u01be\2\2\u0ca9")
        buf.write("\u0cae\5\u0136\u009c\2\u0caa\u0cab\7\u01c0\2\2\u0cab\u0cad")
        buf.write("\5\u0136\u009c\2\u0cac\u0caa\3\2\2\2\u0cad\u0cb0\3\2\2")
        buf.write("\2\u0cae\u0cac\3\2\2\2\u0cae\u0caf\3\2\2\2\u0caf\u0cb1")
        buf.write("\3\2\2\2\u0cb0\u0cae\3\2\2\2\u0cb1\u0cb2\7\u01bf\2\2\u0cb2")
        buf.write("\u0135\3\2\2\2\u0cb3\u0cb5\7\u0149\2\2\u0cb4\u0cb3\3\2")
        buf.write("\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cdc\3\2\2\2\u0cb6\u0cb7")
        buf.write("\7_\2\2\u0cb7\u0cb8\7\u01be\2\2\u0cb8\u0cbd\5\u0138\u009d")
        buf.write("\2\u0cb9\u0cba\7\u01c0\2\2\u0cba\u0cbc\5\u0138\u009d\2")
        buf.write("\u0cbb\u0cb9\3\2\2\2\u0cbc\u0cbf\3\2\2\2\u0cbd\u0cbb\3")
        buf.write("\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0cc0\3\2\2\2\u0cbf\u0cbd")
        buf.write("\3\2\2\2\u0cc0\u0cc1\7\u01bf\2\2\u0cc1\u0cdd\3\2\2\2\u0cc2")
        buf.write("\u0cc3\7_\2\2\u0cc3\u0cc4\7\u01ad\2\2\u0cc4\u0cdd\5\u0138")
        buf.write("\u009d\2\u0cc5\u0cd4\7N\2\2\u0cc6\u0cc7\7\u01be\2\2\u0cc7")
        buf.write("\u0cc8\5\u0138\u009d\2\u0cc8\u0cc9\7\u01be\2\2\u0cc9\u0cce")
        buf.write("\7\u01a8\2\2\u0cca\u0ccb\7\u01c0\2\2\u0ccb\u0ccd\7\u01a8")
        buf.write("\2\2\u0ccc\u0cca\3\2\2\2\u0ccd\u0cd0\3\2\2\2\u0cce\u0ccc")
        buf.write("\3\2\2\2\u0cce\u0ccf\3\2\2\2\u0ccf\u0cd1\3\2\2\2\u0cd0")
        buf.write("\u0cce\3\2\2\2\u0cd1\u0cd2\7\u01bf\2\2\u0cd2\u0cd3\7\u01bf")
        buf.write("\2\2\u0cd3\u0cd5\3\2\2\2\u0cd4\u0cc6\3\2\2\2\u0cd4\u0cd5")
        buf.write("\3\2\2\2\u0cd5\u0cdd\3\2\2\2\u0cd6\u0cdd\7\u017a\2\2\u0cd7")
        buf.write("\u0cdd\7\u017f\2\2\u0cd8\u0cd9\7\u0180\2\2\u0cd9\u0cda")
        buf.write("\7\u01ad\2\2\u0cda\u0cdd\7\u01a7\2\2\u0cdb\u0cdd\7\u01a8")
        buf.write("\2\2\u0cdc\u0cb6\3\2\2\2\u0cdc\u0cc2\3\2\2\2\u0cdc\u0cc5")
        buf.write("\3\2\2\2\u0cdc\u0cd6\3\2\2\2\u0cdc\u0cd7\3\2\2\2\u0cdc")
        buf.write("\u0cd8\3\2\2\2\u0cdc\u0cdb\3\2\2\2\u0cdc\u0cdd\3\2\2\2")
        buf.write("\u0cdd\u0137\3\2\2\2\u0cde\u0ce1\5\u0180\u00c1\2\u0cdf")
        buf.write("\u0ce1\7\u01a7\2\2\u0ce0\u0cde\3\2\2\2\u0ce0\u0cdf\3\2")
        buf.write("\2\2\u0ce1\u0139\3\2\2\2\u0ce2\u0ce3\7\u01be\2\2\u0ce3")
        buf.write("\u0ce8\5\u013c\u009f\2\u0ce4\u0ce5\7\u01c0\2\2\u0ce5\u0ce7")
        buf.write("\5\u013c\u009f\2\u0ce6\u0ce4\3\2\2\2\u0ce7\u0cea\3\2\2")
        buf.write("\2\u0ce8\u0ce6\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0ceb")
        buf.write("\3\2\2\2\u0cea\u0ce8\3\2\2\2\u0ceb\u0cec\7\u01bf\2\2\u0cec")
        buf.write("\u013b\3\2\2\2\u0ced\u0cf0\5\u0180\u00c1\2\u0cee\u0cf0")
        buf.write("\7\u01a9\2\2\u0cef\u0ced\3\2\2\2\u0cef\u0cee\3\2\2\2\u0cf0")
        buf.write("\u013d\3\2\2\2\u0cf1\u0cf2\7\u00c6\2\2\u0cf2\u0cf3\7\u01be")
        buf.write("\2\2\u0cf3\u0cf4\5\u0140\u00a1\2\u0cf4\u0cfc\7\u01bf\2")
        buf.write("\2\u0cf5\u0cf6\7\u01c0\2\2\u0cf6\u0cf7\7\u01be\2\2\u0cf7")
        buf.write("\u0cf8\5\u0140\u00a1\2\u0cf8\u0cf9\7\u01bf\2\2\u0cf9\u0cfb")
        buf.write("\3\2\2\2\u0cfa\u0cf5\3\2\2\2\u0cfb\u0cfe\3\2\2\2\u0cfc")
        buf.write("\u0cfa\3\2\2\2\u0cfc\u0cfd\3\2\2\2\u0cfd\u013f\3\2\2\2")
        buf.write("\u0cfe\u0cfc\3\2\2\2\u0cff\u0d04\5\u00dep\2\u0d00\u0d01")
        buf.write("\7\u01c0\2\2\u0d01\u0d03\5\u00dep\2\u0d02\u0d00\3\2\2")
        buf.write("\2\u0d03\u0d06\3\2\2\2\u0d04\u0d02\3\2\2\2\u0d04\u0d05")
        buf.write("\3\2\2\2\u0d05\u0141\3\2\2\2\u0d06\u0d04\3\2\2\2\u0d07")
        buf.write("\u0d08\t\64\2\2\u0d08\u0d09\7\u01be\2\2\u0d09\u0d0a\7")
        buf.write("\u01bf\2\2\u0d0a\u0d12\5\u0148\u00a5\2\u0d0b\u0d0c\7\u014d")
        buf.write("\2\2\u0d0c\u0d0d\7\u01be\2\2\u0d0d\u0d0e\5\u00dep\2\u0d0e")
        buf.write("\u0d0f\7\u01bf\2\2\u0d0f\u0d10\5\u0148\u00a5\2\u0d10\u0d12")
        buf.write("\3\2\2\2\u0d11\u0d07\3\2\2\2\u0d11\u0d0b\3\2\2\2\u0d12")
        buf.write("\u0143\3\2\2\2\u0d13\u0d14\t\65\2\2\u0d14\u0d15\7\u01be")
        buf.write("\2\2\u0d15\u0d16\5\u0146\u00a4\2\u0d16\u0d18\7\u01bf\2")
        buf.write("\2\u0d17\u0d19\5\u0148\u00a5\2\u0d18\u0d17\3\2\2\2\u0d18")
        buf.write("\u0d19\3\2\2\2\u0d19\u0d34\3\2\2\2\u0d1a\u0d1b\t\66\2")
        buf.write("\2\u0d1b\u0d1e\7\u01be\2\2\u0d1c\u0d1f\7\u01c3\2\2\u0d1d")
        buf.write("\u0d1f\5\u0146\u00a4\2\u0d1e\u0d1c\3\2\2\2\u0d1e\u0d1d")
        buf.write("\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d22\7\u01bf\2\2\u0d21")
        buf.write("\u0d23\5\u0148\u00a5\2\u0d22\u0d21\3\2\2\2\u0d22\u0d23")
        buf.write("\3\2\2\2\u0d23\u0d34\3\2\2\2\u0d24\u0d25\7\u00ec\2\2\u0d25")
        buf.write("\u0d26\7\u01be\2\2\u0d26\u0d27\5\u0146\u00a4\2\u0d27\u0d28")
        buf.write("\7\u01bf\2\2\u0d28\u0d34\3\2\2\2\u0d29\u0d2a\7\u011e\2")
        buf.write("\2\u0d2a\u0d2b\7\u01be\2\2\u0d2b\u0d2c\5\u00dep\2\u0d2c")
        buf.write("\u0d2d\7\u01bf\2\2\u0d2d\u0d34\3\2\2\2\u0d2e\u0d2f\7\u011f")
        buf.write("\2\2\u0d2f\u0d30\7\u01be\2\2\u0d30\u0d31\5\u0140\u00a1")
        buf.write("\2\u0d31\u0d32\7\u01bf\2\2\u0d32\u0d34\3\2\2\2\u0d33\u0d13")
        buf.write("\3\2\2\2\u0d33\u0d1a\3\2\2\2\u0d33\u0d24\3\2\2\2\u0d33")
        buf.write("\u0d29\3\2\2\2\u0d33\u0d2e\3\2\2\2\u0d34\u0145\3\2\2\2")
        buf.write("\u0d35\u0d37\t(\2\2\u0d36\u0d35\3\2\2\2\u0d36\u0d37\3")
        buf.write("\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d39\5\u00dep\2\u0d39")
        buf.write("\u0147\3\2\2\2\u0d3a\u0d3b\7\u0084\2\2\u0d3b\u0d3f\7\u01be")
        buf.write("\2\2\u0d3c\u0d3d\7\u015b\2\2\u0d3d\u0d3e\7\23\2\2\u0d3e")
        buf.write("\u0d40\5\u0140\u00a1\2\u0d3f\u0d3c\3\2\2\2\u0d3f\u0d40")
        buf.write("\3\2\2\2\u0d40\u0d42\3\2\2\2\u0d41\u0d43\5\u0100\u0081")
        buf.write("\2\u0d42\u0d41\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43\u0d45")
        buf.write("\3\2\2\2\u0d44\u0d46\5\u014a\u00a6\2\u0d45\u0d44\3\2\2")
        buf.write("\2\u0d45\u0d46\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d48")
        buf.write("\7\u01bf\2\2\u0d48\u0149\3\2\2\2\u0d49\u0d4a\t\67\2\2")
        buf.write("\u0d4a\u0d4b\5\u014c\u00a7\2\u0d4b\u014b\3\2\2\2\u0d4c")
        buf.write("\u0d53\5\u0150\u00a9\2\u0d4d\u0d4e\7\17\2\2\u0d4e\u0d4f")
        buf.write("\5\u014e\u00a8\2\u0d4f\u0d50\7\7\2\2\u0d50\u0d51\5\u014e")
        buf.write("\u00a8\2\u0d51\u0d53\3\2\2\2\u0d52\u0d4c\3\2\2\2\u0d52")
        buf.write("\u0d4d\3\2\2\2\u0d53\u014d\3\2\2\2\u0d54\u0d57\5\u0150")
        buf.write("\u00a9\2\u0d55\u0d57\5\u0152\u00aa\2\u0d56\u0d54\3\2\2")
        buf.write("\2\u0d56\u0d55\3\2\2\2\u0d57\u014f\3\2\2\2\u0d58\u0d59")
        buf.write("\7\u0194\2\2\u0d59\u0d5f\7\u015d\2\2\u0d5a\u0d5b\7\u01a7")
        buf.write("\2\2\u0d5b\u0d5f\7\u015d\2\2\u0d5c\u0d5d\7*\2\2\u0d5d")
        buf.write("\u0d5f\7\u0170\2\2\u0d5e\u0d58\3\2\2\2\u0d5e\u0d5a\3\2")
        buf.write("\2\2\u0d5e\u0d5c\3\2\2\2\u0d5f\u0151\3\2\2\2\u0d60\u0d61")
        buf.write("\7\u0194\2\2\u0d61\u0d65\7\u0116\2\2\u0d62\u0d63\7\u01a7")
        buf.write("\2\2\u0d63\u0d65\7\u0116\2\2\u0d64\u0d60\3\2\2\2\u0d64")
        buf.write("\u0d62\3\2\2\2\u0d65\u0153\3\2\2\2\u0d66\u0d67\7\u0114")
        buf.write("\2\2\u0d67\u0d6c\5\u0156\u00ac\2\u0d68\u0d69\7\u01c0\2")
        buf.write("\2\u0d69\u0d6b\5\u0156\u00ac\2\u0d6a\u0d68\3\2\2\2\u0d6b")
        buf.write("\u0d6e\3\2\2\2\u0d6c\u0d6a\3\2\2\2\u0d6c\u0d6d\3\2\2\2")
        buf.write("\u0d6d\u0d89\3\2\2\2\u0d6e\u0d6c\3\2\2\2\u0d6f\u0d70\7")
        buf.write("\u0101\2\2\u0d70\u0d73\7\u01ad\2\2\u0d71\u0d74\5\u0180")
        buf.write("\u00c1\2\u0d72\u0d74\7\u01a9\2\2\u0d73\u0d71\3\2\2\2\u0d73")
        buf.write("\u0d72\3\2\2\2\u0d74\u0d89\3\2\2\2\u0d75\u0d76\7\u0100")
        buf.write("\2\2\u0d76\u0d79\7\u01ad\2\2\u0d77\u0d7a\5\u0180\u00c1")
        buf.write("\2\u0d78\u0d7a\7\u01a9\2\2\u0d79\u0d77\3\2\2\2\u0d79\u0d78")
        buf.write("\3\2\2\2\u0d7a\u0d89\3\2\2\2\u0d7b\u0d7c\7\u0144\2\2\u0d7c")
        buf.write("\u0d7d\7\u01ad\2\2\u0d7d\u0d89\t\17\2\2\u0d7e\u0d7f\7")
        buf.write("\u018e\2\2\u0d7f\u0d80\7\u01ad\2\2\u0d80\u0d89\t\17\2")
        buf.write("\2\u0d81\u0d82\7\u0191\2\2\u0d82\u0d83\7\u01ad\2\2\u0d83")
        buf.write("\u0d89\7\u01a7\2\2\u0d84\u0d85\7\u00ff\2\2\u0d85\u0d89")
        buf.write("\t\17\2\2\u0d86\u0d87\7\u018f\2\2\u0d87\u0d89\t\17\2\2")
        buf.write("\u0d88\u0d66\3\2\2\2\u0d88\u0d6f\3\2\2\2\u0d88\u0d75\3")
        buf.write("\2\2\2\u0d88\u0d7b\3\2\2\2\u0d88\u0d7e\3\2\2\2\u0d88\u0d81")
        buf.write("\3\2\2\2\u0d88\u0d84\3\2\2\2\u0d88\u0d86\3\2\2\2\u0d89")
        buf.write("\u0155\3\2\2\2\u0d8a\u0d91\7\u01be\2\2\u0d8b\u0d8c\7\u014a")
        buf.write("\2\2\u0d8c\u0d8d\7\u01ad\2\2\u0d8d\u0d92\t8\2\2\u0d8e")
        buf.write("\u0d8f\7\u0106\2\2\u0d8f\u0d90\7\u01ad\2\2\u0d90\u0d92")
        buf.write("\7\u01a9\2\2\u0d91\u0d8b\3\2\2\2\u0d91\u0d8e\3\2\2\2\u0d92")
        buf.write("\u0d93\3\2\2\2\u0d93\u0d94\7\u01bf\2\2\u0d94\u0157\3\2")
        buf.write("\2\2\u0d95\u0d98\5\u015a\u00ae\2\u0d96\u0d98\5\u015c\u00af")
        buf.write("\2\u0d97\u0d95\3\2\2\2\u0d97\u0d96\3\2\2\2\u0d98\u0159")
        buf.write("\3\2\2\2\u0d99\u0d9a\7\u0112\2\2\u0d9a\u0d9d\5\u0180\u00c1")
        buf.write("\2\u0d9b\u0d9c\7$\2\2\u0d9c\u0d9e\7\u0114\2\2\u0d9d\u0d9b")
        buf.write("\3\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0da0\3\2\2\2\u0d9f")
        buf.write("\u0da1\7\65\2\2\u0da0\u0d9f\3\2\2\2\u0da0\u0da1\3\2\2")
        buf.write("\2\u0da1\u0da4\3\2\2\2\u0da2\u0da3\7$\2\2\u0da3\u0da5")
        buf.write("\7\u013c\2\2\u0da4\u0da2\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5")
        buf.write("\u0da6\3\2\2\2\u0da6\u0dab\5\u015c\u00af\2\u0da7\u0da8")
        buf.write("\7\u01c0\2\2\u0da8\u0daa\5\u015c\u00af\2\u0da9\u0da7\3")
        buf.write("\2\2\2\u0daa\u0dad\3\2\2\2\u0dab\u0da9\3\2\2\2\u0dab\u0dac")
        buf.write("\3\2\2\2\u0dac\u015b\3\2\2\2\u0dad\u0dab\3\2\2\2\u0dae")
        buf.write("\u0daf\7\u01be\2\2\u0daf\u0db0\7\u0143\2\2\u0db0\u0db3")
        buf.write("\7\u01ad\2\2\u0db1\u0db4\5\u0180\u00c1\2\u0db2\u0db4\7")
        buf.write("\u01a9\2\2\u0db3\u0db1\3\2\2\2\u0db3\u0db2\3\2\2\2\u0db4")
        buf.write("\u0db6\3\2\2\2\u0db5\u0db7\7\u01c0\2\2\u0db6\u0db5\3\2")
        buf.write("\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0db9")
        buf.write("\7K\2\2\u0db9\u0dba\7\u01ad\2\2\u0dba\u0dbc\7\u01a9\2")
        buf.write("\2\u0dbb\u0dbd\7\u01c0\2\2\u0dbc\u0dbb\3\2\2\2\u0dbc\u0dbd")
        buf.write("\3\2\2\2\u0dbd\u0dc4\3\2\2\2\u0dbe\u0dbf\7\u017e\2\2\u0dbf")
        buf.write("\u0dc0\7\u01ad\2\2\u0dc0\u0dc2\5\u0188\u00c5\2\u0dc1\u0dc3")
        buf.write("\7\u01c0\2\2\u0dc2\u0dc1\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3")
        buf.write("\u0dc5\3\2\2\2\u0dc4\u0dbe\3\2\2\2\u0dc4\u0dc5\3\2\2\2")
        buf.write("\u0dc5\u0dcf\3\2\2\2\u0dc6\u0dc7\7\u013a\2\2\u0dc7\u0dca")
        buf.write("\7\u01ad\2\2\u0dc8\u0dcb\5\u0188\u00c5\2\u0dc9\u0dcb\7")
        buf.write("\u0197\2\2\u0dca\u0dc8\3\2\2\2\u0dca\u0dc9\3\2\2\2\u0dcb")
        buf.write("\u0dcd\3\2\2\2\u0dcc\u0dce\7\u01c0\2\2\u0dcd\u0dcc\3\2")
        buf.write("\2\2\u0dcd\u0dce\3\2\2\2\u0dce\u0dd0\3\2\2\2\u0dcf\u0dc6")
        buf.write("\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dd7\3\2\2\2\u0dd1")
        buf.write("\u0dd2\7\u0113\2\2\u0dd2\u0dd3\7\u01ad\2\2\u0dd3\u0dd5")
        buf.write("\5\u0188\u00c5\2\u0dd4\u0dd6\7\u01c0\2\2\u0dd5\u0dd4\3")
        buf.write("\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd8\3\2\2\2\u0dd7\u0dd1")
        buf.write("\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9")
        buf.write("\u0dda\7\u01bf\2\2\u0dda\u015d\3\2\2\2\u0ddb\u0ddc\5\u0180")
        buf.write("\u00c1\2\u0ddc\u0ddd\7\u01b9\2\2\u0ddd\u0dde\5\u0180\u00c1")
        buf.write("\2\u0dde\u0ddf\7\u01b9\2\2\u0ddf\u0de0\5\u0180\u00c1\2")
        buf.write("\u0de0\u0de1\7\u01b9\2\2\u0de1\u0ded\3\2\2\2\u0de2\u0de3")
        buf.write("\5\u0180\u00c1\2\u0de3\u0de5\7\u01b9\2\2\u0de4\u0de6\5")
        buf.write("\u0180\u00c1\2\u0de5\u0de4\3\2\2\2\u0de5\u0de6\3\2\2\2")
        buf.write("\u0de6\u0de7\3\2\2\2\u0de7\u0de8\7\u01b9\2\2\u0de8\u0ded")
        buf.write("\3\2\2\2\u0de9\u0dea\5\u0180\u00c1\2\u0dea\u0deb\7\u01b9")
        buf.write("\2\2\u0deb\u0ded\3\2\2\2\u0dec\u0ddb\3\2\2\2\u0dec\u0de2")
        buf.write("\3\2\2\2\u0dec\u0de9\3\2\2\2\u0dec\u0ded\3\2\2\2\u0ded")
        buf.write("\u0dee\3\2\2\2\u0dee\u0def\5\u0180\u00c1\2\u0def\u015f")
        buf.write("\3\2\2\2\u0df0\u0df1\5\u0180\u00c1\2\u0df1\u0df3\7\u01b9")
        buf.write("\2\2\u0df2\u0df4\5\u0180\u00c1\2\u0df3\u0df2\3\2\2\2\u0df3")
        buf.write("\u0df4\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0df6\7\u01b9")
        buf.write("\2\2\u0df6\u0dfb\3\2\2\2\u0df7\u0df8\5\u0180\u00c1\2\u0df8")
        buf.write("\u0df9\7\u01b9\2\2\u0df9\u0dfb\3\2\2\2\u0dfa\u0df0\3\2")
        buf.write("\2\2\u0dfa\u0df7\3\2\2\2\u0dfa\u0dfb\3\2\2\2\u0dfb\u0dfc")
        buf.write("\3\2\2\2\u0dfc\u0dfd\5\u0180\u00c1\2\u0dfd\u0161\3\2\2")
        buf.write("\2\u0dfe\u0dff\5\u0180\u00c1\2\u0dff\u0e00\7\u01b9\2\2")
        buf.write("\u0e00\u0e02\3\2\2\2\u0e01\u0dfe\3\2\2\2\u0e01\u0e02\3")
        buf.write("\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e04\5\u0180\u00c1\2")
        buf.write("\u0e04\u0163\3\2\2\2\u0e05\u0e06\5\u0180\u00c1\2\u0e06")
        buf.write("\u0e08\7\u01b9\2\2\u0e07\u0e09\5\u0180\u00c1\2\u0e08\u0e07")
        buf.write("\3\2\2\2\u0e08\u0e09\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a")
        buf.write("\u0e0b\7\u01b9\2\2\u0e0b\u0e10\3\2\2\2\u0e0c\u0e0d\5\u0180")
        buf.write("\u00c1\2\u0e0d\u0e0e\7\u01b9\2\2\u0e0e\u0e10\3\2\2\2\u0e0f")
        buf.write("\u0e05\3\2\2\2\u0e0f\u0e0c\3\2\2\2\u0e0f\u0e10\3\2\2\2")
        buf.write("\u0e10\u0e11\3\2\2\2\u0e11\u0e12\5\u0180\u00c1\2\u0e12")
        buf.write("\u0165\3\2\2\2\u0e13\u0e16\5\u015e\u00b0\2\u0e14\u0e16")
        buf.write("\7\u01a6\2\2\u0e15\u0e13\3\2\2\2\u0e15\u0e14\3\2\2\2\u0e16")
        buf.write("\u0167\3\2\2\2\u0e17\u0e18\5\u0160\u00b1\2\u0e18\u0e19")
        buf.write("\7\u01b9\2\2\u0e19\u0e1b\3\2\2\2\u0e1a\u0e17\3\2\2\2\u0e1a")
        buf.write("\u0e1b\3\2\2\2\u0e1b\u0e1c\3\2\2\2\u0e1c\u0e1d\5\u0180")
        buf.write("\u00c1\2\u0e1d\u0169\3\2\2\2\u0e1e\u0e20\5\u0180\u00c1")
        buf.write("\2\u0e1f\u0e21\t\37\2\2\u0e20\u0e1f\3\2\2\2\u0e20\u0e21")
        buf.write("\3\2\2\2\u0e21\u0e29\3\2\2\2\u0e22\u0e23\7\u01c0\2\2\u0e23")
        buf.write("\u0e25\5\u0180\u00c1\2\u0e24\u0e26\t\37\2\2\u0e25\u0e24")
        buf.write("\3\2\2\2\u0e25\u0e26\3\2\2\2\u0e26\u0e28\3\2\2\2\u0e27")
        buf.write("\u0e22\3\2\2\2\u0e28\u0e2b\3\2\2\2\u0e29\u0e27\3\2\2\2")
        buf.write("\u0e29\u0e2a\3\2\2\2\u0e2a\u016b\3\2\2\2\u0e2b\u0e29\3")
        buf.write("\2\2\2\u0e2c\u0e31\5\u0180\u00c1\2\u0e2d\u0e2e\7\u01c0")
        buf.write("\2\2\u0e2e\u0e30\5\u0180\u00c1\2\u0e2f\u0e2d\3\2\2\2\u0e30")
        buf.write("\u0e33\3\2\2\2\u0e31\u0e2f\3\2\2\2\u0e31\u0e32\3\2\2\2")
        buf.write("\u0e32\u016d\3\2\2\2\u0e33\u0e31\3\2\2\2\u0e34\u0e37\5")
        buf.write("\u0180\u00c1\2\u0e35\u0e37\7\u01a6\2\2\u0e36\u0e34\3\2")
        buf.write("\2\2\u0e36\u0e35\3\2\2\2\u0e37\u016f\3\2\2\2\u0e38\u0e39")
        buf.write("\t\17\2\2\u0e39\u0171\3\2\2\2\u0e3a\u0e3b\t9\2\2\u0e3b")
        buf.write("\u0173\3\2\2\2\u0e3c\u0e3e\7t\2\2\u0e3d\u0e3c\3\2\2\2")
        buf.write("\u0e3d\u0e3e\3\2\2\2\u0e3e\u0e3f\3\2\2\2\u0e3f\u0e40\7")
        buf.write("u\2\2\u0e40\u0175\3\2\2\2\u0e41\u0e47\5\u0164\u00b3\2")
        buf.write("\u0e42\u0e47\7\u009d\2\2\u0e43\u0e47\7i\2\2\u0e44\u0e47")
        buf.write("\7\u00e4\2\2\u0e45\u0e47\7\u00eb\2\2\u0e46\u0e41\3\2\2")
        buf.write("\2\u0e46\u0e42\3\2\2\2\u0e46\u0e43\3\2\2\2\u0e46\u0e44")
        buf.write("\3\2\2\2\u0e46\u0e45\3\2\2\2\u0e47\u0177\3\2\2\2\u0e48")
        buf.write("\u0e4a\5\u0180\u00c1\2\u0e49\u0e4b\7Y\2\2\u0e4a\u0e49")
        buf.write("\3\2\2\2\u0e4a\u0e4b\3\2\2\2\u0e4b\u0e53\3\2\2\2\u0e4c")
        buf.write("\u0e4d\7\u01be\2\2\u0e4d\u0e50\t:\2\2\u0e4e\u0e4f\7\u01c0")
        buf.write("\2\2\u0e4f\u0e51\7\u01a7\2\2\u0e50\u0e4e\3\2\2\2\u0e50")
        buf.write("\u0e51\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e54\7\u01bf")
        buf.write("\2\2\u0e53\u0e4c\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0179")
        buf.write("\3\2\2\2\u0e55\u0e58\7u\2\2\u0e56\u0e58\5\u017c\u00bf")
        buf.write("\2\u0e57\u0e55\3\2\2\2\u0e57\u0e56\3\2\2\2\u0e58\u017b")
        buf.write("\3\2\2\2\u0e59\u0e69\7\u01a9\2\2\u0e5a\u0e69\7\u01aa\2")
        buf.write("\2\u0e5b\u0e5d\5\u017e\u00c0\2\u0e5c\u0e5b\3\2\2\2\u0e5c")
        buf.write("\u0e5d\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e69\7\u01a7")
        buf.write("\2\2\u0e5f\u0e61\5\u017e\u00c0\2\u0e60\u0e5f\3\2\2\2\u0e60")
        buf.write("\u0e61\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e69\t)\2\2")
        buf.write("\u0e63\u0e65\5\u017e\u00c0\2\u0e64\u0e63\3\2\2\2\u0e64")
        buf.write("\u0e65\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66\u0e67\7\u01bd")
        buf.write("\2\2\u0e67\u0e69\t;\2\2\u0e68\u0e59\3\2\2\2\u0e68\u0e5a")
        buf.write("\3\2\2\2\u0e68\u0e5c\3\2\2\2\u0e68\u0e60\3\2\2\2\u0e68")
        buf.write("\u0e64\3\2\2\2\u0e69\u017d\3\2\2\2\u0e6a\u0e6b\t$\2\2")
        buf.write("\u0e6b\u017f\3\2\2\2\u0e6c\u0e70\5\u0182\u00c2\2\u0e6d")
        buf.write("\u0e70\7\u01a4\2\2\u0e6e\u0e70\7\u01a5\2\2\u0e6f\u0e6c")
        buf.write("\3\2\2\2\u0e6f\u0e6d\3\2\2\2\u0e6f\u0e6e\3\2\2\2\u0e70")
        buf.write("\u0181\3\2\2\2\u0e71\u0e72\t<\2\2\u0e72\u0183\3\2\2\2")
        buf.write("\u0e73\u0e83\7\u01ad\2\2\u0e74\u0e83\7\u01ae\2\2\u0e75")
        buf.write("\u0e83\7\u01af\2\2\u0e76\u0e77\7\u01af\2\2\u0e77\u0e83")
        buf.write("\7\u01ad\2\2\u0e78\u0e79\7\u01ae\2\2\u0e79\u0e83\7\u01ad")
        buf.write("\2\2\u0e7a\u0e7b\7\u01af\2\2\u0e7b\u0e83\7\u01ae\2\2\u0e7c")
        buf.write("\u0e7d\7\u01b0\2\2\u0e7d\u0e83\7\u01ad\2\2\u0e7e\u0e7f")
        buf.write("\7\u01b0\2\2\u0e7f\u0e83\7\u01ae\2\2\u0e80\u0e81\7\u01b0")
        buf.write("\2\2\u0e81\u0e83\7\u01af\2\2\u0e82\u0e73\3\2\2\2\u0e82")
        buf.write("\u0e74\3\2\2\2\u0e82\u0e75\3\2\2\2\u0e82\u0e76\3\2\2\2")
        buf.write("\u0e82\u0e78\3\2\2\2\u0e82\u0e7a\3\2\2\2\u0e82\u0e7c\3")
        buf.write("\2\2\2\u0e82\u0e7e\3\2\2\2\u0e82\u0e80\3\2\2\2\u0e83\u0185")
        buf.write("\3\2\2\2\u0e84\u0e85\t=\2\2\u0e85\u0187\3\2\2\2\u0e86")
        buf.write("\u0e88\7\u01a7\2\2\u0e87\u0e89\t>\2\2\u0e88\u0e87\3\2")
        buf.write("\2\2\u0e88\u0e89\3\2\2\2\u0e89\u0189\3\2\2\2\u0220\u018d")
        buf.write("\u0194\u0198\u019c\u01a4\u01ab\u01c0\u01c4\u01c7\u01cb")
        buf.write("\u01cf\u01d3\u01d8\u01dd\u01e4\u01e7\u01eb\u01ee\u01f6")
        buf.write("\u01f9\u01fe\u0201\u0206\u020b\u020e\u0213\u0219\u0220")
        buf.write("\u0224\u0226\u022b\u0238\u023d\u023f\u024a\u024d\u0255")
        buf.write("\u0257\u025a\u025e\u0261\u0264\u026e\u0274\u027c\u0280")
        buf.write("\u0284\u028d\u0293\u0297\u029a\u02a5\u02a9\u02b0\u02b5")
        buf.write("\u02b8\u02c0\u02c2\u02c5\u02c9\u02cc\u02d0\u02d7\u02db")
        buf.write("\u02dd\u02df\u02e2\u02e5\u02e8\u02ee\u02f1\u02f9\u02fb")
        buf.write("\u02fe\u0302\u0305\u030b\u030e\u0312\u0315\u0318\u031f")
        buf.write("\u0322\u0326\u0329\u032c\u032f\u0332\u033a\u033c\u0340")
        buf.write("\u0343\u034b\u034f\u0353\u035a\u035e\u0360\u0362\u0365")
        buf.write("\u0368\u036b\u0373\u0379\u037f\u0381\u0385\u0388\u038b")
        buf.write("\u0390\u0395\u0398\u03a0\u03a4\u03ab\u03ae\u03b7\u03ba")
        buf.write("\u03be\u03c6\u03c9\u03cd\u03d0\u03de\u03e2\u03e5\u03e9")
        buf.write("\u03ec\u03f3\u03f6\u03fd\u0401\u0403\u040b\u040e\u0412")
        buf.write("\u0419\u0426\u0429\u042f\u0436\u043b\u0440\u0447\u0452")
        buf.write("\u045a\u045d\u0465\u0476\u047d\u0482\u0485\u048f\u0492")
        buf.write("\u0495\u04a3\u04a6\u04a9\u04af\u04bd\u04c0\u04c3\u04c9")
        buf.write("\u04cf\u04d7\u04da\u04de\u04e2\u04e5\u04ea\u04f6\u0506")
        buf.write("\u050a\u0510\u0512\u0515\u051d\u0523\u0529\u052e\u0531")
        buf.write("\u053a\u0544\u054d\u0555\u0558\u055f\u0562\u058a\u058d")
        buf.write("\u0593\u059f\u05a1\u05a4\u05bc\u05c7\u05cf\u05da\u05df")
        buf.write("\u05e2\u05ea\u05f4\u060e\u0614\u061f\u062d\u0635\u063c")
        buf.write("\u0653\u0660\u0666\u066b\u066e\u0674\u067b\u067f\u0683")
        buf.write("\u0689\u0690\u0694\u069a\u06a1\u06a8\u06ab\u06b1\u06b8")
        buf.write("\u06bc\u06c3\u06cc\u06d0\u06d6\u06dd\u06e1\u06ee\u06f4")
        buf.write("\u0705\u0709\u0711\u0715\u071d\u0721\u0723\u0727\u072b")
        buf.write("\u072f\u0733\u0739\u073d\u073f\u0744\u074c\u074f\u0752")
        buf.write("\u075b\u0760\u0765\u0768\u076a\u076e\u0772\u0775\u0779")
        buf.write("\u077f\u0784\u078b\u078d\u0791\u0799\u079f\u07a3\u07a6")
        buf.write("\u07af\u07b2\u07b4\u07bd\u07c8\u07cc\u07ce\u07d0\u07d6")
        buf.write("\u07db\u07e2\u07ef\u07f1\u07f3\u07f6\u07f9\u0800\u0803")
        buf.write("\u0809\u080e\u0810\u0813\u0819\u0821\u0823\u0826\u082a")
        buf.write("\u082d\u0833\u0836\u083a\u083d\u0843\u0846\u0848\u084c")
        buf.write("\u0851\u0859\u085d\u0860\u0865\u086d\u0872\u087b\u0880")
        buf.write("\u0885\u088b\u088f\u0892\u0896\u089c\u08a4\u08a9\u08ab")
        buf.write("\u08ae\u08b3\u08b8\u08bb\u08c0\u08c3\u08c6\u08cc\u08d4")
        buf.write("\u08dc\u08df\u08e1\u08e5\u08ea\u08ed\u08f2\u08f6\u08fa")
        buf.write("\u0900\u0908\u090c\u091c\u091f\u0921\u092c\u0937\u0940")
        buf.write("\u094a\u0954\u0956\u0958\u095b\u095e\u0969\u096b\u096d")
        buf.write("\u0970\u0973\u0976\u0979\u097c\u097f\u098b\u098e\u0991")
        buf.write("\u099a\u099d\u09a0\u09a7\u09aa\u09b8\u09bb\u09c2\u09cd")
        buf.write("\u09d1\u09de\u09e2\u09ea\u09ee\u0a00\u0a0f\u0a11\u0a1c")
        buf.write("\u0a23\u0a2a\u0a32\u0a3b\u0a3f\u0a49\u0a50\u0a58\u0a60")
        buf.write("\u0a64\u0a7a\u0a83\u0a89\u0a8f\u0a95\u0a9f\u0aa6\u0aab")
        buf.write("\u0ab0\u0ab4\u0abb\u0abf\u0ac2\u0ac7\u0acb\u0acf\u0ad8")
        buf.write("\u0adb\u0adf\u0ae4\u0ae8\u0af1\u0af8\u0b01\u0b0d\u0b0f")
        buf.write("\u0b17\u0b1f\u0b22\u0b24\u0b2b\u0b2f\u0b3a\u0b5c\u0b6c")
        buf.write("\u0b72\u0b79\u0b7f\u0b84\u0b8c\u0b8f\u0b91\u0b98\u0ba0")
        buf.write("\u0ba6\u0bab\u0baf\u0bb4\u0bb6\u0bbd\u0bc1\u0bc8\u0bca")
        buf.write("\u0bcc\u0bd7\u0bdb\u0bdd\u0be0\u0bf0\u0bf4\u0c08\u0c0c")
        buf.write("\u0c10\u0c1b\u0c22\u0c38\u0c72\u0c76\u0c84\u0c91\u0c97")
        buf.write("\u0c9a\u0ca2\u0cae\u0cb4\u0cbd\u0cce\u0cd4\u0cdc\u0ce0")
        buf.write("\u0ce8\u0cef\u0cfc\u0d04\u0d11\u0d18\u0d1e\u0d22\u0d33")
        buf.write("\u0d36\u0d3f\u0d42\u0d45\u0d52\u0d56\u0d5e\u0d64\u0d6c")
        buf.write("\u0d73\u0d79\u0d88\u0d91\u0d97\u0d9d\u0da0\u0da4\u0dab")
        buf.write("\u0db3\u0db6\u0dbc\u0dc2\u0dc4\u0dca\u0dcd\u0dcf\u0dd5")
        buf.write("\u0dd7\u0de5\u0dec\u0df3\u0dfa\u0e01\u0e08\u0e0f\u0e15")
        buf.write("\u0e1a\u0e20\u0e25\u0e29\u0e31\u0e36\u0e3d\u0e46\u0e4a")
        buf.write("\u0e50\u0e53\u0e57\u0e5c\u0e60\u0e64\u0e68\u0e6f\u0e82")
        buf.write("\u0e88")
        return buf.getvalue()


class tsqlParser ( Parser ):

    grammarFileName = "tsql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'^='", "'|='", "'.'", "'_'", "'@'", "'#'", 
                     "'$'", "'('", "')'", "','", "';'", "':'", "'*'", "'/'", 
                     "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'" ]

    symbolicNames = [ "<INVALID>", "HADR_options", "ADD", "ALL", "ALTER", 
                      "AND", "ANY", "APPEND", "AS", "ASC", "AUTHORIZATION", 
                      "BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", 
                      "BY", "CALLED", "CASCADE", "CASE", "CHANGETABLE", 
                      "CHANGES", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", 
                      "COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", 
                      "CONSTRAINT", "CONTAINMENT", "CONTAINS", "CONTAINSTABLE", 
                      "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "CURRENT_USER", "CURSOR", "DATA_COMPRESSION", "DATABASE", 
                      "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", 
                      "DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", 
                      "DOUBLE", "DROP", "DUMP", "ELSE", "END", "ERRLVL", 
                      "ESCAPE", "EVENTDATA", "EXCEPT", "EXECUTE", "EXISTS", 
                      "EXIT", "EXTERNAL", "FETCH", "FILE", "FILENAME", "FILLFACTOR", 
                      "FOR", "FORCESEEK", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
                      "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", 
                      "HAVING", "IDENTITY", "IDENTITYCOL", "IDENTITY_INSERT", 
                      "IF", "IN", "INCLUDE", "INDEX", "INNER", "INSERT", 
                      "INSTEAD", "INTERSECT", "INTO", "IS", "JOIN", "KEY", 
                      "KILL", "LEFT", "LIKE", "LINENO", "LOAD", "LOG", "MATCHED", 
                      "MERGE", "NATIONAL", "NOCHECK", "NONCLUSTERED", "NONE", 
                      "NOT", "NULL", "NULLIF", "OF", "OFF", "OFFSETS", "ON", 
                      "OPEN", "OPENDATASOURCE", "OPENQUERY", "OPENROWSET", 
                      "OPENXML", "OPTION", "OR", "ORDER", "OUTER", "OVER", 
                      "PAGE", "PARTIAL", "PERCENT", "PIVOT", "PLAN", "PRECISION", 
                      "PRIMARY", "PRINT", "PROC", "PROCEDURE", "PUBLIC", 
                      "RAISERROR", "RAW", "READ", "READTEXT", "RECONFIGURE", 
                      "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", 
                      "RETURN", "RETURNS", "REVERT", "REVOKE", "RIGHT", 
                      "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", "SAVE", 
                      "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
                      "SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", 
                      "SERVER", "SESSION_USER", "SET", "SETUSER", "SHUTDOWN", 
                      "SOME", "SOURCE", "STATISTICS", "SYSTEM_USER", "TABLE", 
                      "TABLESAMPLE", "TARGET", "TEXTSIZE", "THEN", "TO", 
                      "TOP", "TRAN", "TRANSACTION", "TRIGGER", "TRUNCATE", 
                      "TRY_CONVERT", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT", 
                      "UPDATE", "UPDATETEXT", "USE", "USER", "VALUES", "VARYING", 
                      "VIEW", "WAITFOR", "WHEN", "WHERE", "WHILE", "WITH", 
                      "WITHIN", "WRITETEXT", "ABSOLUTE", "ACTION", "AFTER", 
                      "ALLOWED", "ALLOW_SNAPSHOT_ISOLATION", "ANSI_NULLS", 
                      "ANSI_NULL_DEFAULT", "ANSI_PADDING", "ANSI_WARNINGS", 
                      "APPLY", "ARITHABORT", "AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", 
                      "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", "AUTO_UPDATE_STATISTICS", 
                      "AUTO_UPDATE_STATISTICS_ASYNC", "AVG", "BASE64", "BINARY_CHECKSUM", 
                      "BULK_LOGGED", "CALLER", "CAST", "CATCH", "CHANGE_RETENTION", 
                      "CHANGE_TRACKING", "CHECKSUM", "CHECKSUM_AGG", "COMMITTED", 
                      "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
                      "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "CURSOR_CLOSE_ON_COMMIT", 
                      "CURSOR_DEFAULT", "DATEADD", "DATEDIFF", "DATENAME", 
                      "DATEPART", "GETDATE", "GETUTCDATE", "DATE_CORRELATION_OPTIMIZATION", 
                      "DAYS", "DB_CHAINING", "DEFAULT_FULLTEXT_LANGUAGE", 
                      "DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", 
                      "DELETED", "DENSE_RANK", "DIRECTORY_NAME", "DISABLE", 
                      "DISABLED", "DISABLE_BROKER", "DYNAMIC", "EMERGENCY", 
                      "ENABLE_BROKER", "ENCRYPTION", "ERROR_BROKER_CONVERSATIONS", 
                      "EXPAND", "FAST", "FAST_FORWARD", "FILEGROUP", "FILEGROWTH", 
                      "FILESTREAM", "FIRST", "FOLLOWING", "FORCE", "FORCED", 
                      "FORWARD_ONLY", "FULLSCAN", "GB", "GLOBAL", "GO", 
                      "GROUPING", "GROUPING_ID", "HADR", "HASH", "HONOR_BROKER_PRIORITY", 
                      "HOURS", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
                      "IMMEDIATE", "IMPERSONATE", "INCREMENTAL", "INPUT", 
                      "INSENSITIVE", "INSERTED", "ISOLATION", "KB", "KEEP", 
                      "KEEPFIXED", "KEYSET", "LAST", "LEVEL", "LOCAL", "LOCK_ESCALATION", 
                      "LOGIN", "LOOP", "MARK", "MAX", "MAXDOP", "MAXRECURSION", 
                      "MAXSIZE", "MB", "MEMORY_OPTIMIZED_DATA", "MIN", "MINUTES", 
                      "MIN_ACTIVE_ROWVERSION", "MIXED_PAGE_ALLOCATION", 
                      "MODIFY", "MULTI_USER", "NAME", "NESTED_TRIGGERS", 
                      "NEW_BROKER", "NEXT", "NO", "NOCOUNT", "NOEXPAND", 
                      "NON_TRANSACTED_ACCESS", "NORECOMPUTE", "NO_WAIT", 
                      "NTILE", "NUMBER", "NUMERIC_ROUNDABORT", "OFFLINE", 
                      "OFFSET", "ONLINE", "ONLY", "OPTIMISTIC", "OPTIMIZE", 
                      "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", "PARAMETERIZATION", 
                      "PARTITION", "PATH", "PRECEDING", "PRIOR", "PRIVILEGES", 
                      "QUOTED_IDENTIFIER", "RANGE", "RANK", "READONLY", 
                      "READ_COMMITTED_SNAPSHOT", "READ_ONLY", "READ_WRITE", 
                      "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", 
                      "REMOTE", "REPEATABLE", "RESTRICTED_USER", "ROBUST", 
                      "ROOT", "ROW", "ROWGUID", "ROWS", "ROW_NUMBER", "SAMPLE", 
                      "SCHEMABINDING", "SCROLL", "SCROLL_LOCKS", "SECONDS", 
                      "SELF", "SERIALIZABLE", "SHOWPLAN", "SIMPLE", "SINGLE_USER", 
                      "SIZE", "SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STATIC", 
                      "STATS_STREAM", "STDEV", "STDEVP", "SUM", "TAKE", 
                      "TARGET_RECOVERY_TIME", "TB", "TEXTIMAGE_ON", "THROW", 
                      "TIES", "TIME", "TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", 
                      "TRUSTWORTHY", "TRY", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", 
                      "TYPE_WARNING", "UNBOUNDED", "UNCOMMITTED", "UNKNOWN", 
                      "UNLIMITED", "USING", "VAR", "VARP", "VIEWS", "VIEW_METADATA", 
                      "WORK", "XML", "XMLNAMESPACES", "DOLLAR_ACTION", "SPACE", 
                      "COMMENT", "LINE_COMMENT", "DOUBLE_QUOTE_ID", "SQUARE_BRACKET_ID", 
                      "LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", 
                      "REAL", "EQUAL", "GREATER", "LESS", "EXCLAMATION", 
                      "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
                      "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", 
                      "MODULE", "PLUS", "MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", 
                      "BIT_XOR" ]

    RULE_root = 0
    RULE_batch = 1
    RULE_sql_clauses = 2
    RULE_sql_clause = 3
    RULE_dml_clause = 4
    RULE_ddl_clause = 5
    RULE_cfl_statement = 6
    RULE_empty_statement = 7
    RULE_another_statement = 8
    RULE_merge_statement = 9
    RULE_merge_matched = 10
    RULE_merge_not_matched = 11
    RULE_delete_statement = 12
    RULE_delete_statement_from = 13
    RULE_insert_statement = 14
    RULE_insert_statement_value = 15
    RULE_select_statement = 16
    RULE_update_statement = 17
    RULE_output_clause = 18
    RULE_output_dml_list_elem = 19
    RULE_output_column_name = 20
    RULE_create_database = 21
    RULE_create_index = 22
    RULE_create_or_alter_procedure = 23
    RULE_create_or_alter_trigger = 24
    RULE_dml_trigger = 25
    RULE_dml_trigger_option = 26
    RULE_dml_trigger_operation = 27
    RULE_ddl_trigger = 28
    RULE_ddl_trigger_operation = 29
    RULE_create_or_alter_function = 30
    RULE_func_body_returns_select = 31
    RULE_func_body_returns_table = 32
    RULE_func_body_returns_scalar = 33
    RULE_procedure_param = 34
    RULE_procedure_option = 35
    RULE_function_option = 36
    RULE_create_statistics = 37
    RULE_create_table = 38
    RULE_table_options = 39
    RULE_table_option = 40
    RULE_create_view = 41
    RULE_view_attribute = 42
    RULE_alter_table = 43
    RULE_alter_database = 44
    RULE_database_optionspec = 45
    RULE_auto_option = 46
    RULE_change_tracking_option = 47
    RULE_change_tracking_option_list = 48
    RULE_containment_option = 49
    RULE_cursor_option = 50
    RULE_date_correlation_optimization_option = 51
    RULE_db_encryption_option = 52
    RULE_db_state_option = 53
    RULE_db_update_option = 54
    RULE_db_user_access_option = 55
    RULE_delayed_durability_option = 56
    RULE_external_access_option = 57
    RULE_mixed_page_allocation_option = 58
    RULE_parameterization_option = 59
    RULE_recovery_option = 60
    RULE_service_broker_option = 61
    RULE_snapshot_option = 62
    RULE_sql_option = 63
    RULE_target_recovery_time_option = 64
    RULE_termination = 65
    RULE_drop_index = 66
    RULE_drop_procedure = 67
    RULE_drop_trigger = 68
    RULE_drop_dml_trigger = 69
    RULE_drop_ddl_trigger = 70
    RULE_drop_function = 71
    RULE_drop_statistics = 72
    RULE_drop_table = 73
    RULE_drop_view = 74
    RULE_create_type = 75
    RULE_drop_type = 76
    RULE_rowset_function_limited = 77
    RULE_openquery = 78
    RULE_opendatasource = 79
    RULE_declare_statement = 80
    RULE_cursor_statement = 81
    RULE_execute_statement = 82
    RULE_execute_statement_arg = 83
    RULE_execute_var_string = 84
    RULE_security_statement = 85
    RULE_grant_permission = 86
    RULE_set_statement = 87
    RULE_transaction_statement = 88
    RULE_go_statement = 89
    RULE_use_statement = 90
    RULE_dbcc_clause = 91
    RULE_dbcc_options = 92
    RULE_execute_clause = 93
    RULE_declare_local = 94
    RULE_table_type_definition = 95
    RULE_column_def_table_constraints = 96
    RULE_column_def_table_constraint = 97
    RULE_column_definition = 98
    RULE_column_constraint = 99
    RULE_table_constraint = 100
    RULE_on_delete = 101
    RULE_on_update = 102
    RULE_index_options = 103
    RULE_index_option = 104
    RULE_declare_cursor = 105
    RULE_declare_set_cursor_common = 106
    RULE_fetch_cursor = 107
    RULE_set_special = 108
    RULE_constant_LOCAL_ID = 109
    RULE_expression = 110
    RULE_constant_expression = 111
    RULE_subquery = 112
    RULE_with_expression = 113
    RULE_common_table_expression = 114
    RULE_update_elem = 115
    RULE_search_condition_list = 116
    RULE_search_condition = 117
    RULE_search_condition_and = 118
    RULE_search_condition_not = 119
    RULE_predicate = 120
    RULE_query_expression = 121
    RULE_union = 122
    RULE_query_specification = 123
    RULE_top_clause = 124
    RULE_top_percent = 125
    RULE_top_count = 126
    RULE_order_by_clause = 127
    RULE_for_clause = 128
    RULE_xml_common_directives = 129
    RULE_order_by_expression = 130
    RULE_group_by_item = 131
    RULE_option_clause = 132
    RULE_option = 133
    RULE_optimize_for_arg = 134
    RULE_select_list = 135
    RULE_select_list_elem = 136
    RULE_table_sources = 137
    RULE_table_source = 138
    RULE_table_source_item_joined = 139
    RULE_table_source_item = 140
    RULE_change_table = 141
    RULE_join_part = 142
    RULE_table_name_with_hint = 143
    RULE_rowset_function = 144
    RULE_bulk_option = 145
    RULE_derived_table = 146
    RULE_function_call = 147
    RULE_switch_section = 148
    RULE_switch_search_condition_section = 149
    RULE_as_table_alias = 150
    RULE_table_alias = 151
    RULE_with_table_hints = 152
    RULE_insert_with_table_hints = 153
    RULE_table_hint = 154
    RULE_index_value = 155
    RULE_column_alias_list = 156
    RULE_column_alias = 157
    RULE_table_value_constructor = 158
    RULE_expression_list = 159
    RULE_ranking_windowed_function = 160
    RULE_aggregate_windowed_function = 161
    RULE_all_distinct_expression = 162
    RULE_over_clause = 163
    RULE_row_or_range_clause = 164
    RULE_window_frame_extent = 165
    RULE_window_frame_bound = 166
    RULE_window_frame_preceding = 167
    RULE_window_frame_following = 168
    RULE_create_database_option = 169
    RULE_database_filestream_option = 170
    RULE_database_file_spec = 171
    RULE_file_group = 172
    RULE_file_spec = 173
    RULE_full_table_name = 174
    RULE_table_name = 175
    RULE_simple_name = 176
    RULE_func_proc_name = 177
    RULE_ddl_object = 178
    RULE_full_column_name = 179
    RULE_column_name_list_with_order = 180
    RULE_column_name_list = 181
    RULE_cursor_name = 182
    RULE_on_off = 183
    RULE_clustered = 184
    RULE_null_notnull = 185
    RULE_scalar_function_name = 186
    RULE_data_type = 187
    RULE_default_value = 188
    RULE_constant = 189
    RULE_sign = 190
    RULE_id_ = 191
    RULE_simple_id = 192
    RULE_comparison_operator = 193
    RULE_assignment_operator = 194
    RULE_file_size = 195

    ruleNames =  [ "root", "batch", "sql_clauses", "sql_clause", "dml_clause", 
                   "ddl_clause", "cfl_statement", "empty_statement", "another_statement", 
                   "merge_statement", "merge_matched", "merge_not_matched", 
                   "delete_statement", "delete_statement_from", "insert_statement", 
                   "insert_statement_value", "select_statement", "update_statement", 
                   "output_clause", "output_dml_list_elem", "output_column_name", 
                   "create_database", "create_index", "create_or_alter_procedure", 
                   "create_or_alter_trigger", "dml_trigger", "dml_trigger_option", 
                   "dml_trigger_operation", "ddl_trigger", "ddl_trigger_operation", 
                   "create_or_alter_function", "func_body_returns_select", 
                   "func_body_returns_table", "func_body_returns_scalar", 
                   "procedure_param", "procedure_option", "function_option", 
                   "create_statistics", "create_table", "table_options", 
                   "table_option", "create_view", "view_attribute", "alter_table", 
                   "alter_database", "database_optionspec", "auto_option", 
                   "change_tracking_option", "change_tracking_option_list", 
                   "containment_option", "cursor_option", "date_correlation_optimization_option", 
                   "db_encryption_option", "db_state_option", "db_update_option", 
                   "db_user_access_option", "delayed_durability_option", 
                   "external_access_option", "mixed_page_allocation_option", 
                   "parameterization_option", "recovery_option", "service_broker_option", 
                   "snapshot_option", "sql_option", "target_recovery_time_option", 
                   "termination", "drop_index", "drop_procedure", "drop_trigger", 
                   "drop_dml_trigger", "drop_ddl_trigger", "drop_function", 
                   "drop_statistics", "drop_table", "drop_view", "create_type", 
                   "drop_type", "rowset_function_limited", "openquery", 
                   "opendatasource", "declare_statement", "cursor_statement", 
                   "execute_statement", "execute_statement_arg", "execute_var_string", 
                   "security_statement", "grant_permission", "set_statement", 
                   "transaction_statement", "go_statement", "use_statement", 
                   "dbcc_clause", "dbcc_options", "execute_clause", "declare_local", 
                   "table_type_definition", "column_def_table_constraints", 
                   "column_def_table_constraint", "column_definition", "column_constraint", 
                   "table_constraint", "on_delete", "on_update", "index_options", 
                   "index_option", "declare_cursor", "declare_set_cursor_common", 
                   "fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", 
                   "constant_expression", "subquery", "with_expression", 
                   "common_table_expression", "update_elem", "search_condition_list", 
                   "search_condition", "search_condition_and", "search_condition_not", 
                   "predicate", "query_expression", "union", "query_specification", 
                   "top_clause", "top_percent", "top_count", "order_by_clause", 
                   "for_clause", "xml_common_directives", "order_by_expression", 
                   "group_by_item", "option_clause", "option", "optimize_for_arg", 
                   "select_list", "select_list_elem", "table_sources", "table_source", 
                   "table_source_item_joined", "table_source_item", "change_table", 
                   "join_part", "table_name_with_hint", "rowset_function", 
                   "bulk_option", "derived_table", "function_call", "switch_section", 
                   "switch_search_condition_section", "as_table_alias", 
                   "table_alias", "with_table_hints", "insert_with_table_hints", 
                   "table_hint", "index_value", "column_alias_list", "column_alias", 
                   "table_value_constructor", "expression_list", "ranking_windowed_function", 
                   "aggregate_windowed_function", "all_distinct_expression", 
                   "over_clause", "row_or_range_clause", "window_frame_extent", 
                   "window_frame_bound", "window_frame_preceding", "window_frame_following", 
                   "create_database_option", "database_filestream_option", 
                   "database_file_spec", "file_group", "file_spec", "full_table_name", 
                   "table_name", "simple_name", "func_proc_name", "ddl_object", 
                   "full_column_name", "column_name_list_with_order", "column_name_list", 
                   "cursor_name", "on_off", "clustered", "null_notnull", 
                   "scalar_function_name", "data_type", "default_value", 
                   "constant", "sign", "id_", "simple_id", "comparison_operator", 
                   "assignment_operator", "file_size" ]

    EOF = Token.EOF
    HADR_options=1
    ADD=2
    ALL=3
    ALTER=4
    AND=5
    ANY=6
    APPEND=7
    AS=8
    ASC=9
    AUTHORIZATION=10
    BACKUP=11
    BEGIN=12
    BETWEEN=13
    BREAK=14
    BROWSE=15
    BULK=16
    BY=17
    CALLED=18
    CASCADE=19
    CASE=20
    CHANGETABLE=21
    CHANGES=22
    CHECK=23
    CHECKPOINT=24
    CLOSE=25
    CLUSTERED=26
    COALESCE=27
    COLLATE=28
    COLUMN=29
    COMMIT=30
    COMPUTE=31
    CONSTRAINT=32
    CONTAINMENT=33
    CONTAINS=34
    CONTAINSTABLE=35
    CONTINUE=36
    CONVERT=37
    CREATE=38
    CROSS=39
    CURRENT=40
    CURRENT_DATE=41
    CURRENT_TIME=42
    CURRENT_TIMESTAMP=43
    CURRENT_USER=44
    CURSOR=45
    DATA_COMPRESSION=46
    DATABASE=47
    DBCC=48
    DEALLOCATE=49
    DECLARE=50
    DEFAULT=51
    DELETE=52
    DENY=53
    DESC=54
    DISK=55
    DISTINCT=56
    DISTRIBUTED=57
    DOUBLE=58
    DROP=59
    DUMP=60
    ELSE=61
    END=62
    ERRLVL=63
    ESCAPE=64
    EVENTDATA=65
    EXCEPT=66
    EXECUTE=67
    EXISTS=68
    EXIT=69
    EXTERNAL=70
    FETCH=71
    FILE=72
    FILENAME=73
    FILLFACTOR=74
    FOR=75
    FORCESEEK=76
    FOREIGN=77
    FREETEXT=78
    FREETEXTTABLE=79
    FROM=80
    FULL=81
    FUNCTION=82
    GOTO=83
    GRANT=84
    GROUP=85
    HAVING=86
    IDENTITY=87
    IDENTITYCOL=88
    IDENTITY_INSERT=89
    IF=90
    IN=91
    INCLUDE=92
    INDEX=93
    INNER=94
    INSERT=95
    INSTEAD=96
    INTERSECT=97
    INTO=98
    IS=99
    JOIN=100
    KEY=101
    KILL=102
    LEFT=103
    LIKE=104
    LINENO=105
    LOAD=106
    LOG=107
    MATCHED=108
    MERGE=109
    NATIONAL=110
    NOCHECK=111
    NONCLUSTERED=112
    NONE=113
    NOT=114
    NULL=115
    NULLIF=116
    OF=117
    OFF=118
    OFFSETS=119
    ON=120
    OPEN=121
    OPENDATASOURCE=122
    OPENQUERY=123
    OPENROWSET=124
    OPENXML=125
    OPTION=126
    OR=127
    ORDER=128
    OUTER=129
    OVER=130
    PAGE=131
    PARTIAL=132
    PERCENT=133
    PIVOT=134
    PLAN=135
    PRECISION=136
    PRIMARY=137
    PRINT=138
    PROC=139
    PROCEDURE=140
    PUBLIC=141
    RAISERROR=142
    RAW=143
    READ=144
    READTEXT=145
    RECONFIGURE=146
    REFERENCES=147
    REPLICATION=148
    RESTORE=149
    RESTRICT=150
    RETURN=151
    RETURNS=152
    REVERT=153
    REVOKE=154
    RIGHT=155
    ROLLBACK=156
    ROWCOUNT=157
    ROWGUIDCOL=158
    RULE=159
    SAVE=160
    SCHEMA=161
    SECURITYAUDIT=162
    SELECT=163
    SEMANTICKEYPHRASETABLE=164
    SEMANTICSIMILARITYDETAILSTABLE=165
    SEMANTICSIMILARITYTABLE=166
    SERVER=167
    SESSION_USER=168
    SET=169
    SETUSER=170
    SHUTDOWN=171
    SOME=172
    SOURCE=173
    STATISTICS=174
    SYSTEM_USER=175
    TABLE=176
    TABLESAMPLE=177
    TARGET=178
    TEXTSIZE=179
    THEN=180
    TO=181
    TOP=182
    TRAN=183
    TRANSACTION=184
    TRIGGER=185
    TRUNCATE=186
    TRY_CONVERT=187
    TSEQUAL=188
    UNION=189
    UNIQUE=190
    UNPIVOT=191
    UPDATE=192
    UPDATETEXT=193
    USE=194
    USER=195
    VALUES=196
    VARYING=197
    VIEW=198
    WAITFOR=199
    WHEN=200
    WHERE=201
    WHILE=202
    WITH=203
    WITHIN=204
    WRITETEXT=205
    ABSOLUTE=206
    ACTION=207
    AFTER=208
    ALLOWED=209
    ALLOW_SNAPSHOT_ISOLATION=210
    ANSI_NULLS=211
    ANSI_NULL_DEFAULT=212
    ANSI_PADDING=213
    ANSI_WARNINGS=214
    APPLY=215
    ARITHABORT=216
    AUTO=217
    AUTO_CLEANUP=218
    AUTO_CLOSE=219
    AUTO_CREATE_STATISTICS=220
    AUTO_SHRINK=221
    AUTO_UPDATE_STATISTICS=222
    AUTO_UPDATE_STATISTICS_ASYNC=223
    AVG=224
    BASE64=225
    BINARY_CHECKSUM=226
    BULK_LOGGED=227
    CALLER=228
    CAST=229
    CATCH=230
    CHANGE_RETENTION=231
    CHANGE_TRACKING=232
    CHECKSUM=233
    CHECKSUM_AGG=234
    COMMITTED=235
    COMPATIBILITY_LEVEL=236
    CONCAT=237
    CONCAT_NULL_YIELDS_NULL=238
    CONTROL=239
    COOKIE=240
    COUNT=241
    COUNT_BIG=242
    CURSOR_CLOSE_ON_COMMIT=243
    CURSOR_DEFAULT=244
    DATEADD=245
    DATEDIFF=246
    DATENAME=247
    DATEPART=248
    GETDATE=249
    GETUTCDATE=250
    DATE_CORRELATION_OPTIMIZATION=251
    DAYS=252
    DB_CHAINING=253
    DEFAULT_FULLTEXT_LANGUAGE=254
    DEFAULT_LANGUAGE=255
    DELAY=256
    DELAYED_DURABILITY=257
    DELETED=258
    DENSE_RANK=259
    DIRECTORY_NAME=260
    DISABLE=261
    DISABLED=262
    DISABLE_BROKER=263
    DYNAMIC=264
    EMERGENCY=265
    ENABLE_BROKER=266
    ENCRYPTION=267
    ERROR_BROKER_CONVERSATIONS=268
    EXPAND=269
    FAST=270
    FAST_FORWARD=271
    FILEGROUP=272
    FILEGROWTH=273
    FILESTREAM=274
    FIRST=275
    FOLLOWING=276
    FORCE=277
    FORCED=278
    FORWARD_ONLY=279
    FULLSCAN=280
    GB=281
    GLOBAL=282
    GO=283
    GROUPING=284
    GROUPING_ID=285
    HADR=286
    HASH=287
    HONOR_BROKER_PRIORITY=288
    HOURS=289
    IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=290
    IMMEDIATE=291
    IMPERSONATE=292
    INCREMENTAL=293
    INPUT=294
    INSENSITIVE=295
    INSERTED=296
    ISOLATION=297
    KB=298
    KEEP=299
    KEEPFIXED=300
    KEYSET=301
    LAST=302
    LEVEL=303
    LOCAL=304
    LOCK_ESCALATION=305
    LOGIN=306
    LOOP=307
    MARK=308
    MAX=309
    MAXDOP=310
    MAXRECURSION=311
    MAXSIZE=312
    MB=313
    MEMORY_OPTIMIZED_DATA=314
    MIN=315
    MINUTES=316
    MIN_ACTIVE_ROWVERSION=317
    MIXED_PAGE_ALLOCATION=318
    MODIFY=319
    MULTI_USER=320
    NAME=321
    NESTED_TRIGGERS=322
    NEW_BROKER=323
    NEXT=324
    NO=325
    NOCOUNT=326
    NOEXPAND=327
    NON_TRANSACTED_ACCESS=328
    NORECOMPUTE=329
    NO_WAIT=330
    NTILE=331
    NUMBER=332
    NUMERIC_ROUNDABORT=333
    OFFLINE=334
    OFFSET=335
    ONLINE=336
    ONLY=337
    OPTIMISTIC=338
    OPTIMIZE=339
    OUT=340
    OUTPUT=341
    OWNER=342
    PAGE_VERIFY=343
    PARAMETERIZATION=344
    PARTITION=345
    PATH=346
    PRECEDING=347
    PRIOR=348
    PRIVILEGES=349
    QUOTED_IDENTIFIER=350
    RANGE=351
    RANK=352
    READONLY=353
    READ_COMMITTED_SNAPSHOT=354
    READ_ONLY=355
    READ_WRITE=356
    RECOMPILE=357
    RECOVERY=358
    RECURSIVE_TRIGGERS=359
    RELATIVE=360
    REMOTE=361
    REPEATABLE=362
    RESTRICTED_USER=363
    ROBUST=364
    ROOT=365
    ROW=366
    ROWGUID=367
    ROWS=368
    ROW_NUMBER=369
    SAMPLE=370
    SCHEMABINDING=371
    SCROLL=372
    SCROLL_LOCKS=373
    SECONDS=374
    SELF=375
    SERIALIZABLE=376
    SHOWPLAN=377
    SIMPLE=378
    SINGLE_USER=379
    SIZE=380
    SNAPSHOT=381
    SPATIAL_WINDOW_MAX_CELLS=382
    STATIC=383
    STATS_STREAM=384
    STDEV=385
    STDEVP=386
    SUM=387
    TAKE=388
    TARGET_RECOVERY_TIME=389
    TB=390
    TEXTIMAGE_ON=391
    THROW=392
    TIES=393
    TIME=394
    TORN_PAGE_DETECTION=395
    TRANSFORM_NOISE_WORDS=396
    TRUSTWORTHY=397
    TRY=398
    TWO_DIGIT_YEAR_CUTOFF=399
    TYPE=400
    TYPE_WARNING=401
    UNBOUNDED=402
    UNCOMMITTED=403
    UNKNOWN=404
    UNLIMITED=405
    USING=406
    VAR=407
    VARP=408
    VIEWS=409
    VIEW_METADATA=410
    WORK=411
    XML=412
    XMLNAMESPACES=413
    DOLLAR_ACTION=414
    SPACE=415
    COMMENT=416
    LINE_COMMENT=417
    DOUBLE_QUOTE_ID=418
    SQUARE_BRACKET_ID=419
    LOCAL_ID=420
    DECIMAL=421
    ID=422
    STRING=423
    BINARY=424
    FLOAT=425
    REAL=426
    EQUAL=427
    GREATER=428
    LESS=429
    EXCLAMATION=430
    PLUS_ASSIGN=431
    MINUS_ASSIGN=432
    MULT_ASSIGN=433
    DIV_ASSIGN=434
    MOD_ASSIGN=435
    AND_ASSIGN=436
    XOR_ASSIGN=437
    OR_ASSIGN=438
    DOT=439
    UNDERLINE=440
    AT=441
    SHARP=442
    DOLLAR=443
    LR_BRACKET=444
    RR_BRACKET=445
    COMMA=446
    SEMI=447
    COLON=448
    STAR=449
    DIVIDE=450
    MODULE=451
    PLUS=452
    MINUS=453
    BIT_NOT=454
    BIT_OR=455
    BIT_AND=456
    BIT_XOR=457

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(tsqlParser.EOF, 0)

        def batch(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.BatchContext)
            else:
                return self.getTypedRuleContext(tsqlParser.BatchContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = tsqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CALLED) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DATA_COMPRESSION) | (1 << tsqlParser.DBCC) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (tsqlParser.EVENTDATA - 65)) | (1 << (tsqlParser.EXECUTE - 65)) | (1 << (tsqlParser.FETCH - 65)) | (1 << (tsqlParser.FILLFACTOR - 65)) | (1 << (tsqlParser.FORCESEEK - 65)) | (1 << (tsqlParser.GOTO - 65)) | (1 << (tsqlParser.GRANT - 65)) | (1 << (tsqlParser.IF - 65)) | (1 << (tsqlParser.INSERT - 65)) | (1 << (tsqlParser.MERGE - 65)) | (1 << (tsqlParser.OPEN - 65)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PRINT - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAISERROR - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.REVERT - 131)) | (1 << (tsqlParser.ROLLBACK - 131)) | (1 << (tsqlParser.SAVE - 131)) | (1 << (tsqlParser.SELECT - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SET - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)) | (1 << (tsqlParser.UPDATE - 131)) | (1 << (tsqlParser.USE - 131)))) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & ((1 << (tsqlParser.WAITFOR - 199)) | (1 << (tsqlParser.WHILE - 199)) | (1 << (tsqlParser.WITH - 199)) | (1 << (tsqlParser.ABSOLUTE - 199)) | (1 << (tsqlParser.APPLY - 199)) | (1 << (tsqlParser.AUTO - 199)) | (1 << (tsqlParser.AVG - 199)) | (1 << (tsqlParser.BASE64 - 199)) | (1 << (tsqlParser.CALLER - 199)) | (1 << (tsqlParser.CAST - 199)) | (1 << (tsqlParser.CATCH - 199)) | (1 << (tsqlParser.CHECKSUM_AGG - 199)) | (1 << (tsqlParser.COMMITTED - 199)) | (1 << (tsqlParser.CONCAT - 199)) | (1 << (tsqlParser.CONTROL - 199)) | (1 << (tsqlParser.COOKIE - 199)) | (1 << (tsqlParser.COUNT - 199)) | (1 << (tsqlParser.COUNT_BIG - 199)) | (1 << (tsqlParser.DELAY - 199)) | (1 << (tsqlParser.DELETED - 199)) | (1 << (tsqlParser.DENSE_RANK - 199)) | (1 << (tsqlParser.DISABLE - 199)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (tsqlParser.DYNAMIC - 264)) | (1 << (tsqlParser.ENCRYPTION - 264)) | (1 << (tsqlParser.EXPAND - 264)) | (1 << (tsqlParser.FAST - 264)) | (1 << (tsqlParser.FAST_FORWARD - 264)) | (1 << (tsqlParser.FIRST - 264)) | (1 << (tsqlParser.FOLLOWING - 264)) | (1 << (tsqlParser.FORCE - 264)) | (1 << (tsqlParser.FORCED - 264)) | (1 << (tsqlParser.FORWARD_ONLY - 264)) | (1 << (tsqlParser.FULLSCAN - 264)) | (1 << (tsqlParser.GLOBAL - 264)) | (1 << (tsqlParser.GO - 264)) | (1 << (tsqlParser.GROUPING - 264)) | (1 << (tsqlParser.GROUPING_ID - 264)) | (1 << (tsqlParser.HASH - 264)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 264)) | (1 << (tsqlParser.IMPERSONATE - 264)) | (1 << (tsqlParser.INPUT - 264)) | (1 << (tsqlParser.INSENSITIVE - 264)) | (1 << (tsqlParser.INSERTED - 264)) | (1 << (tsqlParser.ISOLATION - 264)) | (1 << (tsqlParser.KEEP - 264)) | (1 << (tsqlParser.KEEPFIXED - 264)) | (1 << (tsqlParser.KEYSET - 264)) | (1 << (tsqlParser.LAST - 264)) | (1 << (tsqlParser.LEVEL - 264)) | (1 << (tsqlParser.LOCAL - 264)) | (1 << (tsqlParser.LOCK_ESCALATION - 264)) | (1 << (tsqlParser.LOGIN - 264)) | (1 << (tsqlParser.LOOP - 264)) | (1 << (tsqlParser.MARK - 264)) | (1 << (tsqlParser.MAX - 264)) | (1 << (tsqlParser.MAXDOP - 264)) | (1 << (tsqlParser.MAXRECURSION - 264)) | (1 << (tsqlParser.MIN - 264)) | (1 << (tsqlParser.MODIFY - 264)) | (1 << (tsqlParser.NAME - 264)) | (1 << (tsqlParser.NEXT - 264)) | (1 << (tsqlParser.NOCOUNT - 264)) | (1 << (tsqlParser.NOEXPAND - 264)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (tsqlParser.NORECOMPUTE - 329)) | (1 << (tsqlParser.NTILE - 329)) | (1 << (tsqlParser.NUMBER - 329)) | (1 << (tsqlParser.OFFSET - 329)) | (1 << (tsqlParser.ONLINE - 329)) | (1 << (tsqlParser.ONLY - 329)) | (1 << (tsqlParser.OPTIMISTIC - 329)) | (1 << (tsqlParser.OPTIMIZE - 329)) | (1 << (tsqlParser.OUT - 329)) | (1 << (tsqlParser.OUTPUT - 329)) | (1 << (tsqlParser.OWNER - 329)) | (1 << (tsqlParser.PARAMETERIZATION - 329)) | (1 << (tsqlParser.PARTITION - 329)) | (1 << (tsqlParser.PATH - 329)) | (1 << (tsqlParser.PRECEDING - 329)) | (1 << (tsqlParser.PRIOR - 329)) | (1 << (tsqlParser.PRIVILEGES - 329)) | (1 << (tsqlParser.RANGE - 329)) | (1 << (tsqlParser.RANK - 329)) | (1 << (tsqlParser.READONLY - 329)) | (1 << (tsqlParser.READ_ONLY - 329)) | (1 << (tsqlParser.RECOMPILE - 329)) | (1 << (tsqlParser.RELATIVE - 329)) | (1 << (tsqlParser.REMOTE - 329)) | (1 << (tsqlParser.REPEATABLE - 329)) | (1 << (tsqlParser.ROBUST - 329)) | (1 << (tsqlParser.ROOT - 329)) | (1 << (tsqlParser.ROW - 329)) | (1 << (tsqlParser.ROWGUID - 329)) | (1 << (tsqlParser.ROWS - 329)) | (1 << (tsqlParser.ROW_NUMBER - 329)) | (1 << (tsqlParser.SAMPLE - 329)) | (1 << (tsqlParser.SCHEMABINDING - 329)) | (1 << (tsqlParser.SCROLL - 329)) | (1 << (tsqlParser.SCROLL_LOCKS - 329)) | (1 << (tsqlParser.SELF - 329)) | (1 << (tsqlParser.SERIALIZABLE - 329)) | (1 << (tsqlParser.SIMPLE - 329)) | (1 << (tsqlParser.SIZE - 329)) | (1 << (tsqlParser.SNAPSHOT - 329)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 329)) | (1 << (tsqlParser.STATIC - 329)) | (1 << (tsqlParser.STATS_STREAM - 329)) | (1 << (tsqlParser.STDEV - 329)) | (1 << (tsqlParser.STDEVP - 329)) | (1 << (tsqlParser.SUM - 329)) | (1 << (tsqlParser.TEXTIMAGE_ON - 329)) | (1 << (tsqlParser.THROW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)) | (1 << (tsqlParser.LR_BRACKET - 393)) | (1 << (tsqlParser.SEMI - 393)))) != 0):
                self.state = 392
                self.batch()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 398
            self.match(tsqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def go_statement(self):
            return self.getTypedRuleContext(tsqlParser.Go_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_batch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBatch" ):
                listener.enterBatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBatch" ):
                listener.exitBatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBatch" ):
                return visitor.visitBatch(self)
            else:
                return visitor.visitChildren(self)




    def batch(self):

        localctx = tsqlParser.BatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_batch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.sql_clauses()
            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 401
                self.go_statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SEMI)
            else:
                return self.getToken(tsqlParser.SEMI, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clauses" ):
                listener.enterSql_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clauses" ):
                listener.exitSql_clauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clauses" ):
                return visitor.visitSql_clauses(self)
            else:
                return visitor.visitChildren(self)




    def sql_clauses(self):

        localctx = tsqlParser.Sql_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_clauses)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 404
                    self.sql_clause()
                    self.state = 406
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        self.state = 405
                        self.match(tsqlParser.SEMI)



                else:
                    raise NoViableAltException(self)
                self.state = 410 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_clause(self):
            return self.getTypedRuleContext(tsqlParser.Dml_clauseContext,0)


        def ddl_clause(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_clauseContext,0)


        def cfl_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cfl_statementContext,0)


        def dbcc_clause(self):
            return self.getTypedRuleContext(tsqlParser.Dbcc_clauseContext,0)


        def empty_statement(self):
            return self.getTypedRuleContext(tsqlParser.Empty_statementContext,0)


        def another_statement(self):
            return self.getTypedRuleContext(tsqlParser.Another_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_sql_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_clause" ):
                listener.enterSql_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_clause" ):
                listener.exitSql_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_clause" ):
                return visitor.visitSql_clause(self)
            else:
                return visitor.visitChildren(self)




    def sql_clause(self):

        localctx = tsqlParser.Sql_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_clause)
        try:
            self.state = 418
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 412
                self.dml_clause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self.ddl_clause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 414
                self.cfl_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 415
                self.dbcc_clause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 416
                self.empty_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 417
                self.another_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def merge_statement(self):
            return self.getTypedRuleContext(tsqlParser.Merge_statementContext,0)


        def delete_statement(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statementContext,0)


        def insert_statement(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statementContext,0)


        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def update_statement(self):
            return self.getTypedRuleContext(tsqlParser.Update_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dml_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_clause" ):
                listener.enterDml_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_clause" ):
                listener.exitDml_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_clause" ):
                return visitor.visitDml_clause(self)
            else:
                return visitor.visitChildren(self)




    def dml_clause(self):

        localctx = tsqlParser.Dml_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_dml_clause)
        try:
            self.state = 425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.merge_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 421
                self.delete_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 422
                self.insert_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 423
                self.select_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 424
                self.update_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_database(self):
            return self.getTypedRuleContext(tsqlParser.Create_databaseContext,0)


        def create_index(self):
            return self.getTypedRuleContext(tsqlParser.Create_indexContext,0)


        def create_or_alter_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_procedureContext,0)


        def create_or_alter_trigger(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_triggerContext,0)


        def create_or_alter_function(self):
            return self.getTypedRuleContext(tsqlParser.Create_or_alter_functionContext,0)


        def create_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Create_statisticsContext,0)


        def create_table(self):
            return self.getTypedRuleContext(tsqlParser.Create_tableContext,0)


        def create_type(self):
            return self.getTypedRuleContext(tsqlParser.Create_typeContext,0)


        def create_view(self):
            return self.getTypedRuleContext(tsqlParser.Create_viewContext,0)


        def alter_table(self):
            return self.getTypedRuleContext(tsqlParser.Alter_tableContext,0)


        def alter_database(self):
            return self.getTypedRuleContext(tsqlParser.Alter_databaseContext,0)


        def drop_index(self):
            return self.getTypedRuleContext(tsqlParser.Drop_indexContext,0)


        def drop_procedure(self):
            return self.getTypedRuleContext(tsqlParser.Drop_procedureContext,0)


        def drop_trigger(self):
            return self.getTypedRuleContext(tsqlParser.Drop_triggerContext,0)


        def drop_function(self):
            return self.getTypedRuleContext(tsqlParser.Drop_functionContext,0)


        def drop_statistics(self):
            return self.getTypedRuleContext(tsqlParser.Drop_statisticsContext,0)


        def drop_table(self):
            return self.getTypedRuleContext(tsqlParser.Drop_tableContext,0)


        def drop_type(self):
            return self.getTypedRuleContext(tsqlParser.Drop_typeContext,0)


        def drop_view(self):
            return self.getTypedRuleContext(tsqlParser.Drop_viewContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_clause" ):
                listener.enterDdl_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_clause" ):
                listener.exitDdl_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_clause" ):
                return visitor.visitDdl_clause(self)
            else:
                return visitor.visitChildren(self)




    def ddl_clause(self):

        localctx = tsqlParser.Ddl_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_ddl_clause)
        try:
            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 427
                self.create_database()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.create_index()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.create_or_alter_procedure()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 430
                self.create_or_alter_trigger()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 431
                self.create_or_alter_function()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 432
                self.create_statistics()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 433
                self.create_table()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 434
                self.create_type()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 435
                self.create_view()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 436
                self.alter_table()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 437
                self.alter_database()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 438
                self.drop_index()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 439
                self.drop_procedure()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 440
                self.drop_trigger()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 441
                self.drop_function()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 442
                self.drop_statistics()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 443
                self.drop_table()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 444
                self.drop_type()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 445
                self.drop_view()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cfl_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_cfl_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Waitfor_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WAITFOR(self):
            return self.getToken(tsqlParser.WAITFOR, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)
        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitfor_statement" ):
                listener.enterWaitfor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitfor_statement" ):
                listener.exitWaitfor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWaitfor_statement" ):
                return visitor.visitWaitfor_statement(self)
            else:
                return visitor.visitChildren(self)


    class Print_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PRINT(self):
            return self.getToken(tsqlParser.PRINT, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_statement" ):
                listener.enterPrint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_statement" ):
                listener.exitPrint_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrint_statement" ):
                return visitor.visitPrint_statement(self)
            else:
                return visitor.visitChildren(self)


    class Continue_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_statement" ):
                listener.enterContinue_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_statement" ):
                listener.exitContinue_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_statement" ):
                return visitor.visitContinue_statement(self)
            else:
                return visitor.visitChildren(self)


    class If_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_statement" ):
                listener.enterIf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_statement" ):
                listener.exitIf_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_statement" ):
                return visitor.visitIf_statement(self)
            else:
                return visitor.visitChildren(self)


    class Raiseerror_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.msg = None # Token
            self.severity = None # Constant_LOCAL_IDContext
            self.state = None # Constant_LOCAL_IDContext
            self.copyFrom(ctx)

        def RAISERROR(self):
            return self.getToken(tsqlParser.RAISERROR, 0)
        def constant_LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Constant_LOCAL_IDContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,i)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaiseerror_statement" ):
                listener.enterRaiseerror_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaiseerror_statement" ):
                listener.exitRaiseerror_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaiseerror_statement" ):
                return visitor.visitRaiseerror_statement(self)
            else:
                return visitor.visitChildren(self)


    class Throw_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.error_number = None # Token
            self.message = None # Token
            self.state = None # Token
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)
        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)
        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)
        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrow_statement" ):
                listener.enterThrow_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrow_statement" ):
                listener.exitThrow_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrow_statement" ):
                return visitor.visitThrow_statement(self)
            else:
                return visitor.visitChildren(self)


    class Try_catch_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.try_clauses = None # Sql_clausesContext
            self.catch_clauses = None # Sql_clausesContext
            self.copyFrom(ctx)

        def BEGIN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.BEGIN)
            else:
                return self.getToken(tsqlParser.BEGIN, i)
        def TRY(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TRY)
            else:
                return self.getToken(tsqlParser.TRY, i)
        def END(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.END)
            else:
                return self.getToken(tsqlParser.END, i)
        def CATCH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CATCH)
            else:
                return self.getToken(tsqlParser.CATCH, i)
        def sql_clauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clausesContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_catch_statement" ):
                listener.enterTry_catch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_catch_statement" ):
                listener.exitTry_catch_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_catch_statement" ):
                return visitor.visitTry_catch_statement(self)
            else:
                return visitor.visitChildren(self)


    class While_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(tsqlParser.WHILE, 0)
        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)

        def sql_clause(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,0)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)
        def CONTINUE(self):
            return self.getToken(tsqlParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_statement" ):
                listener.enterWhile_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_statement" ):
                listener.exitWhile_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_statement" ):
                return visitor.visitWhile_statement(self)
            else:
                return visitor.visitChildren(self)


    class Block_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_statement" ):
                listener.enterBlock_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_statement" ):
                listener.exitBlock_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock_statement" ):
                return visitor.visitBlock_statement(self)
            else:
                return visitor.visitChildren(self)


    class Break_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(tsqlParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_statement" ):
                listener.enterBreak_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_statement" ):
                listener.exitBreak_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_statement" ):
                return visitor.visitBreak_statement(self)
            else:
                return visitor.visitChildren(self)


    class Goto_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GOTO(self):
            return self.getToken(tsqlParser.GOTO, 0)
        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGoto_statement" ):
                listener.enterGoto_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGoto_statement" ):
                listener.exitGoto_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGoto_statement" ):
                return visitor.visitGoto_statement(self)
            else:
                return visitor.visitChildren(self)


    class Return_statementContext(Cfl_statementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.Cfl_statementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_statement" ):
                listener.enterReturn_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_statement" ):
                listener.exitReturn_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_statement" ):
                return visitor.visitReturn_statement(self)
            else:
                return visitor.visitChildren(self)



    def cfl_statement(self):

        localctx = tsqlParser.Cfl_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_cfl_statement)
        self._la = 0 # Token type
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Block_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 448
                self.match(tsqlParser.BEGIN)
                self.state = 450
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 449
                    self.match(tsqlParser.SEMI)


                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CALLED) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DATA_COMPRESSION) | (1 << tsqlParser.DBCC) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (tsqlParser.EVENTDATA - 65)) | (1 << (tsqlParser.EXECUTE - 65)) | (1 << (tsqlParser.FETCH - 65)) | (1 << (tsqlParser.FILLFACTOR - 65)) | (1 << (tsqlParser.FORCESEEK - 65)) | (1 << (tsqlParser.GOTO - 65)) | (1 << (tsqlParser.GRANT - 65)) | (1 << (tsqlParser.IF - 65)) | (1 << (tsqlParser.INSERT - 65)) | (1 << (tsqlParser.MERGE - 65)) | (1 << (tsqlParser.OPEN - 65)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PRINT - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAISERROR - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.REVERT - 131)) | (1 << (tsqlParser.ROLLBACK - 131)) | (1 << (tsqlParser.SAVE - 131)) | (1 << (tsqlParser.SELECT - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SET - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)) | (1 << (tsqlParser.UPDATE - 131)) | (1 << (tsqlParser.USE - 131)))) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & ((1 << (tsqlParser.WAITFOR - 199)) | (1 << (tsqlParser.WHILE - 199)) | (1 << (tsqlParser.WITH - 199)) | (1 << (tsqlParser.ABSOLUTE - 199)) | (1 << (tsqlParser.APPLY - 199)) | (1 << (tsqlParser.AUTO - 199)) | (1 << (tsqlParser.AVG - 199)) | (1 << (tsqlParser.BASE64 - 199)) | (1 << (tsqlParser.CALLER - 199)) | (1 << (tsqlParser.CAST - 199)) | (1 << (tsqlParser.CATCH - 199)) | (1 << (tsqlParser.CHECKSUM_AGG - 199)) | (1 << (tsqlParser.COMMITTED - 199)) | (1 << (tsqlParser.CONCAT - 199)) | (1 << (tsqlParser.CONTROL - 199)) | (1 << (tsqlParser.COOKIE - 199)) | (1 << (tsqlParser.COUNT - 199)) | (1 << (tsqlParser.COUNT_BIG - 199)) | (1 << (tsqlParser.DELAY - 199)) | (1 << (tsqlParser.DELETED - 199)) | (1 << (tsqlParser.DENSE_RANK - 199)) | (1 << (tsqlParser.DISABLE - 199)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (tsqlParser.DYNAMIC - 264)) | (1 << (tsqlParser.ENCRYPTION - 264)) | (1 << (tsqlParser.EXPAND - 264)) | (1 << (tsqlParser.FAST - 264)) | (1 << (tsqlParser.FAST_FORWARD - 264)) | (1 << (tsqlParser.FIRST - 264)) | (1 << (tsqlParser.FOLLOWING - 264)) | (1 << (tsqlParser.FORCE - 264)) | (1 << (tsqlParser.FORCED - 264)) | (1 << (tsqlParser.FORWARD_ONLY - 264)) | (1 << (tsqlParser.FULLSCAN - 264)) | (1 << (tsqlParser.GLOBAL - 264)) | (1 << (tsqlParser.GO - 264)) | (1 << (tsqlParser.GROUPING - 264)) | (1 << (tsqlParser.GROUPING_ID - 264)) | (1 << (tsqlParser.HASH - 264)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 264)) | (1 << (tsqlParser.IMPERSONATE - 264)) | (1 << (tsqlParser.INPUT - 264)) | (1 << (tsqlParser.INSENSITIVE - 264)) | (1 << (tsqlParser.INSERTED - 264)) | (1 << (tsqlParser.ISOLATION - 264)) | (1 << (tsqlParser.KEEP - 264)) | (1 << (tsqlParser.KEEPFIXED - 264)) | (1 << (tsqlParser.KEYSET - 264)) | (1 << (tsqlParser.LAST - 264)) | (1 << (tsqlParser.LEVEL - 264)) | (1 << (tsqlParser.LOCAL - 264)) | (1 << (tsqlParser.LOCK_ESCALATION - 264)) | (1 << (tsqlParser.LOGIN - 264)) | (1 << (tsqlParser.LOOP - 264)) | (1 << (tsqlParser.MARK - 264)) | (1 << (tsqlParser.MAX - 264)) | (1 << (tsqlParser.MAXDOP - 264)) | (1 << (tsqlParser.MAXRECURSION - 264)) | (1 << (tsqlParser.MIN - 264)) | (1 << (tsqlParser.MODIFY - 264)) | (1 << (tsqlParser.NAME - 264)) | (1 << (tsqlParser.NEXT - 264)) | (1 << (tsqlParser.NOCOUNT - 264)) | (1 << (tsqlParser.NOEXPAND - 264)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (tsqlParser.NORECOMPUTE - 329)) | (1 << (tsqlParser.NTILE - 329)) | (1 << (tsqlParser.NUMBER - 329)) | (1 << (tsqlParser.OFFSET - 329)) | (1 << (tsqlParser.ONLINE - 329)) | (1 << (tsqlParser.ONLY - 329)) | (1 << (tsqlParser.OPTIMISTIC - 329)) | (1 << (tsqlParser.OPTIMIZE - 329)) | (1 << (tsqlParser.OUT - 329)) | (1 << (tsqlParser.OUTPUT - 329)) | (1 << (tsqlParser.OWNER - 329)) | (1 << (tsqlParser.PARAMETERIZATION - 329)) | (1 << (tsqlParser.PARTITION - 329)) | (1 << (tsqlParser.PATH - 329)) | (1 << (tsqlParser.PRECEDING - 329)) | (1 << (tsqlParser.PRIOR - 329)) | (1 << (tsqlParser.PRIVILEGES - 329)) | (1 << (tsqlParser.RANGE - 329)) | (1 << (tsqlParser.RANK - 329)) | (1 << (tsqlParser.READONLY - 329)) | (1 << (tsqlParser.READ_ONLY - 329)) | (1 << (tsqlParser.RECOMPILE - 329)) | (1 << (tsqlParser.RELATIVE - 329)) | (1 << (tsqlParser.REMOTE - 329)) | (1 << (tsqlParser.REPEATABLE - 329)) | (1 << (tsqlParser.ROBUST - 329)) | (1 << (tsqlParser.ROOT - 329)) | (1 << (tsqlParser.ROW - 329)) | (1 << (tsqlParser.ROWGUID - 329)) | (1 << (tsqlParser.ROWS - 329)) | (1 << (tsqlParser.ROW_NUMBER - 329)) | (1 << (tsqlParser.SAMPLE - 329)) | (1 << (tsqlParser.SCHEMABINDING - 329)) | (1 << (tsqlParser.SCROLL - 329)) | (1 << (tsqlParser.SCROLL_LOCKS - 329)) | (1 << (tsqlParser.SELF - 329)) | (1 << (tsqlParser.SERIALIZABLE - 329)) | (1 << (tsqlParser.SIMPLE - 329)) | (1 << (tsqlParser.SIZE - 329)) | (1 << (tsqlParser.SNAPSHOT - 329)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 329)) | (1 << (tsqlParser.STATIC - 329)) | (1 << (tsqlParser.STATS_STREAM - 329)) | (1 << (tsqlParser.STDEV - 329)) | (1 << (tsqlParser.STDEVP - 329)) | (1 << (tsqlParser.SUM - 329)) | (1 << (tsqlParser.TEXTIMAGE_ON - 329)) | (1 << (tsqlParser.THROW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)) | (1 << (tsqlParser.LR_BRACKET - 393)) | (1 << (tsqlParser.SEMI - 393)))) != 0):
                    self.state = 452
                    self.sql_clauses()


                self.state = 455
                self.match(tsqlParser.END)
                self.state = 457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                localctx = tsqlParser.Break_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.match(tsqlParser.BREAK)
                self.state = 461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 460
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                localctx = tsqlParser.Continue_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.match(tsqlParser.CONTINUE)
                self.state = 465
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 464
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 467
                self.match(tsqlParser.GOTO)
                self.state = 468
                self.id_()
                self.state = 470
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 469
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                localctx = tsqlParser.Goto_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 472
                self.id_()
                self.state = 473
                self.match(tsqlParser.COLON)
                self.state = 475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                if la_ == 1:
                    self.state = 474
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                localctx = tsqlParser.If_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 477
                self.match(tsqlParser.IF)
                self.state = 478
                self.search_condition()
                self.state = 479
                self.sql_clause()
                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 480
                    self.match(tsqlParser.ELSE)
                    self.state = 481
                    self.sql_clause()


                self.state = 485
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                if la_ == 1:
                    self.state = 484
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                localctx = tsqlParser.Return_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 487
                self.match(tsqlParser.RETURN)
                self.state = 489
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 488
                    self.expression(0)


                self.state = 492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 491
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 8:
                localctx = tsqlParser.Throw_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 494
                self.match(tsqlParser.THROW)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL:
                    self.state = 495
                    localctx.error_number = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.error_number = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 496
                    self.match(tsqlParser.COMMA)
                    self.state = 497
                    localctx.message = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                        localctx.message = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 498
                    self.match(tsqlParser.COMMA)
                    self.state = 499
                    localctx.state = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                        localctx.state = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 502
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 9:
                localctx = tsqlParser.Try_catch_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 505
                self.match(tsqlParser.BEGIN)
                self.state = 506
                self.match(tsqlParser.TRY)
                self.state = 508
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 507
                    self.match(tsqlParser.SEMI)


                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CALLED) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DATA_COMPRESSION) | (1 << tsqlParser.DBCC) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (tsqlParser.EVENTDATA - 65)) | (1 << (tsqlParser.EXECUTE - 65)) | (1 << (tsqlParser.FETCH - 65)) | (1 << (tsqlParser.FILLFACTOR - 65)) | (1 << (tsqlParser.FORCESEEK - 65)) | (1 << (tsqlParser.GOTO - 65)) | (1 << (tsqlParser.GRANT - 65)) | (1 << (tsqlParser.IF - 65)) | (1 << (tsqlParser.INSERT - 65)) | (1 << (tsqlParser.MERGE - 65)) | (1 << (tsqlParser.OPEN - 65)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PRINT - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAISERROR - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.REVERT - 131)) | (1 << (tsqlParser.ROLLBACK - 131)) | (1 << (tsqlParser.SAVE - 131)) | (1 << (tsqlParser.SELECT - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SET - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)) | (1 << (tsqlParser.UPDATE - 131)) | (1 << (tsqlParser.USE - 131)))) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & ((1 << (tsqlParser.WAITFOR - 199)) | (1 << (tsqlParser.WHILE - 199)) | (1 << (tsqlParser.WITH - 199)) | (1 << (tsqlParser.ABSOLUTE - 199)) | (1 << (tsqlParser.APPLY - 199)) | (1 << (tsqlParser.AUTO - 199)) | (1 << (tsqlParser.AVG - 199)) | (1 << (tsqlParser.BASE64 - 199)) | (1 << (tsqlParser.CALLER - 199)) | (1 << (tsqlParser.CAST - 199)) | (1 << (tsqlParser.CATCH - 199)) | (1 << (tsqlParser.CHECKSUM_AGG - 199)) | (1 << (tsqlParser.COMMITTED - 199)) | (1 << (tsqlParser.CONCAT - 199)) | (1 << (tsqlParser.CONTROL - 199)) | (1 << (tsqlParser.COOKIE - 199)) | (1 << (tsqlParser.COUNT - 199)) | (1 << (tsqlParser.COUNT_BIG - 199)) | (1 << (tsqlParser.DELAY - 199)) | (1 << (tsqlParser.DELETED - 199)) | (1 << (tsqlParser.DENSE_RANK - 199)) | (1 << (tsqlParser.DISABLE - 199)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (tsqlParser.DYNAMIC - 264)) | (1 << (tsqlParser.ENCRYPTION - 264)) | (1 << (tsqlParser.EXPAND - 264)) | (1 << (tsqlParser.FAST - 264)) | (1 << (tsqlParser.FAST_FORWARD - 264)) | (1 << (tsqlParser.FIRST - 264)) | (1 << (tsqlParser.FOLLOWING - 264)) | (1 << (tsqlParser.FORCE - 264)) | (1 << (tsqlParser.FORCED - 264)) | (1 << (tsqlParser.FORWARD_ONLY - 264)) | (1 << (tsqlParser.FULLSCAN - 264)) | (1 << (tsqlParser.GLOBAL - 264)) | (1 << (tsqlParser.GO - 264)) | (1 << (tsqlParser.GROUPING - 264)) | (1 << (tsqlParser.GROUPING_ID - 264)) | (1 << (tsqlParser.HASH - 264)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 264)) | (1 << (tsqlParser.IMPERSONATE - 264)) | (1 << (tsqlParser.INPUT - 264)) | (1 << (tsqlParser.INSENSITIVE - 264)) | (1 << (tsqlParser.INSERTED - 264)) | (1 << (tsqlParser.ISOLATION - 264)) | (1 << (tsqlParser.KEEP - 264)) | (1 << (tsqlParser.KEEPFIXED - 264)) | (1 << (tsqlParser.KEYSET - 264)) | (1 << (tsqlParser.LAST - 264)) | (1 << (tsqlParser.LEVEL - 264)) | (1 << (tsqlParser.LOCAL - 264)) | (1 << (tsqlParser.LOCK_ESCALATION - 264)) | (1 << (tsqlParser.LOGIN - 264)) | (1 << (tsqlParser.LOOP - 264)) | (1 << (tsqlParser.MARK - 264)) | (1 << (tsqlParser.MAX - 264)) | (1 << (tsqlParser.MAXDOP - 264)) | (1 << (tsqlParser.MAXRECURSION - 264)) | (1 << (tsqlParser.MIN - 264)) | (1 << (tsqlParser.MODIFY - 264)) | (1 << (tsqlParser.NAME - 264)) | (1 << (tsqlParser.NEXT - 264)) | (1 << (tsqlParser.NOCOUNT - 264)) | (1 << (tsqlParser.NOEXPAND - 264)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (tsqlParser.NORECOMPUTE - 329)) | (1 << (tsqlParser.NTILE - 329)) | (1 << (tsqlParser.NUMBER - 329)) | (1 << (tsqlParser.OFFSET - 329)) | (1 << (tsqlParser.ONLINE - 329)) | (1 << (tsqlParser.ONLY - 329)) | (1 << (tsqlParser.OPTIMISTIC - 329)) | (1 << (tsqlParser.OPTIMIZE - 329)) | (1 << (tsqlParser.OUT - 329)) | (1 << (tsqlParser.OUTPUT - 329)) | (1 << (tsqlParser.OWNER - 329)) | (1 << (tsqlParser.PARAMETERIZATION - 329)) | (1 << (tsqlParser.PARTITION - 329)) | (1 << (tsqlParser.PATH - 329)) | (1 << (tsqlParser.PRECEDING - 329)) | (1 << (tsqlParser.PRIOR - 329)) | (1 << (tsqlParser.PRIVILEGES - 329)) | (1 << (tsqlParser.RANGE - 329)) | (1 << (tsqlParser.RANK - 329)) | (1 << (tsqlParser.READONLY - 329)) | (1 << (tsqlParser.READ_ONLY - 329)) | (1 << (tsqlParser.RECOMPILE - 329)) | (1 << (tsqlParser.RELATIVE - 329)) | (1 << (tsqlParser.REMOTE - 329)) | (1 << (tsqlParser.REPEATABLE - 329)) | (1 << (tsqlParser.ROBUST - 329)) | (1 << (tsqlParser.ROOT - 329)) | (1 << (tsqlParser.ROW - 329)) | (1 << (tsqlParser.ROWGUID - 329)) | (1 << (tsqlParser.ROWS - 329)) | (1 << (tsqlParser.ROW_NUMBER - 329)) | (1 << (tsqlParser.SAMPLE - 329)) | (1 << (tsqlParser.SCHEMABINDING - 329)) | (1 << (tsqlParser.SCROLL - 329)) | (1 << (tsqlParser.SCROLL_LOCKS - 329)) | (1 << (tsqlParser.SELF - 329)) | (1 << (tsqlParser.SERIALIZABLE - 329)) | (1 << (tsqlParser.SIMPLE - 329)) | (1 << (tsqlParser.SIZE - 329)) | (1 << (tsqlParser.SNAPSHOT - 329)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 329)) | (1 << (tsqlParser.STATIC - 329)) | (1 << (tsqlParser.STATS_STREAM - 329)) | (1 << (tsqlParser.STDEV - 329)) | (1 << (tsqlParser.STDEVP - 329)) | (1 << (tsqlParser.SUM - 329)) | (1 << (tsqlParser.TEXTIMAGE_ON - 329)) | (1 << (tsqlParser.THROW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)) | (1 << (tsqlParser.LR_BRACKET - 393)) | (1 << (tsqlParser.SEMI - 393)))) != 0):
                    self.state = 510
                    localctx.try_clauses = self.sql_clauses()


                self.state = 513
                self.match(tsqlParser.END)
                self.state = 514
                self.match(tsqlParser.TRY)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SEMI:
                    self.state = 515
                    self.match(tsqlParser.SEMI)


                self.state = 518
                self.match(tsqlParser.BEGIN)
                self.state = 519
                self.match(tsqlParser.CATCH)
                self.state = 521
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 520
                    self.match(tsqlParser.SEMI)


                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ALTER) | (1 << tsqlParser.BEGIN) | (1 << tsqlParser.BREAK) | (1 << tsqlParser.CALLED) | (1 << tsqlParser.CLOSE) | (1 << tsqlParser.COMMIT) | (1 << tsqlParser.CONTINUE) | (1 << tsqlParser.CREATE) | (1 << tsqlParser.DATA_COMPRESSION) | (1 << tsqlParser.DBCC) | (1 << tsqlParser.DEALLOCATE) | (1 << tsqlParser.DECLARE) | (1 << tsqlParser.DELETE) | (1 << tsqlParser.DROP))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (tsqlParser.EVENTDATA - 65)) | (1 << (tsqlParser.EXECUTE - 65)) | (1 << (tsqlParser.FETCH - 65)) | (1 << (tsqlParser.FILLFACTOR - 65)) | (1 << (tsqlParser.FORCESEEK - 65)) | (1 << (tsqlParser.GOTO - 65)) | (1 << (tsqlParser.GRANT - 65)) | (1 << (tsqlParser.IF - 65)) | (1 << (tsqlParser.INSERT - 65)) | (1 << (tsqlParser.MERGE - 65)) | (1 << (tsqlParser.OPEN - 65)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PRINT - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAISERROR - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.REVERT - 131)) | (1 << (tsqlParser.ROLLBACK - 131)) | (1 << (tsqlParser.SAVE - 131)) | (1 << (tsqlParser.SELECT - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SET - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)) | (1 << (tsqlParser.UPDATE - 131)) | (1 << (tsqlParser.USE - 131)))) != 0) or ((((_la - 199)) & ~0x3f) == 0 and ((1 << (_la - 199)) & ((1 << (tsqlParser.WAITFOR - 199)) | (1 << (tsqlParser.WHILE - 199)) | (1 << (tsqlParser.WITH - 199)) | (1 << (tsqlParser.ABSOLUTE - 199)) | (1 << (tsqlParser.APPLY - 199)) | (1 << (tsqlParser.AUTO - 199)) | (1 << (tsqlParser.AVG - 199)) | (1 << (tsqlParser.BASE64 - 199)) | (1 << (tsqlParser.CALLER - 199)) | (1 << (tsqlParser.CAST - 199)) | (1 << (tsqlParser.CATCH - 199)) | (1 << (tsqlParser.CHECKSUM_AGG - 199)) | (1 << (tsqlParser.COMMITTED - 199)) | (1 << (tsqlParser.CONCAT - 199)) | (1 << (tsqlParser.CONTROL - 199)) | (1 << (tsqlParser.COOKIE - 199)) | (1 << (tsqlParser.COUNT - 199)) | (1 << (tsqlParser.COUNT_BIG - 199)) | (1 << (tsqlParser.DELAY - 199)) | (1 << (tsqlParser.DELETED - 199)) | (1 << (tsqlParser.DENSE_RANK - 199)) | (1 << (tsqlParser.DISABLE - 199)))) != 0) or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (tsqlParser.DYNAMIC - 264)) | (1 << (tsqlParser.ENCRYPTION - 264)) | (1 << (tsqlParser.EXPAND - 264)) | (1 << (tsqlParser.FAST - 264)) | (1 << (tsqlParser.FAST_FORWARD - 264)) | (1 << (tsqlParser.FIRST - 264)) | (1 << (tsqlParser.FOLLOWING - 264)) | (1 << (tsqlParser.FORCE - 264)) | (1 << (tsqlParser.FORCED - 264)) | (1 << (tsqlParser.FORWARD_ONLY - 264)) | (1 << (tsqlParser.FULLSCAN - 264)) | (1 << (tsqlParser.GLOBAL - 264)) | (1 << (tsqlParser.GO - 264)) | (1 << (tsqlParser.GROUPING - 264)) | (1 << (tsqlParser.GROUPING_ID - 264)) | (1 << (tsqlParser.HASH - 264)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 264)) | (1 << (tsqlParser.IMPERSONATE - 264)) | (1 << (tsqlParser.INPUT - 264)) | (1 << (tsqlParser.INSENSITIVE - 264)) | (1 << (tsqlParser.INSERTED - 264)) | (1 << (tsqlParser.ISOLATION - 264)) | (1 << (tsqlParser.KEEP - 264)) | (1 << (tsqlParser.KEEPFIXED - 264)) | (1 << (tsqlParser.KEYSET - 264)) | (1 << (tsqlParser.LAST - 264)) | (1 << (tsqlParser.LEVEL - 264)) | (1 << (tsqlParser.LOCAL - 264)) | (1 << (tsqlParser.LOCK_ESCALATION - 264)) | (1 << (tsqlParser.LOGIN - 264)) | (1 << (tsqlParser.LOOP - 264)) | (1 << (tsqlParser.MARK - 264)) | (1 << (tsqlParser.MAX - 264)) | (1 << (tsqlParser.MAXDOP - 264)) | (1 << (tsqlParser.MAXRECURSION - 264)) | (1 << (tsqlParser.MIN - 264)) | (1 << (tsqlParser.MODIFY - 264)) | (1 << (tsqlParser.NAME - 264)) | (1 << (tsqlParser.NEXT - 264)) | (1 << (tsqlParser.NOCOUNT - 264)) | (1 << (tsqlParser.NOEXPAND - 264)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (tsqlParser.NORECOMPUTE - 329)) | (1 << (tsqlParser.NTILE - 329)) | (1 << (tsqlParser.NUMBER - 329)) | (1 << (tsqlParser.OFFSET - 329)) | (1 << (tsqlParser.ONLINE - 329)) | (1 << (tsqlParser.ONLY - 329)) | (1 << (tsqlParser.OPTIMISTIC - 329)) | (1 << (tsqlParser.OPTIMIZE - 329)) | (1 << (tsqlParser.OUT - 329)) | (1 << (tsqlParser.OUTPUT - 329)) | (1 << (tsqlParser.OWNER - 329)) | (1 << (tsqlParser.PARAMETERIZATION - 329)) | (1 << (tsqlParser.PARTITION - 329)) | (1 << (tsqlParser.PATH - 329)) | (1 << (tsqlParser.PRECEDING - 329)) | (1 << (tsqlParser.PRIOR - 329)) | (1 << (tsqlParser.PRIVILEGES - 329)) | (1 << (tsqlParser.RANGE - 329)) | (1 << (tsqlParser.RANK - 329)) | (1 << (tsqlParser.READONLY - 329)) | (1 << (tsqlParser.READ_ONLY - 329)) | (1 << (tsqlParser.RECOMPILE - 329)) | (1 << (tsqlParser.RELATIVE - 329)) | (1 << (tsqlParser.REMOTE - 329)) | (1 << (tsqlParser.REPEATABLE - 329)) | (1 << (tsqlParser.ROBUST - 329)) | (1 << (tsqlParser.ROOT - 329)) | (1 << (tsqlParser.ROW - 329)) | (1 << (tsqlParser.ROWGUID - 329)) | (1 << (tsqlParser.ROWS - 329)) | (1 << (tsqlParser.ROW_NUMBER - 329)) | (1 << (tsqlParser.SAMPLE - 329)) | (1 << (tsqlParser.SCHEMABINDING - 329)) | (1 << (tsqlParser.SCROLL - 329)) | (1 << (tsqlParser.SCROLL_LOCKS - 329)) | (1 << (tsqlParser.SELF - 329)) | (1 << (tsqlParser.SERIALIZABLE - 329)) | (1 << (tsqlParser.SIMPLE - 329)) | (1 << (tsqlParser.SIZE - 329)) | (1 << (tsqlParser.SNAPSHOT - 329)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 329)) | (1 << (tsqlParser.STATIC - 329)) | (1 << (tsqlParser.STATS_STREAM - 329)) | (1 << (tsqlParser.STDEV - 329)) | (1 << (tsqlParser.STDEVP - 329)) | (1 << (tsqlParser.SUM - 329)) | (1 << (tsqlParser.TEXTIMAGE_ON - 329)) | (1 << (tsqlParser.THROW - 329)))) != 0) or ((((_la - 393)) & ~0x3f) == 0 and ((1 << (_la - 393)) & ((1 << (tsqlParser.TIES - 393)) | (1 << (tsqlParser.TIME - 393)) | (1 << (tsqlParser.TRY - 393)) | (1 << (tsqlParser.TYPE - 393)) | (1 << (tsqlParser.TYPE_WARNING - 393)) | (1 << (tsqlParser.UNBOUNDED - 393)) | (1 << (tsqlParser.UNCOMMITTED - 393)) | (1 << (tsqlParser.UNKNOWN - 393)) | (1 << (tsqlParser.USING - 393)) | (1 << (tsqlParser.VAR - 393)) | (1 << (tsqlParser.VARP - 393)) | (1 << (tsqlParser.VIEWS - 393)) | (1 << (tsqlParser.VIEW_METADATA - 393)) | (1 << (tsqlParser.WORK - 393)) | (1 << (tsqlParser.XML - 393)) | (1 << (tsqlParser.XMLNAMESPACES - 393)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 393)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 393)) | (1 << (tsqlParser.ID - 393)) | (1 << (tsqlParser.LR_BRACKET - 393)) | (1 << (tsqlParser.SEMI - 393)))) != 0):
                    self.state = 523
                    localctx.catch_clauses = self.sql_clauses()


                self.state = 526
                self.match(tsqlParser.END)
                self.state = 527
                self.match(tsqlParser.CATCH)
                self.state = 529
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 528
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 10:
                localctx = tsqlParser.Waitfor_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 531
                self.match(tsqlParser.WAITFOR)
                self.state = 532
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DELAY or _la==tsqlParser.TIME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 533
                self.expression(0)
                self.state = 535
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                if la_ == 1:
                    self.state = 534
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 11:
                localctx = tsqlParser.While_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 537
                self.match(tsqlParser.WHILE)
                self.state = 538
                self.search_condition()
                self.state = 548
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                if la_ == 1:
                    self.state = 539
                    self.sql_clause()
                    pass

                elif la_ == 2:
                    self.state = 540
                    self.match(tsqlParser.BREAK)
                    self.state = 542
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 541
                        self.match(tsqlParser.SEMI)


                    pass

                elif la_ == 3:
                    self.state = 544
                    self.match(tsqlParser.CONTINUE)
                    self.state = 546
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                    if la_ == 1:
                        self.state = 545
                        self.match(tsqlParser.SEMI)


                    pass


                pass

            elif la_ == 12:
                localctx = tsqlParser.Print_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 550
                self.match(tsqlParser.PRINT)
                self.state = 551
                self.expression(0)
                self.state = 553
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 552
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 13:
                localctx = tsqlParser.Raiseerror_statementContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 555
                self.match(tsqlParser.RAISERROR)
                self.state = 556
                self.match(tsqlParser.LR_BRACKET)
                self.state = 557
                localctx.msg = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 420)) & ~0x3f) == 0 and ((1 << (_la - 420)) & ((1 << (tsqlParser.LOCAL_ID - 420)) | (1 << (tsqlParser.DECIMAL - 420)) | (1 << (tsqlParser.STRING - 420)))) != 0)):
                    localctx.msg = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 558
                self.match(tsqlParser.COMMA)
                self.state = 559
                localctx.severity = self.constant_LOCAL_ID()
                self.state = 560
                self.match(tsqlParser.COMMA)
                self.state = 561
                localctx.state = self.constant_LOCAL_ID()
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 562
                    self.match(tsqlParser.COMMA)
                    self.state = 563
                    self.constant_LOCAL_ID()
                    self.state = 568
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 569
                self.match(tsqlParser.RR_BRACKET)
                self.state = 571
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 570
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Empty_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_empty_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty_statement" ):
                listener.enterEmpty_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty_statement" ):
                listener.exitEmpty_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty_statement" ):
                return visitor.visitEmpty_statement(self)
            else:
                return visitor.visitChildren(self)




    def empty_statement(self):

        localctx = tsqlParser.Empty_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_empty_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(tsqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Another_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declare_statement(self):
            return self.getTypedRuleContext(tsqlParser.Declare_statementContext,0)


        def cursor_statement(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_statementContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def security_statement(self):
            return self.getTypedRuleContext(tsqlParser.Security_statementContext,0)


        def set_statement(self):
            return self.getTypedRuleContext(tsqlParser.Set_statementContext,0)


        def transaction_statement(self):
            return self.getTypedRuleContext(tsqlParser.Transaction_statementContext,0)


        def use_statement(self):
            return self.getTypedRuleContext(tsqlParser.Use_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_another_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnother_statement" ):
                listener.enterAnother_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnother_statement" ):
                listener.exitAnother_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnother_statement" ):
                return visitor.visitAnother_statement(self)
            else:
                return visitor.visitChildren(self)




    def another_statement(self):

        localctx = tsqlParser.Another_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_another_statement)
        try:
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.declare_statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.cursor_statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.execute_statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 580
                self.security_statement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 581
                self.set_statement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 582
                self.transaction_statement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 583
                self.use_statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def USING(self):
            return self.getToken(tsqlParser.USING, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WHEN)
            else:
                return self.getToken(tsqlParser.WHEN, i)

        def MATCHED(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.MATCHED)
            else:
                return self.getToken(tsqlParser.MATCHED, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.THEN)
            else:
                return self.getToken(tsqlParser.THEN, i)

        def merge_matched(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Merge_matchedContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Merge_matchedContext,i)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.NOT)
            else:
                return self.getToken(tsqlParser.NOT, i)

        def merge_not_matched(self):
            return self.getTypedRuleContext(tsqlParser.Merge_not_matchedContext,0)


        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.BY)
            else:
                return self.getToken(tsqlParser.BY, i)

        def SOURCE(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.SOURCE)
            else:
                return self.getToken(tsqlParser.SOURCE, i)

        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.AND)
            else:
                return self.getToken(tsqlParser.AND, i)

        def TARGET(self):
            return self.getToken(tsqlParser.TARGET, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_merge_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_statement" ):
                listener.enterMerge_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_statement" ):
                listener.exitMerge_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_statement" ):
                return visitor.visitMerge_statement(self)
            else:
                return visitor.visitChildren(self)




    def merge_statement(self):

        localctx = tsqlParser.Merge_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_merge_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 586
                self.with_expression()


            self.state = 589
            self.match(tsqlParser.MERGE)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 590
                self.match(tsqlParser.TOP)
                self.state = 591
                self.match(tsqlParser.LR_BRACKET)
                self.state = 592
                self.expression(0)
                self.state = 593
                self.match(tsqlParser.RR_BRACKET)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 594
                    self.match(tsqlParser.PERCENT)




            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 599
                self.match(tsqlParser.INTO)


            self.state = 602
            self.ddl_object()
            self.state = 604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 603
                self.insert_with_table_hints()


            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS or _la==tsqlParser.ID:
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 606
                    self.match(tsqlParser.AS)


                self.state = 609
                self.match(tsqlParser.ID)


            self.state = 612
            self.match(tsqlParser.USING)
            self.state = 613
            self.table_sources()
            self.state = 614
            self.match(tsqlParser.ON)
            self.state = 615
            self.search_condition()
            self.state = 626
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 616
                    self.match(tsqlParser.WHEN)
                    self.state = 617
                    self.match(tsqlParser.MATCHED)
                    self.state = 620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AND:
                        self.state = 618
                        self.match(tsqlParser.AND)
                        self.state = 619
                        self.search_condition()


                    self.state = 622
                    self.match(tsqlParser.THEN)
                    self.state = 623
                    self.merge_matched() 
                self.state = 628
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 629
                self.match(tsqlParser.WHEN)
                self.state = 630
                self.match(tsqlParser.NOT)
                self.state = 631
                self.match(tsqlParser.MATCHED)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.BY:
                    self.state = 632
                    self.match(tsqlParser.BY)
                    self.state = 633
                    self.match(tsqlParser.TARGET)


                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AND:
                    self.state = 636
                    self.match(tsqlParser.AND)
                    self.state = 637
                    self.search_condition()


                self.state = 640
                self.match(tsqlParser.THEN)
                self.state = 641
                self.merge_not_matched()


            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.WHEN:
                self.state = 644
                self.match(tsqlParser.WHEN)
                self.state = 645
                self.match(tsqlParser.NOT)
                self.state = 646
                self.match(tsqlParser.MATCHED)
                self.state = 647
                self.match(tsqlParser.BY)
                self.state = 648
                self.match(tsqlParser.SOURCE)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AND:
                    self.state = 649
                    self.match(tsqlParser.AND)
                    self.state = 650
                    self.search_condition()


                self.state = 653
                self.match(tsqlParser.THEN)
                self.state = 654
                self.merge_matched()
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OUTPUT:
                self.state = 660
                self.output_clause()


            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 663
                self.option_clause()


            self.state = 666
            self.match(tsqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_matchedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Update_elemContext,i)


        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_merge_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_matched" ):
                listener.enterMerge_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_matched" ):
                listener.exitMerge_matched(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_matched" ):
                return visitor.visitMerge_matched(self)
            else:
                return visitor.visitChildren(self)




    def merge_matched(self):

        localctx = tsqlParser.Merge_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_merge_matched)
        self._la = 0 # Token type
        try:
            self.state = 679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.match(tsqlParser.UPDATE)
                self.state = 669
                self.match(tsqlParser.SET)
                self.state = 670
                self.update_elem()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 671
                    self.match(tsqlParser.COMMA)
                    self.state = 672
                    self.update_elem()
                    self.state = 677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [tsqlParser.DELETE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 678
                self.match(tsqlParser.DELETE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Merge_not_matchedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_merge_not_matched

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMerge_not_matched" ):
                listener.enterMerge_not_matched(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMerge_not_matched" ):
                listener.exitMerge_not_matched(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMerge_not_matched" ):
                return visitor.visitMerge_not_matched(self)
            else:
                return visitor.visitChildren(self)




    def merge_not_matched(self):

        localctx = tsqlParser.Merge_not_matchedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_merge_not_matched)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(tsqlParser.INSERT)
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 682
                self.match(tsqlParser.LR_BRACKET)
                self.state = 683
                self.column_name_list()
                self.state = 684
                self.match(tsqlParser.RR_BRACKET)


            self.state = 691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.VALUES]:
                self.state = 688
                self.table_value_constructor()
                pass
            elif token in [tsqlParser.DEFAULT]:
                self.state = 689
                self.match(tsqlParser.DEFAULT)
                self.state = 690
                self.match(tsqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def delete_statement_from(self):
            return self.getTypedRuleContext(tsqlParser.Delete_statement_fromContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FROM)
            else:
                return self.getToken(tsqlParser.FROM, i)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement" ):
                listener.enterDelete_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement" ):
                listener.exitDelete_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement" ):
                return visitor.visitDelete_statement(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement(self):

        localctx = tsqlParser.Delete_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_delete_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 693
                self.with_expression()


            self.state = 696
            self.match(tsqlParser.DELETE)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 697
                self.match(tsqlParser.TOP)
                self.state = 698
                self.match(tsqlParser.LR_BRACKET)
                self.state = 699
                self.expression(0)
                self.state = 700
                self.match(tsqlParser.RR_BRACKET)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 701
                    self.match(tsqlParser.PERCENT)




            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 706
                self.match(tsqlParser.FROM)


            self.state = 709
            self.delete_statement_from()
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 710
                self.insert_with_table_hints()


            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 713
                self.output_clause()


            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 716
                self.match(tsqlParser.FROM)
                self.state = 717
                self.table_sources()


            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 720
                self.match(tsqlParser.WHERE)
                self.state = 731
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CALLED, tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DATA_COMPRESSION, tsqlParser.DEFAULT, tsqlParser.EVENTDATA, tsqlParser.EXISTS, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NOT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.RIGHT, tsqlParser.SERVER, tsqlParser.SESSION_USER, tsqlParser.SOURCE, tsqlParser.SYSTEM_USER, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.GETDATE, tsqlParser.GETUTCDATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 721
                    self.search_condition()
                    pass
                elif token in [tsqlParser.CURRENT]:
                    self.state = 722
                    self.match(tsqlParser.CURRENT)
                    self.state = 723
                    self.match(tsqlParser.OF)
                    self.state = 729
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        self.state = 725
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                        if la_ == 1:
                            self.state = 724
                            self.match(tsqlParser.GLOBAL)


                        self.state = 727
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 728
                        localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 735
                self.for_clause()


            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 738
                self.option_clause()


            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 741
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_statement_fromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.table_var = None # Token

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delete_statement_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_statement_from" ):
                listener.enterDelete_statement_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_statement_from" ):
                listener.exitDelete_statement_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_statement_from" ):
                return visitor.visitDelete_statement_from(self)
            else:
                return visitor.visitChildren(self)




    def delete_statement_from(self):

        localctx = tsqlParser.Delete_statement_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_delete_statement_from)
        try:
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.table_alias()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.ddl_object()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 746
                self.rowset_function_limited()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 747
                localctx.table_var = self.match(tsqlParser.LOCAL_ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def insert_statement_value(self):
            return self.getTypedRuleContext(tsqlParser.Insert_statement_valueContext,0)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def insert_with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.Insert_with_table_hintsContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement" ):
                listener.enterInsert_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement" ):
                listener.exitInsert_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement" ):
                return visitor.visitInsert_statement(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement(self):

        localctx = tsqlParser.Insert_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_insert_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 750
                self.with_expression()


            self.state = 753
            self.match(tsqlParser.INSERT)
            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 754
                self.match(tsqlParser.TOP)
                self.state = 755
                self.match(tsqlParser.LR_BRACKET)
                self.state = 756
                self.expression(0)
                self.state = 757
                self.match(tsqlParser.RR_BRACKET)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 758
                    self.match(tsqlParser.PERCENT)




            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 763
                self.match(tsqlParser.INTO)


            self.state = 768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 766
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 767
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 770
                self.insert_with_table_hints()


            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 773
                self.match(tsqlParser.LR_BRACKET)
                self.state = 774
                self.column_name_list()
                self.state = 775
                self.match(tsqlParser.RR_BRACKET)


            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OUTPUT:
                self.state = 779
                self.output_clause()


            self.state = 782
            self.insert_statement_value()
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 783
                self.for_clause()


            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 786
                self.option_clause()


            self.state = 790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 789
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_statement_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_value_constructor(self):
            return self.getTypedRuleContext(tsqlParser.Table_value_constructorContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def execute_statement(self):
            return self.getTypedRuleContext(tsqlParser.Execute_statementContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_insert_statement_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_statement_value" ):
                listener.enterInsert_statement_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_statement_value" ):
                listener.exitInsert_statement_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_statement_value" ):
                return visitor.visitInsert_statement_value(self)
            else:
                return visitor.visitChildren(self)




    def insert_statement_value(self):

        localctx = tsqlParser.Insert_statement_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_insert_statement_value)
        try:
            self.state = 797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.VALUES]:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.table_value_constructor()
                pass
            elif token in [tsqlParser.SELECT, tsqlParser.WITH, tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 793
                self.derived_table()
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 794
                self.execute_statement()
                pass
            elif token in [tsqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 795
                self.match(tsqlParser.DEFAULT)
                self.state = 796
                self.match(tsqlParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_statement" ):
                listener.enterSelect_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_statement" ):
                listener.exitSelect_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_statement" ):
                return visitor.visitSelect_statement(self)
            else:
                return visitor.visitChildren(self)




    def select_statement(self):

        localctx = tsqlParser.Select_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_select_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 799
                self.with_expression()


            self.state = 802
            self.query_expression()
            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 803
                self.order_by_clause()


            self.state = 807
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 806
                self.for_clause()


            self.state = 810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 809
                self.option_clause()


            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 812
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cursor_var = None # Token

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def update_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Update_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Update_elemContext,i)


        def ddl_object(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_objectContext,0)


        def rowset_function_limited(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_function_limitedContext,0)


        def with_expression(self):
            return self.getTypedRuleContext(tsqlParser.With_expressionContext,0)


        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def output_clause(self):
            return self.getTypedRuleContext(tsqlParser.Output_clauseContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def for_clause(self):
            return self.getTypedRuleContext(tsqlParser.For_clauseContext,0)


        def option_clause(self):
            return self.getTypedRuleContext(tsqlParser.Option_clauseContext,0)


        def search_condition_list(self):
            return self.getTypedRuleContext(tsqlParser.Search_condition_listContext,0)


        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_update_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_statement" ):
                listener.enterUpdate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_statement" ):
                listener.exitUpdate_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_statement" ):
                return visitor.visitUpdate_statement(self)
            else:
                return visitor.visitChildren(self)




    def update_statement(self):

        localctx = tsqlParser.Update_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_update_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 815
                self.with_expression()


            self.state = 818
            self.match(tsqlParser.UPDATE)
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 819
                self.match(tsqlParser.TOP)
                self.state = 820
                self.match(tsqlParser.LR_BRACKET)
                self.state = 821
                self.expression(0)
                self.state = 822
                self.match(tsqlParser.RR_BRACKET)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PERCENT:
                    self.state = 823
                    self.match(tsqlParser.PERCENT)




            self.state = 830
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.ID]:
                self.state = 828
                self.ddl_object()
                pass
            elif token in [tsqlParser.OPENDATASOURCE, tsqlParser.OPENQUERY]:
                self.state = 829
                self.rowset_function_limited()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH or _la==tsqlParser.LR_BRACKET:
                self.state = 832
                self.with_table_hints()


            self.state = 835
            self.match(tsqlParser.SET)
            self.state = 836
            self.update_elem()
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 837
                self.match(tsqlParser.COMMA)
                self.state = 838
                self.update_elem()
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 844
                self.output_clause()


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 847
                self.match(tsqlParser.FROM)
                self.state = 848
                self.table_sources()


            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 851
                self.match(tsqlParser.WHERE)
                self.state = 862
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CALLED, tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DATA_COMPRESSION, tsqlParser.DEFAULT, tsqlParser.EVENTDATA, tsqlParser.EXISTS, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NOT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.RIGHT, tsqlParser.SERVER, tsqlParser.SESSION_USER, tsqlParser.SOURCE, tsqlParser.SYSTEM_USER, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.GETDATE, tsqlParser.GETUTCDATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 852
                    self.search_condition_list()
                    pass
                elif token in [tsqlParser.CURRENT]:
                    self.state = 853
                    self.match(tsqlParser.CURRENT)
                    self.state = 854
                    self.match(tsqlParser.OF)
                    self.state = 860
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        self.state = 856
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                        if la_ == 1:
                            self.state = 855
                            self.match(tsqlParser.GLOBAL)


                        self.state = 858
                        self.cursor_name()
                        pass

                    elif la_ == 2:
                        self.state = 859
                        localctx.cursor_var = self.match(tsqlParser.LOCAL_ID)
                        pass


                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 866
                self.for_clause()


            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.OPTION:
                self.state = 869
                self.option_clause()


            self.state = 873
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 872
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def output_dml_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Output_dml_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Output_dml_list_elemContext,i)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_output_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_clause" ):
                listener.enterOutput_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_clause" ):
                listener.exitOutput_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_clause" ):
                return visitor.visitOutput_clause(self)
            else:
                return visitor.visitChildren(self)




    def output_clause(self):

        localctx = tsqlParser.Output_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_output_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(tsqlParser.OUTPUT)
            self.state = 876
            self.output_dml_list_elem()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 877
                self.match(tsqlParser.COMMA)
                self.state = 878
                self.output_dml_list_elem()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 884
                self.match(tsqlParser.INTO)
                self.state = 887
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID]:
                    self.state = 885
                    self.match(tsqlParser.LOCAL_ID)
                    pass
                elif token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 886
                    self.table_name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 893
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 889
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 890
                    self.column_name_list()
                    self.state = 891
                    self.match(tsqlParser.RR_BRACKET)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_dml_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def output_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Output_column_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_dml_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_dml_list_elem" ):
                listener.enterOutput_dml_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_dml_list_elem" ):
                listener.exitOutput_dml_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_dml_list_elem" ):
                return visitor.visitOutput_dml_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def output_dml_list_elem(self):

        localctx = tsqlParser.Output_dml_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_output_dml_list_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 897
                self.output_column_name()
                pass

            elif la_ == 2:
                self.state = 898
                self.expression(0)
                pass


            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 901
                    self.match(tsqlParser.AS)


                self.state = 904
                self.column_alias()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def DOLLAR_ACTION(self):
            return self.getToken(tsqlParser.DOLLAR_ACTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_output_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_column_name" ):
                listener.enterOutput_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_column_name" ):
                listener.exitOutput_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutput_column_name" ):
                return visitor.visitOutput_column_name(self)
            else:
                return visitor.visitChildren(self)




    def output_column_name(self):

        localctx = tsqlParser.Output_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_output_column_name)
        try:
            self.state = 918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 907
                    self.match(tsqlParser.DELETED)
                    pass

                elif la_ == 2:
                    self.state = 908
                    self.match(tsqlParser.INSERTED)
                    pass

                elif la_ == 3:
                    self.state = 909
                    self.table_name()
                    pass


                self.state = 912
                self.match(tsqlParser.DOT)
                self.state = 915
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 913
                    self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 914
                    self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DOLLAR_ACTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                self.match(tsqlParser.DOLLAR_ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.collation_name = None # Id_Context

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def database_file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_file_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_file_specContext,i)


        def LOG(self):
            return self.getToken(tsqlParser.LOG, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def create_database_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Create_database_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Create_database_optionContext,i)


        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database" ):
                listener.enterCreate_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database" ):
                listener.exitCreate_database(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database" ):
                return visitor.visitCreate_database(self)
            else:
                return visitor.visitChildren(self)




    def create_database(self):

        localctx = tsqlParser.Create_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_create_database)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(tsqlParser.CREATE)
            self.state = 921
            self.match(tsqlParser.DATABASE)

            self.state = 922
            localctx.database = self.id_()
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINMENT:
                self.state = 923
                self.match(tsqlParser.CONTAINMENT)
                self.state = 924
                self.match(tsqlParser.EQUAL)
                self.state = 925
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 928
                self.match(tsqlParser.ON)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PRIMARY:
                    self.state = 929
                    self.match(tsqlParser.PRIMARY)


                self.state = 932
                self.database_file_spec()
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 933
                    self.match(tsqlParser.COMMA)
                    self.state = 934
                    self.database_file_spec()
                    self.state = 939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOG:
                self.state = 942
                self.match(tsqlParser.LOG)
                self.state = 943
                self.match(tsqlParser.ON)
                self.state = 944
                self.database_file_spec()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 945
                    self.match(tsqlParser.COMMA)
                    self.state = 946
                    self.database_file_spec()
                    self.state = 951
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 954
                self.match(tsqlParser.COLLATE)
                self.state = 955
                localctx.collation_name = self.id_()


            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 958
                self.match(tsqlParser.WITH)
                self.state = 959
                self.create_database_option()
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 960
                    self.match(tsqlParser.COMMA)
                    self.state = 961
                    self.create_database_option()
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list_with_order(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_list_with_orderContext,0)


        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def INCLUDE(self):
            return self.getToken(tsqlParser.INCLUDE, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index" ):
                listener.enterCreate_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index" ):
                listener.exitCreate_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index" ):
                return visitor.visitCreate_index(self)
            else:
                return visitor.visitChildren(self)




    def create_index(self):

        localctx = tsqlParser.Create_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(tsqlParser.CREATE)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.UNIQUE:
                self.state = 970
                self.match(tsqlParser.UNIQUE)


            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                self.state = 973
                self.clustered()


            self.state = 976
            self.match(tsqlParser.INDEX)
            self.state = 977
            self.id_()
            self.state = 978
            self.match(tsqlParser.ON)
            self.state = 979
            self.table_name_with_hint()
            self.state = 980
            self.match(tsqlParser.LR_BRACKET)
            self.state = 981
            self.column_name_list_with_order()
            self.state = 982
            self.match(tsqlParser.RR_BRACKET)
            self.state = 988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INCLUDE:
                self.state = 983
                self.match(tsqlParser.INCLUDE)
                self.state = 984
                self.match(tsqlParser.LR_BRACKET)
                self.state = 985
                self.column_name_list()
                self.state = 986
                self.match(tsqlParser.RR_BRACKET)


            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WHERE:
                self.state = 990
                self.match(tsqlParser.WHERE)
                self.state = 991
                localctx.where = self.search_condition()


            self.state = 995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 994
                self.index_options()


            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 997
                self.match(tsqlParser.ON)
                self.state = 998
                self.id_()


            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.state = 1001
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_or_alter_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def PROC(self):
            return self.getToken(tsqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def procedure_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_optionContext,i)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_procedure" ):
                listener.enterCreate_or_alter_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_procedure" ):
                listener.exitCreate_or_alter_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_or_alter_procedure" ):
                return visitor.visitCreate_or_alter_procedure(self)
            else:
                return visitor.visitChildren(self)




    def create_or_alter_procedure(self):

        localctx = tsqlParser.Create_or_alter_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_or_alter_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALTER or _la==tsqlParser.CREATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1005
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PROC or _la==tsqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1006
            self.func_proc_name()
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 1007
                self.match(tsqlParser.SEMI)
                self.state = 1008
                self.match(tsqlParser.DECIMAL)


            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LOCAL_ID or _la==tsqlParser.LR_BRACKET:
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 1011
                    self.match(tsqlParser.LR_BRACKET)


                self.state = 1014
                self.procedure_param()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1015
                    self.match(tsqlParser.COMMA)
                    self.state = 1016
                    self.procedure_param()
                    self.state = 1021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.RR_BRACKET:
                    self.state = 1022
                    self.match(tsqlParser.RR_BRACKET)




            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1027
                self.match(tsqlParser.WITH)
                self.state = 1028
                self.procedure_option()
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1029
                    self.match(tsqlParser.COMMA)
                    self.state = 1030
                    self.procedure_option()
                    self.state = 1035
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FOR:
                self.state = 1038
                self.match(tsqlParser.FOR)
                self.state = 1039
                self.match(tsqlParser.REPLICATION)


            self.state = 1042
            self.match(tsqlParser.AS)
            self.state = 1043
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_or_alter_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dml_trigger(self):
            return self.getTypedRuleContext(tsqlParser.Dml_triggerContext,0)


        def ddl_trigger(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_triggerContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_trigger" ):
                listener.enterCreate_or_alter_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_trigger" ):
                listener.exitCreate_or_alter_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_or_alter_trigger" ):
                return visitor.visitCreate_or_alter_trigger(self)
            else:
                return visitor.visitChildren(self)




    def create_or_alter_trigger(self):

        localctx = tsqlParser.Create_or_alter_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_create_or_alter_trigger)
        try:
            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1045
                self.dml_trigger()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1046
                self.ddl_trigger()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER(self):
            return self.getToken(tsqlParser.TRIGGER, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def dml_trigger_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Dml_trigger_operationContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Dml_trigger_operationContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def INSTEAD(self):
            return self.getToken(tsqlParser.INSTEAD, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def dml_trigger_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Dml_trigger_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Dml_trigger_optionContext,i)


        def APPEND(self):
            return self.getToken(tsqlParser.APPEND, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_trigger" ):
                listener.enterDml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_trigger" ):
                listener.exitDml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_trigger" ):
                return visitor.visitDml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def dml_trigger(self):

        localctx = tsqlParser.Dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALTER or _la==tsqlParser.CREATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1050
            self.match(tsqlParser.TRIGGER)
            self.state = 1051
            self.simple_name()
            self.state = 1052
            self.match(tsqlParser.ON)
            self.state = 1053
            self.table_name()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1054
                self.match(tsqlParser.WITH)
                self.state = 1055
                self.dml_trigger_option()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1056
                    self.match(tsqlParser.COMMA)
                    self.state = 1057
                    self.dml_trigger_option()
                    self.state = 1062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1069
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FOR]:
                self.state = 1065
                self.match(tsqlParser.FOR)
                pass
            elif token in [tsqlParser.AFTER]:
                self.state = 1066
                self.match(tsqlParser.AFTER)
                pass
            elif token in [tsqlParser.INSTEAD]:
                self.state = 1067
                self.match(tsqlParser.INSTEAD)
                self.state = 1068
                self.match(tsqlParser.OF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1071
            self.dml_trigger_operation()
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1072
                self.match(tsqlParser.COMMA)
                self.state = 1073
                self.dml_trigger_operation()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1079
                self.match(tsqlParser.WITH)
                self.state = 1080
                self.match(tsqlParser.APPEND)


            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 1083
                self.match(tsqlParser.NOT)
                self.state = 1084
                self.match(tsqlParser.FOR)
                self.state = 1085
                self.match(tsqlParser.REPLICATION)


            self.state = 1088
            self.match(tsqlParser.AS)
            self.state = 1089
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_trigger_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dml_trigger_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_trigger_option" ):
                listener.enterDml_trigger_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_trigger_option" ):
                listener.exitDml_trigger_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_trigger_option" ):
                return visitor.visitDml_trigger_option(self)
            else:
                return visitor.visitChildren(self)




    def dml_trigger_option(self):

        localctx = tsqlParser.Dml_trigger_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dml_trigger_option)
        try:
            self.state = 1093
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1091
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1092
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dml_trigger_operationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_dml_trigger_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDml_trigger_operation" ):
                listener.enterDml_trigger_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDml_trigger_operation" ):
                listener.exitDml_trigger_operation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDml_trigger_operation" ):
                return visitor.visitDml_trigger_operation(self)
            else:
                return visitor.visitChildren(self)




    def dml_trigger_operation(self):

        localctx = tsqlParser.Dml_trigger_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dml_trigger_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DELETE or _la==tsqlParser.INSERT or _la==tsqlParser.UPDATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIGGER(self):
            return self.getToken(tsqlParser.TRIGGER, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def ddl_trigger_operation(self):
            return self.getTypedRuleContext(tsqlParser.Ddl_trigger_operationContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clauses(self):
            return self.getTypedRuleContext(tsqlParser.Sql_clausesContext,0)


        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def SERVER(self):
            return self.getToken(tsqlParser.SERVER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def dml_trigger_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Dml_trigger_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Dml_trigger_optionContext,i)


        def dml_trigger_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Dml_trigger_operationContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Dml_trigger_operationContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_trigger" ):
                listener.enterDdl_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_trigger" ):
                listener.exitDdl_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_trigger" ):
                return visitor.visitDdl_trigger(self)
            else:
                return visitor.visitChildren(self)




    def ddl_trigger(self):

        localctx = tsqlParser.Ddl_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_ddl_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1097
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALTER or _la==tsqlParser.CREATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1098
            self.match(tsqlParser.TRIGGER)
            self.state = 1099
            self.simple_name()
            self.state = 1100
            self.match(tsqlParser.ON)
            self.state = 1104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ALL]:
                self.state = 1101
                self.match(tsqlParser.ALL)
                self.state = 1102
                self.match(tsqlParser.SERVER)
                pass
            elif token in [tsqlParser.DATABASE]:
                self.state = 1103
                self.match(tsqlParser.DATABASE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1106
                self.match(tsqlParser.WITH)
                self.state = 1107
                self.dml_trigger_option()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1108
                    self.match(tsqlParser.COMMA)
                    self.state = 1109
                    self.dml_trigger_option()
                    self.state = 1114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1117
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FOR or _la==tsqlParser.AFTER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1118
            self.ddl_trigger_operation()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1119
                self.match(tsqlParser.COMMA)
                self.state = 1120
                self.dml_trigger_operation()
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1126
            self.match(tsqlParser.AS)
            self.state = 1127
            self.sql_clauses()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_trigger_operationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_trigger_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_trigger_operation" ):
                listener.enterDdl_trigger_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_trigger_operation" ):
                listener.exitDdl_trigger_operation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_trigger_operation" ):
                return visitor.visitDdl_trigger_operation(self)
            else:
                return visitor.visitChildren(self)




    def ddl_trigger_operation(self):

        localctx = tsqlParser.Ddl_trigger_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ddl_trigger_operation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.simple_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_or_alter_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(tsqlParser.FUNCTION, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def func_body_returns_select(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_selectContext,0)


        def func_body_returns_table(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_tableContext,0)


        def func_body_returns_scalar(self):
            return self.getTypedRuleContext(tsqlParser.Func_body_returns_scalarContext,0)


        def procedure_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Procedure_paramContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Procedure_paramContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_or_alter_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_or_alter_function" ):
                listener.enterCreate_or_alter_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_or_alter_function" ):
                listener.exitCreate_or_alter_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_or_alter_function" ):
                return visitor.visitCreate_or_alter_function(self)
            else:
                return visitor.visitChildren(self)




    def create_or_alter_function(self):

        localctx = tsqlParser.Create_or_alter_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_create_or_alter_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALTER or _la==tsqlParser.CREATE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1132
            self.match(tsqlParser.FUNCTION)
            self.state = 1133
            self.func_proc_name()
            self.state = 1147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1134
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1135
                self.procedure_param()
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1136
                    self.match(tsqlParser.COMMA)
                    self.state = 1137
                    self.procedure_param()
                    self.state = 1142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1143
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 1145
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1146
                self.match(tsqlParser.RR_BRACKET)
                pass


            self.state = 1152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1149
                self.func_body_returns_select()
                pass

            elif la_ == 2:
                self.state = 1150
                self.func_body_returns_table()
                pass

            elif la_ == 3:
                self.state = 1151
                self.func_body_returns_scalar()
                pass


            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1154
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_body_returns_selectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_select" ):
                listener.enterFunc_body_returns_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_select" ):
                listener.exitFunc_body_returns_select(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body_returns_select" ):
                return visitor.visitFunc_body_returns_select(self)
            else:
                return visitor.visitChildren(self)




    def func_body_returns_select(self):

        localctx = tsqlParser.Func_body_returns_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_func_body_returns_select)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(tsqlParser.RETURNS)
            self.state = 1158
            self.match(tsqlParser.TABLE)
            self.state = 1168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1159
                self.match(tsqlParser.WITH)
                self.state = 1160
                self.function_option()
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1161
                    self.match(tsqlParser.COMMA)
                    self.state = 1162
                    self.function_option()
                    self.state = 1167
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1170
                self.match(tsqlParser.AS)


            self.state = 1173
            self.match(tsqlParser.RETURN)
            self.state = 1174
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_body_returns_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_table" ):
                listener.enterFunc_body_returns_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_table" ):
                listener.exitFunc_body_returns_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body_returns_table" ):
                return visitor.visitFunc_body_returns_table(self)
            else:
                return visitor.visitChildren(self)




    def func_body_returns_table(self):

        localctx = tsqlParser.Func_body_returns_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_func_body_returns_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.match(tsqlParser.RETURNS)
            self.state = 1177
            self.match(tsqlParser.LOCAL_ID)
            self.state = 1178
            self.table_type_definition()
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1179
                self.match(tsqlParser.WITH)
                self.state = 1180
                self.function_option()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1181
                    self.match(tsqlParser.COMMA)
                    self.state = 1182
                    self.function_option()
                    self.state = 1187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1190
                self.match(tsqlParser.AS)


            self.state = 1193
            self.match(tsqlParser.BEGIN)
            self.state = 1197
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1194
                    self.sql_clause() 
                self.state = 1199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1200
            self.match(tsqlParser.RETURN)
            self.state = 1201
            self.match(tsqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_body_returns_scalarContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ret = None # ExpressionContext

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def END(self):
            return self.getToken(tsqlParser.END, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def function_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Function_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Function_optionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def sql_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Sql_clauseContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Sql_clauseContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_body_returns_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_body_returns_scalar" ):
                listener.enterFunc_body_returns_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_body_returns_scalar" ):
                listener.exitFunc_body_returns_scalar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_body_returns_scalar" ):
                return visitor.visitFunc_body_returns_scalar(self)
            else:
                return visitor.visitChildren(self)




    def func_body_returns_scalar(self):

        localctx = tsqlParser.Func_body_returns_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_func_body_returns_scalar)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(tsqlParser.RETURNS)
            self.state = 1204
            self.data_type()
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1205
                self.match(tsqlParser.WITH)
                self.state = 1206
                self.function_option()
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1207
                    self.match(tsqlParser.COMMA)
                    self.state = 1208
                    self.function_option()
                    self.state = 1213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1216
                self.match(tsqlParser.AS)


            self.state = 1219
            self.match(tsqlParser.BEGIN)
            self.state = 1223
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1220
                    self.sql_clause() 
                self.state = 1225
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

            self.state = 1226
            self.match(tsqlParser.RETURN)
            self.state = 1227
            localctx.ret = self.expression(0)
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SEMI:
                self.state = 1228
                self.match(tsqlParser.SEMI)


            self.state = 1231
            self.match(tsqlParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_paramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.default_val = None # Default_valueContext

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def VARYING(self):
            return self.getToken(tsqlParser.VARYING, 0)

        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_param" ):
                listener.enterProcedure_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_param" ):
                listener.exitProcedure_param(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_param" ):
                return visitor.visitProcedure_param(self)
            else:
                return visitor.visitChildren(self)




    def procedure_param(self):

        localctx = tsqlParser.Procedure_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_procedure_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(tsqlParser.LOCAL_ID)
            self.state = 1237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1234
                self.id_()
                self.state = 1235
                self.match(tsqlParser.DOT)


            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 1239
                self.match(tsqlParser.AS)


            self.state = 1242
            self.data_type()
            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.VARYING:
                self.state = 1243
                self.match(tsqlParser.VARYING)


            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 1246
                self.match(tsqlParser.EQUAL)
                self.state = 1247
                localctx.default_val = self.default_value()


            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 340)) & ~0x3f) == 0 and ((1 << (_la - 340)) & ((1 << (tsqlParser.OUT - 340)) | (1 << (tsqlParser.OUTPUT - 340)) | (1 << (tsqlParser.READONLY - 340)))) != 0):
                self.state = 1250
                _la = self._input.LA(1)
                if not(((((_la - 340)) & ~0x3f) == 0 and ((1 << (_la - 340)) & ((1 << (tsqlParser.OUT - 340)) | (1 << (tsqlParser.OUTPUT - 340)) | (1 << (tsqlParser.READONLY - 340)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Procedure_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_procedure_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_option" ):
                listener.enterProcedure_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_option" ):
                listener.exitProcedure_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedure_option" ):
                return visitor.visitProcedure_option(self)
            else:
                return visitor.visitChildren(self)




    def procedure_option(self):

        localctx = tsqlParser.Procedure_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_procedure_option)
        try:
            self.state = 1256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENCRYPTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1253
                self.match(tsqlParser.ENCRYPTION)
                pass
            elif token in [tsqlParser.RECOMPILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1254
                self.match(tsqlParser.RECOMPILE)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1255
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def NULL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.NULL)
            else:
                return self.getToken(tsqlParser.NULL, i)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def INPUT(self):
            return self.getToken(tsqlParser.INPUT, 0)

        def CALLED(self):
            return self.getToken(tsqlParser.CALLED, 0)

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_function_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_option" ):
                listener.enterFunction_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_option" ):
                listener.exitFunction_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_option" ):
                return visitor.visitFunction_option(self)
            else:
                return visitor.visitChildren(self)




    def function_option(self):

        localctx = tsqlParser.Function_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_function_option)
        try:
            self.state = 1268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.RETURNS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1258
                self.match(tsqlParser.RETURNS)
                self.state = 1259
                self.match(tsqlParser.NULL)
                self.state = 1260
                self.match(tsqlParser.ON)
                self.state = 1261
                self.match(tsqlParser.NULL)
                self.state = 1262
                self.match(tsqlParser.INPUT)
                pass
            elif token in [tsqlParser.CALLED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1263
                self.match(tsqlParser.CALLED)
                self.state = 1264
                self.match(tsqlParser.ON)
                self.state = 1265
                self.match(tsqlParser.NULL)
                self.state = 1266
                self.match(tsqlParser.INPUT)
                pass
            elif token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1267
                self.execute_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_statistics" ):
                listener.enterCreate_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_statistics" ):
                listener.exitCreate_statistics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_statistics" ):
                return visitor.visitCreate_statistics(self)
            else:
                return visitor.visitChildren(self)




    def create_statistics(self):

        localctx = tsqlParser.Create_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_create_statistics)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(tsqlParser.CREATE)
            self.state = 1271
            self.match(tsqlParser.STATISTICS)
            self.state = 1272
            self.id_()
            self.state = 1273
            self.match(tsqlParser.ON)
            self.state = 1274
            self.table_name_with_hint()
            self.state = 1275
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1276
            self.column_name_list()
            self.state = 1277
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1278
                self.match(tsqlParser.WITH)
                self.state = 1284
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.FULLSCAN]:
                    self.state = 1279
                    self.match(tsqlParser.FULLSCAN)
                    pass
                elif token in [tsqlParser.SAMPLE]:
                    self.state = 1280
                    self.match(tsqlParser.SAMPLE)
                    self.state = 1281
                    self.match(tsqlParser.DECIMAL)
                    self.state = 1282
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.PERCENT or _la==tsqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [tsqlParser.STATS_STREAM]:
                    self.state = 1283
                    self.match(tsqlParser.STATS_STREAM)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1286
                    self.match(tsqlParser.COMMA)
                    self.state = 1287
                    self.match(tsqlParser.NORECOMPUTE)


                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 1290
                    self.match(tsqlParser.COMMA)
                    self.state = 1291
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 1292
                    self.match(tsqlParser.EQUAL)
                    self.state = 1293
                    self.on_off()




            self.state = 1299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
            if la_ == 1:
                self.state = 1298
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def table_options(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_optionsContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_optionsContext,i)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DEFAULT)
            else:
                return self.getToken(tsqlParser.DEFAULT, i)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table" ):
                listener.enterCreate_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table" ):
                listener.exitCreate_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table" ):
                return visitor.visitCreate_table(self)
            else:
                return visitor.visitChildren(self)




    def create_table(self):

        localctx = tsqlParser.Create_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_create_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.match(tsqlParser.CREATE)
            self.state = 1302
            self.match(tsqlParser.TABLE)
            self.state = 1303
            self.table_name()
            self.state = 1304
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1305
            self.column_def_table_constraints()
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 1306
                self.match(tsqlParser.COMMA)


            self.state = 1309
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1313
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1310
                    self.table_options() 
                self.state = 1315
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

            self.state = 1319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1316
                self.match(tsqlParser.ON)
                self.state = 1317
                self.id_()

            elif la_ == 2:
                self.state = 1318
                self.match(tsqlParser.DEFAULT)


            self.state = 1324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1321
                self.match(tsqlParser.TEXTIMAGE_ON)
                self.state = 1322
                self.id_()

            elif la_ == 2:
                self.state = 1323
                self.match(tsqlParser.DEFAULT)


            self.state = 1327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.state = 1326
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_optionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_options" ):
                listener.enterTable_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_options" ):
                listener.exitTable_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_options" ):
                return visitor.visitTable_options(self)
            else:
                return visitor.visitChildren(self)




    def table_options(self):

        localctx = tsqlParser.Table_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_table_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(tsqlParser.WITH)
            self.state = 1330
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1331
            self.index_option()
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1332
                self.match(tsqlParser.COMMA)
                self.state = 1333
                self.index_option()
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1339
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_option" ):
                listener.enterTable_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_option" ):
                listener.exitTable_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_option" ):
                return visitor.visitTable_option(self)
            else:
                return visitor.visitChildren(self)




    def table_option(self):

        localctx = tsqlParser.Table_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_table_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.simple_id()
            self.state = 1342
            self.match(tsqlParser.EQUAL)
            self.state = 1346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.state = 1343
                self.simple_id()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.state = 1344
                self.on_off()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.state = 1345
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.WITH)
            else:
                return self.getToken(tsqlParser.WITH, i)

        def view_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.View_attributeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.View_attributeContext,i)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view" ):
                listener.enterCreate_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view" ):
                listener.exitCreate_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_view" ):
                return visitor.visitCreate_view(self)
            else:
                return visitor.visitChildren(self)




    def create_view(self):

        localctx = tsqlParser.Create_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_create_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.match(tsqlParser.CREATE)
            self.state = 1349
            self.match(tsqlParser.VIEW)
            self.state = 1350
            self.simple_name()
            self.state = 1355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 1351
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1352
                self.column_name_list()
                self.state = 1353
                self.match(tsqlParser.RR_BRACKET)


            self.state = 1366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 1357
                self.match(tsqlParser.WITH)
                self.state = 1358
                self.view_attribute()
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1359
                    self.match(tsqlParser.COMMA)
                    self.state = 1360
                    self.view_attribute()
                    self.state = 1365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1368
            self.match(tsqlParser.AS)
            self.state = 1369
            self.select_statement()
            self.state = 1373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1370
                self.match(tsqlParser.WITH)
                self.state = 1371
                self.match(tsqlParser.CHECK)
                self.state = 1372
                self.match(tsqlParser.OPTION)


            self.state = 1376
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1375
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_view_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_attribute" ):
                listener.enterView_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_attribute" ):
                listener.exitView_attribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_attribute" ):
                return visitor.visitView_attribute(self)
            else:
                return visitor.visitChildren(self)




    def view_attribute(self):

        localctx = tsqlParser.View_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_view_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ENCRYPTION or _la==tsqlParser.SCHEMABINDING or _la==tsqlParser.VIEW_METADATA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # Id_Context
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ALTER)
            else:
                return self.getToken(tsqlParser.ALTER, i)

        def TABLE(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.TABLE)
            else:
                return self.getToken(tsqlParser.TABLE, i)

        def table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_nameContext,i)


        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def ADD(self):
            return self.getToken(tsqlParser.ADD, 0)

        def column_def_table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,0)


        def COLUMN(self):
            return self.getToken(tsqlParser.COLUMN, 0)

        def column_definition(self):
            return self.getTypedRuleContext(tsqlParser.Column_definitionContext,0)


        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table" ):
                listener.enterAlter_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table" ):
                listener.exitAlter_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table" ):
                return visitor.visitAlter_table(self)
            else:
                return visitor.visitChildren(self)




    def alter_table(self):

        localctx = tsqlParser.Alter_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_alter_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self.match(tsqlParser.ALTER)
            self.state = 1381
            self.match(tsqlParser.TABLE)
            self.state = 1382
            self.table_name()
            self.state = 1416
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.SET]:
                self.state = 1383
                self.match(tsqlParser.SET)
                self.state = 1384
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1385
                self.match(tsqlParser.LOCK_ESCALATION)
                self.state = 1386
                self.match(tsqlParser.EQUAL)
                self.state = 1387
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.AUTO or _la==tsqlParser.DISABLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1388
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.ADD]:
                self.state = 1389
                self.match(tsqlParser.ADD)
                self.state = 1390
                self.column_def_table_constraint()
                pass
            elif token in [tsqlParser.ALTER]:
                self.state = 1391
                self.match(tsqlParser.ALTER)
                self.state = 1392
                self.match(tsqlParser.COLUMN)
                self.state = 1393
                self.column_definition()
                pass
            elif token in [tsqlParser.DROP]:
                self.state = 1394
                self.match(tsqlParser.DROP)
                self.state = 1395
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1396
                localctx.constraint = self.id_()
                pass
            elif token in [tsqlParser.WITH]:
                self.state = 1397
                self.match(tsqlParser.WITH)
                self.state = 1398
                self.match(tsqlParser.CHECK)
                self.state = 1399
                self.match(tsqlParser.ADD)
                self.state = 1400
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1401
                localctx.constraint = self.id_()
                self.state = 1402
                self.match(tsqlParser.FOREIGN)
                self.state = 1403
                self.match(tsqlParser.KEY)
                self.state = 1404
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1405
                localctx.fk = self.column_name_list()
                self.state = 1406
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1407
                self.match(tsqlParser.REFERENCES)
                self.state = 1408
                self.table_name()
                self.state = 1409
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1410
                localctx.pk = self.column_name_list()
                self.state = 1411
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 1413
                self.match(tsqlParser.CHECK)
                self.state = 1414
                self.match(tsqlParser.CONSTRAINT)
                self.state = 1415
                localctx.constraint = self.id_()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1418
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_databaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.new_name = None # Id_Context
            self.collation = None # Id_Context

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def database_optionspec(self):
            return self.getTypedRuleContext(tsqlParser.Database_optionspecContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_alter_database

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database" ):
                listener.enterAlter_database(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database" ):
                listener.exitAlter_database(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_database" ):
                return visitor.visitAlter_database(self)
            else:
                return visitor.visitChildren(self)




    def alter_database(self):

        localctx = tsqlParser.Alter_databaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_alter_database)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            self.match(tsqlParser.ALTER)
            self.state = 1422
            self.match(tsqlParser.DATABASE)
            self.state = 1425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 1423
                localctx.database = self.id_()
                pass
            elif token in [tsqlParser.CURRENT]:
                self.state = 1424
                self.match(tsqlParser.CURRENT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1439
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.MODIFY]:
                self.state = 1427
                self.match(tsqlParser.MODIFY)
                self.state = 1428
                self.match(tsqlParser.NAME)
                self.state = 1429
                self.match(tsqlParser.EQUAL)
                self.state = 1430
                localctx.new_name = self.id_()
                pass
            elif token in [tsqlParser.COLLATE]:
                self.state = 1431
                self.match(tsqlParser.COLLATE)
                self.state = 1432
                localctx.collation = self.id_()
                pass
            elif token in [tsqlParser.SET]:
                self.state = 1433
                self.match(tsqlParser.SET)
                self.state = 1434
                self.database_optionspec()
                self.state = 1437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1435
                    self.match(tsqlParser.WITH)
                    self.state = 1436
                    self.termination()


                pass
            else:
                raise NoViableAltException(self)

            self.state = 1442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1441
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_optionspecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def auto_option(self):
            return self.getTypedRuleContext(tsqlParser.Auto_optionContext,0)


        def change_tracking_option(self):
            return self.getTypedRuleContext(tsqlParser.Change_tracking_optionContext,0)


        def containment_option(self):
            return self.getTypedRuleContext(tsqlParser.Containment_optionContext,0)


        def cursor_option(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_optionContext,0)


        def date_correlation_optimization_option(self):
            return self.getTypedRuleContext(tsqlParser.Date_correlation_optimization_optionContext,0)


        def db_encryption_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_encryption_optionContext,0)


        def db_state_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_state_optionContext,0)


        def db_update_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_update_optionContext,0)


        def db_user_access_option(self):
            return self.getTypedRuleContext(tsqlParser.Db_user_access_optionContext,0)


        def delayed_durability_option(self):
            return self.getTypedRuleContext(tsqlParser.Delayed_durability_optionContext,0)


        def external_access_option(self):
            return self.getTypedRuleContext(tsqlParser.External_access_optionContext,0)


        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self):
            return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,0)


        def HADR_options(self):
            return self.getToken(tsqlParser.HADR_options, 0)

        def mixed_page_allocation_option(self):
            return self.getTypedRuleContext(tsqlParser.Mixed_page_allocation_optionContext,0)


        def parameterization_option(self):
            return self.getTypedRuleContext(tsqlParser.Parameterization_optionContext,0)


        def recovery_option(self):
            return self.getTypedRuleContext(tsqlParser.Recovery_optionContext,0)


        def service_broker_option(self):
            return self.getTypedRuleContext(tsqlParser.Service_broker_optionContext,0)


        def snapshot_option(self):
            return self.getTypedRuleContext(tsqlParser.Snapshot_optionContext,0)


        def sql_option(self):
            return self.getTypedRuleContext(tsqlParser.Sql_optionContext,0)


        def target_recovery_time_option(self):
            return self.getTypedRuleContext(tsqlParser.Target_recovery_time_optionContext,0)


        def termination(self):
            return self.getTypedRuleContext(tsqlParser.TerminationContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_optionspec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_optionspec" ):
                listener.enterDatabase_optionspec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_optionspec" ):
                listener.exitDatabase_optionspec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_optionspec" ):
                return visitor.visitDatabase_optionspec(self)
            else:
                return visitor.visitChildren(self)




    def database_optionspec(self):

        localctx = tsqlParser.Database_optionspecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_database_optionspec)
        try:
            self.state = 1466
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1444
                self.auto_option()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1445
                self.change_tracking_option()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1446
                self.containment_option()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1447
                self.cursor_option()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1448
                self.date_correlation_optimization_option()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1449
                self.db_encryption_option()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1450
                self.db_state_option()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1451
                self.db_update_option()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1452
                self.db_user_access_option()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1453
                self.delayed_durability_option()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1454
                self.external_access_option()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1455
                self.match(tsqlParser.FILESTREAM)
                self.state = 1456
                self.database_filestream_option()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1457
                self.match(tsqlParser.HADR_options)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1458
                self.mixed_page_allocation_option()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1459
                self.parameterization_option()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1460
                self.recovery_option()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1461
                self.service_broker_option()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1462
                self.snapshot_option()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1463
                self.sql_option()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1464
                self.target_recovery_time_option()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1465
                self.termination()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Auto_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLOSE(self):
            return self.getToken(tsqlParser.AUTO_CLOSE, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def AUTO_CREATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_CREATE_STATISTICS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ON)
            else:
                return self.getToken(tsqlParser.ON, i)

        def INCREMENTAL(self):
            return self.getToken(tsqlParser.INCREMENTAL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def AUTO_SHRINK(self):
            return self.getToken(tsqlParser.AUTO_SHRINK, 0)

        def AUTO_UPDATE_STATISTICS(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS, 0)

        def AUTO_UPDATE_STATISTICS_ASYNC(self):
            return self.getToken(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_auto_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuto_option" ):
                listener.enterAuto_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuto_option" ):
                listener.exitAuto_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuto_option" ):
                return visitor.visitAuto_option(self)
            else:
                return visitor.visitChildren(self)




    def auto_option(self):

        localctx = tsqlParser.Auto_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_auto_option)
        self._la = 0 # Token type
        try:
            self.state = 1485
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1468
                self.match(tsqlParser.AUTO_CLOSE)
                self.state = 1469
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_CREATE_STATISTICS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1470
                self.match(tsqlParser.AUTO_CREATE_STATISTICS)
                self.state = 1471
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1472
                self.match(tsqlParser.ON)
                self.state = 1477
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.INCREMENTAL]:
                    self.state = 1473
                    self.match(tsqlParser.INCREMENTAL)
                    self.state = 1474
                    self.match(tsqlParser.EQUAL)
                    self.state = 1475
                    self.match(tsqlParser.ON)
                    pass
                elif token in [tsqlParser.OFF]:
                    self.state = 1476
                    self.match(tsqlParser.OFF)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.AUTO_SHRINK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1479
                self.match(tsqlParser.AUTO_SHRINK)
                self.state = 1480
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1481
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS)
                self.state = 1482
                self.on_off()
                pass
            elif token in [tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1483
                self.match(tsqlParser.AUTO_UPDATE_STATISTICS_ASYNC)
                self.state = 1484
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE_TRACKING(self):
            return self.getToken(tsqlParser.CHANGE_TRACKING, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def change_tracking_option_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Change_tracking_option_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Change_tracking_option_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option" ):
                listener.enterChange_tracking_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option" ):
                listener.exitChange_tracking_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_tracking_option" ):
                return visitor.visitChange_tracking_option(self)
            else:
                return visitor.visitChildren(self)




    def change_tracking_option(self):

        localctx = tsqlParser.Change_tracking_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_change_tracking_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.match(tsqlParser.CHANGE_TRACKING)
            self.state = 1488
            self.match(tsqlParser.EQUAL)
            self.state = 1504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OFF]:
                self.state = 1489
                self.match(tsqlParser.OFF)
                pass
            elif token in [tsqlParser.ON]:
                self.state = 1490
                self.match(tsqlParser.ON)
                self.state = 1501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.AUTO_CLEANUP or _la==tsqlParser.CHANGE_RETENTION:
                    self.state = 1491
                    self.change_tracking_option_list()
                    self.state = 1496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1492
                        self.match(tsqlParser.COMMA)
                        self.state = 1493
                        self.change_tracking_option_list()
                        self.state = 1498
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1503
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tracking_option_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AUTO_CLEANUP(self):
            return self.getToken(tsqlParser.AUTO_CLEANUP, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CHANGE_RETENTION(self):
            return self.getToken(tsqlParser.CHANGE_RETENTION, 0)

        def DAYS(self):
            return self.getToken(tsqlParser.DAYS, 0)

        def HOURS(self):
            return self.getToken(tsqlParser.HOURS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_tracking_option_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_tracking_option_list" ):
                listener.enterChange_tracking_option_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_tracking_option_list" ):
                listener.exitChange_tracking_option_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_tracking_option_list" ):
                return visitor.visitChange_tracking_option_list(self)
            else:
                return visitor.visitChildren(self)




    def change_tracking_option_list(self):

        localctx = tsqlParser.Change_tracking_option_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_change_tracking_option_list)
        self._la = 0 # Token type
        try:
            self.state = 1512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AUTO_CLEANUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1506
                self.match(tsqlParser.AUTO_CLEANUP)
                self.state = 1507
                self.match(tsqlParser.EQUAL)
                self.state = 1508
                self.on_off()
                pass
            elif token in [tsqlParser.CHANGE_RETENTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1509
                self.match(tsqlParser.CHANGE_RETENTION)
                self.state = 1510
                self.match(tsqlParser.EQUAL)
                self.state = 1511
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DAYS or _la==tsqlParser.HOURS or _la==tsqlParser.MINUTES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Containment_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINMENT(self):
            return self.getToken(tsqlParser.CONTAINMENT, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def PARTIAL(self):
            return self.getToken(tsqlParser.PARTIAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_containment_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainment_option" ):
                listener.enterContainment_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainment_option" ):
                listener.exitContainment_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContainment_option" ):
                return visitor.visitContainment_option(self)
            else:
                return visitor.visitChildren(self)




    def containment_option(self):

        localctx = tsqlParser.Containment_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_containment_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(tsqlParser.CONTAINMENT)
            self.state = 1515
            self.match(tsqlParser.EQUAL)
            self.state = 1516
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NONE or _la==tsqlParser.PARTIAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURSOR_CLOSE_ON_COMMIT(self):
            return self.getToken(tsqlParser.CURSOR_CLOSE_ON_COMMIT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def CURSOR_DEFAULT(self):
            return self.getToken(tsqlParser.CURSOR_DEFAULT, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_option" ):
                listener.enterCursor_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_option" ):
                listener.exitCursor_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_option" ):
                return visitor.visitCursor_option(self)
            else:
                return visitor.visitChildren(self)




    def cursor_option(self):

        localctx = tsqlParser.Cursor_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_cursor_option)
        self._la = 0 # Token type
        try:
            self.state = 1522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURSOR_CLOSE_ON_COMMIT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.match(tsqlParser.CURSOR_CLOSE_ON_COMMIT)
                self.state = 1519
                self.on_off()
                pass
            elif token in [tsqlParser.CURSOR_DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1520
                self.match(tsqlParser.CURSOR_DEFAULT)
                self.state = 1521
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Date_correlation_optimization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_CORRELATION_OPTIMIZATION(self):
            return self.getToken(tsqlParser.DATE_CORRELATION_OPTIMIZATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_date_correlation_optimization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_correlation_optimization_option" ):
                listener.enterDate_correlation_optimization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_correlation_optimization_option" ):
                listener.exitDate_correlation_optimization_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDate_correlation_optimization_option" ):
                return visitor.visitDate_correlation_optimization_option(self)
            else:
                return visitor.visitChildren(self)




    def date_correlation_optimization_option(self):

        localctx = tsqlParser.Date_correlation_optimization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_date_correlation_optimization_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(tsqlParser.DATE_CORRELATION_OPTIMIZATION)
            self.state = 1525
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_encryption_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_db_encryption_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_encryption_option" ):
                listener.enterDb_encryption_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_encryption_option" ):
                listener.exitDb_encryption_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_encryption_option" ):
                return visitor.visitDb_encryption_option(self)
            else:
                return visitor.visitChildren(self)




    def db_encryption_option(self):

        localctx = tsqlParser.Db_encryption_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_db_encryption_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(tsqlParser.ENCRYPTION)
            self.state = 1528
            self.on_off()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_state_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(tsqlParser.OFFLINE, 0)

        def EMERGENCY(self):
            return self.getToken(tsqlParser.EMERGENCY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_state_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_state_option" ):
                listener.enterDb_state_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_state_option" ):
                listener.exitDb_state_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_state_option" ):
                return visitor.visitDb_state_option(self)
            else:
                return visitor.visitChildren(self)




    def db_state_option(self):

        localctx = tsqlParser.Db_state_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_db_state_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            _la = self._input.LA(1)
            if not(_la==tsqlParser.EMERGENCY or _la==tsqlParser.OFFLINE or _la==tsqlParser.ONLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_update_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def READ_WRITE(self):
            return self.getToken(tsqlParser.READ_WRITE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_update_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_update_option" ):
                listener.enterDb_update_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_update_option" ):
                listener.exitDb_update_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_update_option" ):
                return visitor.visitDb_update_option(self)
            else:
                return visitor.visitChildren(self)




    def db_update_option(self):

        localctx = tsqlParser.Db_update_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_db_update_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            _la = self._input.LA(1)
            if not(_la==tsqlParser.READ_ONLY or _la==tsqlParser.READ_WRITE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Db_user_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_USER(self):
            return self.getToken(tsqlParser.SINGLE_USER, 0)

        def RESTRICTED_USER(self):
            return self.getToken(tsqlParser.RESTRICTED_USER, 0)

        def MULTI_USER(self):
            return self.getToken(tsqlParser.MULTI_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_db_user_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDb_user_access_option" ):
                listener.enterDb_user_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDb_user_access_option" ):
                listener.exitDb_user_access_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDb_user_access_option" ):
                return visitor.visitDb_user_access_option(self)
            else:
                return visitor.visitChildren(self)




    def db_user_access_option(self):

        localctx = tsqlParser.Db_user_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_db_user_access_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            _la = self._input.LA(1)
            if not(((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (tsqlParser.MULTI_USER - 320)) | (1 << (tsqlParser.RESTRICTED_USER - 320)) | (1 << (tsqlParser.SINGLE_USER - 320)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delayed_durability_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DISABLED(self):
            return self.getToken(tsqlParser.DISABLED, 0)

        def ALLOWED(self):
            return self.getToken(tsqlParser.ALLOWED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_delayed_durability_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelayed_durability_option" ):
                listener.enterDelayed_durability_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelayed_durability_option" ):
                listener.exitDelayed_durability_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelayed_durability_option" ):
                return visitor.visitDelayed_durability_option(self)
            else:
                return visitor.visitChildren(self)




    def delayed_durability_option(self):

        localctx = tsqlParser.Delayed_durability_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_delayed_durability_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            self.match(tsqlParser.DELAYED_DURABILITY)
            self.state = 1537
            self.match(tsqlParser.EQUAL)
            self.state = 1538
            _la = self._input.LA(1)
            if not(_la==tsqlParser.ALLOWED or _la==tsqlParser.DISABLED or _la==tsqlParser.FORCED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class External_access_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_external_access_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternal_access_option" ):
                listener.enterExternal_access_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternal_access_option" ):
                listener.exitExternal_access_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternal_access_option" ):
                return visitor.visitExternal_access_option(self)
            else:
                return visitor.visitChildren(self)




    def external_access_option(self):

        localctx = tsqlParser.External_access_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_external_access_option)
        self._la = 0 # Token type
        try:
            self.state = 1565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1540
                self.match(tsqlParser.DB_CHAINING)
                self.state = 1541
                self.on_off()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1542
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 1543
                self.on_off()
                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1544
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 1545
                self.match(tsqlParser.EQUAL)
                self.state = 1548
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1546
                    self.id_()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1547
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1550
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 1551
                self.match(tsqlParser.EQUAL)
                self.state = 1554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1552
                    self.id_()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 1553
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1556
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 1557
                self.match(tsqlParser.EQUAL)
                self.state = 1558
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1559
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 1560
                self.match(tsqlParser.EQUAL)
                self.state = 1561
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1562
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 1563
                self.match(tsqlParser.EQUAL)
                self.state = 1564
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Mixed_page_allocation_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MIXED_PAGE_ALLOCATION(self):
            return self.getToken(tsqlParser.MIXED_PAGE_ALLOCATION, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_mixed_page_allocation_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMixed_page_allocation_option" ):
                listener.enterMixed_page_allocation_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMixed_page_allocation_option" ):
                listener.exitMixed_page_allocation_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMixed_page_allocation_option" ):
                return visitor.visitMixed_page_allocation_option(self)
            else:
                return visitor.visitChildren(self)




    def mixed_page_allocation_option(self):

        localctx = tsqlParser.Mixed_page_allocation_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_mixed_page_allocation_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self.match(tsqlParser.MIXED_PAGE_ALLOCATION)
            self.state = 1568
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameterization_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_parameterization_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterization_option" ):
                listener.enterParameterization_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterization_option" ):
                listener.exitParameterization_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterization_option" ):
                return visitor.visitParameterization_option(self)
            else:
                return visitor.visitChildren(self)




    def parameterization_option(self):

        localctx = tsqlParser.Parameterization_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_parameterization_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.match(tsqlParser.PARAMETERIZATION)
            self.state = 1571
            _la = self._input.LA(1)
            if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Recovery_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECOVERY(self):
            return self.getToken(tsqlParser.RECOVERY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def BULK_LOGGED(self):
            return self.getToken(tsqlParser.BULK_LOGGED, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def TORN_PAGE_DETECTION(self):
            return self.getToken(tsqlParser.TORN_PAGE_DETECTION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def PAGE_VERIFY(self):
            return self.getToken(tsqlParser.PAGE_VERIFY, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def NONE(self):
            return self.getToken(tsqlParser.NONE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_recovery_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecovery_option" ):
                listener.enterRecovery_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecovery_option" ):
                listener.exitRecovery_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecovery_option" ):
                return visitor.visitRecovery_option(self)
            else:
                return visitor.visitChildren(self)




    def recovery_option(self):

        localctx = tsqlParser.Recovery_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_recovery_option)
        self._la = 0 # Token type
        try:
            self.state = 1579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.RECOVERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1573
                self.match(tsqlParser.RECOVERY)
                self.state = 1574
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.BULK_LOGGED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TORN_PAGE_DETECTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1575
                self.match(tsqlParser.TORN_PAGE_DETECTION)
                self.state = 1576
                self.on_off()
                pass
            elif token in [tsqlParser.PAGE_VERIFY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1577
                self.match(tsqlParser.PAGE_VERIFY)
                self.state = 1578
                _la = self._input.LA(1)
                if not(_la==tsqlParser.NONE or _la==tsqlParser.CHECKSUM or _la==tsqlParser.TORN_PAGE_DETECTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Service_broker_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE_BROKER(self):
            return self.getToken(tsqlParser.ENABLE_BROKER, 0)

        def DISABLE_BROKER(self):
            return self.getToken(tsqlParser.DISABLE_BROKER, 0)

        def NEW_BROKER(self):
            return self.getToken(tsqlParser.NEW_BROKER, 0)

        def ERROR_BROKER_CONVERSATIONS(self):
            return self.getToken(tsqlParser.ERROR_BROKER_CONVERSATIONS, 0)

        def HONOR_BROKER_PRIORITY(self):
            return self.getToken(tsqlParser.HONOR_BROKER_PRIORITY, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_service_broker_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterService_broker_option" ):
                listener.enterService_broker_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitService_broker_option" ):
                listener.exitService_broker_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitService_broker_option" ):
                return visitor.visitService_broker_option(self)
            else:
                return visitor.visitChildren(self)




    def service_broker_option(self):

        localctx = tsqlParser.Service_broker_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_service_broker_option)
        try:
            self.state = 1587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ENABLE_BROKER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1581
                self.match(tsqlParser.ENABLE_BROKER)
                pass
            elif token in [tsqlParser.DISABLE_BROKER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1582
                self.match(tsqlParser.DISABLE_BROKER)
                pass
            elif token in [tsqlParser.NEW_BROKER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1583
                self.match(tsqlParser.NEW_BROKER)
                pass
            elif token in [tsqlParser.ERROR_BROKER_CONVERSATIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1584
                self.match(tsqlParser.ERROR_BROKER_CONVERSATIONS)
                pass
            elif token in [tsqlParser.HONOR_BROKER_PRIORITY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1585
                self.match(tsqlParser.HONOR_BROKER_PRIORITY)
                self.state = 1586
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Snapshot_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = None # Token

        def ALLOW_SNAPSHOT_ISOLATION(self):
            return self.getToken(tsqlParser.ALLOW_SNAPSHOT_ISOLATION, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def READ_COMMITTED_SNAPSHOT(self):
            return self.getToken(tsqlParser.READ_COMMITTED_SNAPSHOT, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_snapshot_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSnapshot_option" ):
                listener.enterSnapshot_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSnapshot_option" ):
                listener.exitSnapshot_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSnapshot_option" ):
                return visitor.visitSnapshot_option(self)
            else:
                return visitor.visitChildren(self)




    def snapshot_option(self):

        localctx = tsqlParser.Snapshot_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_snapshot_option)
        self._la = 0 # Token type
        try:
            self.state = 1594
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ALLOW_SNAPSHOT_ISOLATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1589
                self.match(tsqlParser.ALLOW_SNAPSHOT_ISOLATION)
                self.state = 1590
                self.on_off()
                pass
            elif token in [tsqlParser.READ_COMMITTED_SNAPSHOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1591
                self.match(tsqlParser.READ_COMMITTED_SNAPSHOT)
                self.state = 1592
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1593
                localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    localctx.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANSI_NULL_DEFAULT(self):
            return self.getToken(tsqlParser.ANSI_NULL_DEFAULT, 0)

        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def ANSI_WARNINGS(self):
            return self.getToken(tsqlParser.ANSI_WARNINGS, 0)

        def ARITHABORT(self):
            return self.getToken(tsqlParser.ARITHABORT, 0)

        def COMPATIBILITY_LEVEL(self):
            return self.getToken(tsqlParser.COMPATIBILITY_LEVEL, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CONCAT_NULL_YIELDS_NULL(self):
            return self.getToken(tsqlParser.CONCAT_NULL_YIELDS_NULL, 0)

        def NUMERIC_ROUNDABORT(self):
            return self.getToken(tsqlParser.NUMERIC_ROUNDABORT, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def RECURSIVE_TRIGGERS(self):
            return self.getToken(tsqlParser.RECURSIVE_TRIGGERS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_sql_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_option" ):
                listener.enterSql_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_option" ):
                listener.exitSql_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_option" ):
                return visitor.visitSql_option(self)
            else:
                return visitor.visitChildren(self)




    def sql_option(self):

        localctx = tsqlParser.Sql_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_sql_option)
        try:
            self.state = 1617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.ANSI_NULL_DEFAULT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1596
                self.match(tsqlParser.ANSI_NULL_DEFAULT)
                self.state = 1597
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_NULLS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1598
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 1599
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_PADDING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1600
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 1601
                self.on_off()
                pass
            elif token in [tsqlParser.ANSI_WARNINGS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1602
                self.match(tsqlParser.ANSI_WARNINGS)
                self.state = 1603
                self.on_off()
                pass
            elif token in [tsqlParser.ARITHABORT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1604
                self.match(tsqlParser.ARITHABORT)
                self.state = 1605
                self.on_off()
                pass
            elif token in [tsqlParser.COMPATIBILITY_LEVEL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1606
                self.match(tsqlParser.COMPATIBILITY_LEVEL)
                self.state = 1607
                self.match(tsqlParser.EQUAL)
                self.state = 1608
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.CONCAT_NULL_YIELDS_NULL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1609
                self.match(tsqlParser.CONCAT_NULL_YIELDS_NULL)
                self.state = 1610
                self.on_off()
                pass
            elif token in [tsqlParser.NUMERIC_ROUNDABORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1611
                self.match(tsqlParser.NUMERIC_ROUNDABORT)
                self.state = 1612
                self.on_off()
                pass
            elif token in [tsqlParser.QUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1613
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 1614
                self.on_off()
                pass
            elif token in [tsqlParser.RECURSIVE_TRIGGERS]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1615
                self.match(tsqlParser.RECURSIVE_TRIGGERS)
                self.state = 1616
                self.on_off()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_recovery_time_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TARGET_RECOVERY_TIME(self):
            return self.getToken(tsqlParser.TARGET_RECOVERY_TIME, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def SECONDS(self):
            return self.getToken(tsqlParser.SECONDS, 0)

        def MINUTES(self):
            return self.getToken(tsqlParser.MINUTES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_target_recovery_time_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_recovery_time_option" ):
                listener.enterTarget_recovery_time_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_recovery_time_option" ):
                listener.exitTarget_recovery_time_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_recovery_time_option" ):
                return visitor.visitTarget_recovery_time_option(self)
            else:
                return visitor.visitChildren(self)




    def target_recovery_time_option(self):

        localctx = tsqlParser.Target_recovery_time_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_target_recovery_time_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1619
            self.match(tsqlParser.TARGET_RECOVERY_TIME)
            self.state = 1620
            self.match(tsqlParser.EQUAL)
            self.state = 1621
            self.match(tsqlParser.DECIMAL)
            self.state = 1622
            _la = self._input.LA(1)
            if not(_la==tsqlParser.MINUTES or _la==tsqlParser.SECONDS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.seconds = None # Token

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def AFTER(self):
            return self.getToken(tsqlParser.AFTER, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def IMMEDIATE(self):
            return self.getToken(tsqlParser.IMMEDIATE, 0)

        def NO_WAIT(self):
            return self.getToken(tsqlParser.NO_WAIT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_termination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermination" ):
                listener.enterTermination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermination" ):
                listener.exitTermination(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermination" ):
                return visitor.visitTermination(self)
            else:
                return visitor.visitChildren(self)




    def termination(self):

        localctx = tsqlParser.TerminationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_termination)
        try:
            self.state = 1630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1624
                self.match(tsqlParser.ROLLBACK)
                self.state = 1625
                self.match(tsqlParser.AFTER)
                self.state = 1626
                localctx.seconds = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1627
                self.match(tsqlParser.ROLLBACK)
                self.state = 1628
                self.match(tsqlParser.IMMEDIATE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1629
                self.match(tsqlParser.NO_WAIT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_indexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index" ):
                listener.enterDrop_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index" ):
                listener.exitDrop_index(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_index" ):
                return visitor.visitDrop_index(self)
            else:
                return visitor.visitChildren(self)




    def drop_index(self):

        localctx = tsqlParser.Drop_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_drop_index)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.match(tsqlParser.DROP)
            self.state = 1633
            self.match(tsqlParser.INDEX)
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1634
                self.match(tsqlParser.IF)
                self.state = 1635
                self.match(tsqlParser.EXISTS)


            self.state = 1638
            localctx.name = self.id_()
            self.state = 1641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ON:
                self.state = 1639
                self.match(tsqlParser.ON)
                self.state = 1640
                self.table_name()


            self.state = 1644
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1643
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.proc = None # Token

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def func_proc_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Func_proc_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,i)


        def PROC(self):
            return self.getToken(tsqlParser.PROC, 0)

        def PROCEDURE(self):
            return self.getToken(tsqlParser.PROCEDURE, 0)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_procedure" ):
                listener.enterDrop_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_procedure" ):
                listener.exitDrop_procedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_procedure" ):
                return visitor.visitDrop_procedure(self)
            else:
                return visitor.visitChildren(self)




    def drop_procedure(self):

        localctx = tsqlParser.Drop_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_drop_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.match(tsqlParser.DROP)
            self.state = 1647
            localctx.proc = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PROC or _la==tsqlParser.PROCEDURE):
                localctx.proc = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1648
                self.match(tsqlParser.IF)
                self.state = 1649
                self.match(tsqlParser.EXISTS)


            self.state = 1652
            self.func_proc_name()
            self.state = 1657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1653
                self.match(tsqlParser.COMMA)
                self.state = 1654
                self.func_proc_name()
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 1660
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def drop_dml_trigger(self):
            return self.getTypedRuleContext(tsqlParser.Drop_dml_triggerContext,0)


        def drop_ddl_trigger(self):
            return self.getTypedRuleContext(tsqlParser.Drop_ddl_triggerContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_trigger" ):
                listener.enterDrop_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_trigger" ):
                listener.exitDrop_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_trigger" ):
                return visitor.visitDrop_trigger(self)
            else:
                return visitor.visitChildren(self)




    def drop_trigger(self):

        localctx = tsqlParser.Drop_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_drop_trigger)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1663
                self.drop_dml_trigger()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1664
                self.drop_ddl_trigger()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_dml_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(tsqlParser.TRIGGER, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_dml_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_dml_trigger" ):
                listener.enterDrop_dml_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_dml_trigger" ):
                listener.exitDrop_dml_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_dml_trigger" ):
                return visitor.visitDrop_dml_trigger(self)
            else:
                return visitor.visitChildren(self)




    def drop_dml_trigger(self):

        localctx = tsqlParser.Drop_dml_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_drop_dml_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(tsqlParser.DROP)
            self.state = 1668
            self.match(tsqlParser.TRIGGER)
            self.state = 1671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1669
                self.match(tsqlParser.IF)
                self.state = 1670
                self.match(tsqlParser.EXISTS)


            self.state = 1673
            self.simple_name()
            self.state = 1678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1674
                self.match(tsqlParser.COMMA)
                self.state = 1675
                self.simple_name()
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
            if la_ == 1:
                self.state = 1681
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_ddl_triggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(tsqlParser.TRIGGER, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def SERVER(self):
            return self.getToken(tsqlParser.SERVER, 0)

        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_ddl_trigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_ddl_trigger" ):
                listener.enterDrop_ddl_trigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_ddl_trigger" ):
                listener.exitDrop_ddl_trigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_ddl_trigger" ):
                return visitor.visitDrop_ddl_trigger(self)
            else:
                return visitor.visitChildren(self)




    def drop_ddl_trigger(self):

        localctx = tsqlParser.Drop_ddl_triggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_drop_ddl_trigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self.match(tsqlParser.DROP)
            self.state = 1685
            self.match(tsqlParser.TRIGGER)
            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1686
                self.match(tsqlParser.IF)
                self.state = 1687
                self.match(tsqlParser.EXISTS)


            self.state = 1690
            self.simple_name()
            self.state = 1695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1691
                self.match(tsqlParser.COMMA)
                self.state = 1692
                self.simple_name()
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1698
            self.match(tsqlParser.ON)
            self.state = 1702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DATABASE]:
                self.state = 1699
                self.match(tsqlParser.DATABASE)
                pass
            elif token in [tsqlParser.ALL]:
                self.state = 1700
                self.match(tsqlParser.ALL)
                self.state = 1701
                self.match(tsqlParser.SERVER)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1704
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(tsqlParser.FUNCTION, 0)

        def func_proc_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Func_proc_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_function" ):
                listener.enterDrop_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_function" ):
                listener.exitDrop_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_function" ):
                return visitor.visitDrop_function(self)
            else:
                return visitor.visitChildren(self)




    def drop_function(self):

        localctx = tsqlParser.Drop_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_drop_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1707
            self.match(tsqlParser.DROP)
            self.state = 1708
            self.match(tsqlParser.FUNCTION)
            self.state = 1711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1709
                self.match(tsqlParser.IF)
                self.state = 1710
                self.match(tsqlParser.EXISTS)


            self.state = 1713
            self.func_proc_name()
            self.state = 1718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1714
                self.match(tsqlParser.COMMA)
                self.state = 1715
                self.func_proc_name()
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1721
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_statisticsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Id_Context

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def STATISTICS(self):
            return self.getToken(tsqlParser.STATISTICS, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_drop_statistics

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_statistics" ):
                listener.enterDrop_statistics(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_statistics" ):
                listener.exitDrop_statistics(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_statistics" ):
                return visitor.visitDrop_statistics(self)
            else:
                return visitor.visitChildren(self)




    def drop_statistics(self):

        localctx = tsqlParser.Drop_statisticsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_drop_statistics)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.match(tsqlParser.DROP)
            self.state = 1725
            self.match(tsqlParser.STATISTICS)
            self.state = 1729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.state = 1726
                self.table_name()
                self.state = 1727
                self.match(tsqlParser.DOT)


            self.state = 1731
            localctx.name = self.id_()
            self.state = 1732
            self.match(tsqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table" ):
                listener.enterDrop_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table" ):
                listener.exitDrop_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_table" ):
                return visitor.visitDrop_table(self)
            else:
                return visitor.visitChildren(self)




    def drop_table(self):

        localctx = tsqlParser.Drop_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_drop_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1734
            self.match(tsqlParser.DROP)
            self.state = 1735
            self.match(tsqlParser.TABLE)
            self.state = 1738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1736
                self.match(tsqlParser.IF)
                self.state = 1737
                self.match(tsqlParser.EXISTS)


            self.state = 1740
            self.table_name()
            self.state = 1742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,229,self._ctx)
            if la_ == 1:
                self.state = 1741
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_viewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def simple_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_nameContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_nameContext,i)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_view

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_view" ):
                listener.enterDrop_view(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_view" ):
                listener.exitDrop_view(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_view" ):
                return visitor.visitDrop_view(self)
            else:
                return visitor.visitChildren(self)




    def drop_view(self):

        localctx = tsqlParser.Drop_viewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_drop_view)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self.match(tsqlParser.DROP)
            self.state = 1745
            self.match(tsqlParser.VIEW)
            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1746
                self.match(tsqlParser.IF)
                self.state = 1747
                self.match(tsqlParser.EXISTS)


            self.state = 1750
            self.simple_name()
            self.state = 1755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 1751
                self.match(tsqlParser.COMMA)
                self.state = 1752
                self.simple_name()
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1758
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def default_value(self):
            return self.getTypedRuleContext(tsqlParser.Default_valueContext,0)


        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_create_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_type" ):
                listener.enterCreate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_type" ):
                listener.exitCreate_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_type" ):
                return visitor.visitCreate_type(self)
            else:
                return visitor.visitChildren(self)




    def create_type(self):

        localctx = tsqlParser.Create_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_create_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1761
            self.match(tsqlParser.CREATE)
            self.state = 1762
            self.match(tsqlParser.TYPE)
            self.state = 1763
            localctx.name = self.simple_name()
            self.state = 1764
            self.match(tsqlParser.FROM)
            self.state = 1765
            self.data_type()
            self.state = 1766
            self.default_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_nameContext

        def DROP(self):
            return self.getToken(tsqlParser.DROP, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def simple_name(self):
            return self.getTypedRuleContext(tsqlParser.Simple_nameContext,0)


        def IF(self):
            return self.getToken(tsqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_drop_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_type" ):
                listener.enterDrop_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_type" ):
                listener.exitDrop_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_type" ):
                return visitor.visitDrop_type(self)
            else:
                return visitor.visitChildren(self)




    def drop_type(self):

        localctx = tsqlParser.Drop_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_drop_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1768
            self.match(tsqlParser.DROP)
            self.state = 1769
            self.match(tsqlParser.TYPE)
            self.state = 1772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.IF:
                self.state = 1770
                self.match(tsqlParser.IF)
                self.state = 1771
                self.match(tsqlParser.EXISTS)


            self.state = 1774
            localctx.name = self.simple_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_function_limitedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def openquery(self):
            return self.getTypedRuleContext(tsqlParser.OpenqueryContext,0)


        def opendatasource(self):
            return self.getTypedRuleContext(tsqlParser.OpendatasourceContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function_limited" ):
                listener.enterRowset_function_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function_limited" ):
                listener.exitRowset_function_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function_limited" ):
                return visitor.visitRowset_function_limited(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function_limited(self):

        localctx = tsqlParser.Rowset_function_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_rowset_function_limited)
        try:
            self.state = 1778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.OPENQUERY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1776
                self.openquery()
                pass
            elif token in [tsqlParser.OPENDATASOURCE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1777
                self.opendatasource()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.linked_server = None # Id_Context
            self.query = None # Token

        def OPENQUERY(self):
            return self.getToken(tsqlParser.OPENQUERY, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_openquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenquery" ):
                listener.enterOpenquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenquery" ):
                listener.exitOpenquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenquery" ):
                return visitor.visitOpenquery(self)
            else:
                return visitor.visitChildren(self)




    def openquery(self):

        localctx = tsqlParser.OpenqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_openquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(tsqlParser.OPENQUERY)
            self.state = 1781
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1782
            localctx.linked_server = self.id_()
            self.state = 1783
            self.match(tsqlParser.COMMA)
            self.state = 1784
            localctx.query = self.match(tsqlParser.STRING)
            self.state = 1785
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpendatasourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider = None # Token
            self.init = None # Token
            self.database = None # Id_Context
            self.scheme = None # Id_Context
            self.table = None # Id_Context

        def OPENDATASOURCE(self):
            return self.getToken(tsqlParser.OPENDATASOURCE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_opendatasource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpendatasource" ):
                listener.enterOpendatasource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpendatasource" ):
                listener.exitOpendatasource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpendatasource" ):
                return visitor.visitOpendatasource(self)
            else:
                return visitor.visitChildren(self)




    def opendatasource(self):

        localctx = tsqlParser.OpendatasourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_opendatasource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.match(tsqlParser.OPENDATASOURCE)
            self.state = 1788
            self.match(tsqlParser.LR_BRACKET)
            self.state = 1789
            localctx.provider = self.match(tsqlParser.STRING)
            self.state = 1790
            self.match(tsqlParser.COMMA)
            self.state = 1791
            localctx.init = self.match(tsqlParser.STRING)
            self.state = 1792
            self.match(tsqlParser.RR_BRACKET)
            self.state = 1793
            self.match(tsqlParser.DOT)
            self.state = 1795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (tsqlParser.CALLED - 18)) | (1 << (tsqlParser.DATA_COMPRESSION - 18)) | (1 << (tsqlParser.EVENTDATA - 18)) | (1 << (tsqlParser.FILLFACTOR - 18)) | (1 << (tsqlParser.FORCESEEK - 18)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.ID - 400)))) != 0):
                self.state = 1794
                localctx.database = self.id_()


            self.state = 1797
            self.match(tsqlParser.DOT)
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (tsqlParser.CALLED - 18)) | (1 << (tsqlParser.DATA_COMPRESSION - 18)) | (1 << (tsqlParser.EVENTDATA - 18)) | (1 << (tsqlParser.FILLFACTOR - 18)) | (1 << (tsqlParser.FORCESEEK - 18)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.ID - 400)))) != 0):
                self.state = 1798
                localctx.scheme = self.id_()


            self.state = 1801
            self.match(tsqlParser.DOT)

            self.state = 1802
            localctx.table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def table_type_definition(self):
            return self.getTypedRuleContext(tsqlParser.Table_type_definitionContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def declare_local(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Declare_localContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Declare_localContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_statement" ):
                listener.enterDeclare_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_statement" ):
                listener.exitDeclare_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_statement" ):
                return visitor.visitDeclare_statement(self)
            else:
                return visitor.visitChildren(self)




    def declare_statement(self):

        localctx = tsqlParser.Declare_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_declare_statement)
        self._la = 0 # Token type
        try:
            self.state = 1825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1804
                self.match(tsqlParser.DECLARE)
                self.state = 1805
                self.match(tsqlParser.LOCAL_ID)
                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1806
                    self.match(tsqlParser.AS)


                self.state = 1809
                self.table_type_definition()
                self.state = 1811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1810
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1813
                self.match(tsqlParser.DECLARE)
                self.state = 1814
                self.declare_local()
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1815
                    self.match(tsqlParser.COMMA)
                    self.state = 1816
                    self.declare_local()
                    self.state = 1821
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1822
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(tsqlParser.CLOSE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def DEALLOCATE(self):
            return self.getToken(tsqlParser.DEALLOCATE, 0)

        def declare_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Declare_cursorContext,0)


        def fetch_cursor(self):
            return self.getTypedRuleContext(tsqlParser.Fetch_cursorContext,0)


        def OPEN(self):
            return self.getToken(tsqlParser.OPEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_statement" ):
                listener.enterCursor_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_statement" ):
                listener.exitCursor_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_statement" ):
                return visitor.visitCursor_statement(self)
            else:
                return visitor.visitChildren(self)




    def cursor_statement(self):

        localctx = tsqlParser.Cursor_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_cursor_statement)
        try:
            self.state = 1853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CLOSE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1827
                self.match(tsqlParser.CLOSE)
                self.state = 1829
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1828
                    self.match(tsqlParser.GLOBAL)


                self.state = 1831
                self.cursor_name()
                self.state = 1833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1832
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1835
                self.match(tsqlParser.DEALLOCATE)
                self.state = 1837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
                if la_ == 1:
                    self.state = 1836
                    self.match(tsqlParser.GLOBAL)


                self.state = 1839
                self.cursor_name()
                self.state = 1841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1840
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.DECLARE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1843
                self.declare_cursor()
                pass
            elif token in [tsqlParser.FETCH]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1844
                self.fetch_cursor()
                pass
            elif token in [tsqlParser.OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1845
                self.match(tsqlParser.OPEN)
                self.state = 1847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1846
                    self.match(tsqlParser.GLOBAL)


                self.state = 1849
                self.cursor_name()
                self.state = 1851
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                if la_ == 1:
                    self.state = 1850
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.return_status = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def execute_statement_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_statement_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_statement_argContext,i)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def execute_var_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Execute_var_stringContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Execute_var_stringContext,i)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def USER(self):
            return self.getToken(tsqlParser.USER, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement" ):
                listener.enterExecute_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement" ):
                listener.exitExecute_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement" ):
                return visitor.visitExecute_statement(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement(self):

        localctx = tsqlParser.Execute_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_execute_statement)
        self._la = 0 # Token type
        try:
            self.state = 1896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1855
                self.match(tsqlParser.EXECUTE)
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LOCAL_ID:
                    self.state = 1856
                    localctx.return_status = self.match(tsqlParser.LOCAL_ID)
                    self.state = 1857
                    self.match(tsqlParser.EQUAL)


                self.state = 1860
                self.func_proc_name()
                self.state = 1869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
                if la_ == 1:
                    self.state = 1861
                    self.execute_statement_arg()
                    self.state = 1866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 1862
                        self.match(tsqlParser.COMMA)
                        self.state = 1863
                        self.execute_statement_arg()
                        self.state = 1868
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1872
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1871
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1874
                self.match(tsqlParser.EXECUTE)
                self.state = 1875
                self.match(tsqlParser.LR_BRACKET)
                self.state = 1876
                self.execute_var_string()
                self.state = 1881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.PLUS:
                    self.state = 1877
                    self.match(tsqlParser.PLUS)
                    self.state = 1878
                    self.execute_var_string()
                    self.state = 1883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1884
                self.match(tsqlParser.RR_BRACKET)
                self.state = 1891
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 1886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 1885
                        self.match(tsqlParser.AS)


                    self.state = 1888
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.USER or _la==tsqlParser.LOGIN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1889
                    self.match(tsqlParser.EQUAL)
                    self.state = 1890
                    self.match(tsqlParser.STRING)


                self.state = 1894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 1893
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_statement_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.parameter = None # Token

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_statement_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_statement_arg" ):
                listener.enterExecute_statement_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_statement_arg" ):
                listener.exitExecute_statement_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_statement_arg" ):
                return visitor.visitExecute_statement_arg(self)
            else:
                return visitor.visitChildren(self)




    def execute_statement_arg(self):

        localctx = tsqlParser.Execute_statement_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_execute_statement_arg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.state = 1898
                localctx.parameter = self.match(tsqlParser.LOCAL_ID)
                self.state = 1899
                self.match(tsqlParser.EQUAL)


            self.state = 1911
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.state = 1904
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 1902
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 1903
                    self.id_()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
                if la_ == 1:
                    self.state = 1906
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.OUT or _la==tsqlParser.OUTPUT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [tsqlParser.DEFAULT]:
                self.state = 1909
                self.match(tsqlParser.DEFAULT)
                pass
            elif token in [tsqlParser.NULL]:
                self.state = 1910
                self.match(tsqlParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_var_stringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_var_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_var_string" ):
                listener.enterExecute_var_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_var_string" ):
                listener.exitExecute_var_string(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_var_string" ):
                return visitor.visitExecute_var_string(self)
            else:
                return visitor.visitChildren(self)




    def execute_var_string(self):

        localctx = tsqlParser.Execute_var_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_execute_var_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            _la = self._input.LA(1)
            if not(_la==tsqlParser.LOCAL_ID or _la==tsqlParser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Security_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.on_id = None # Table_nameContext
            self._id_ = None # Id_Context
            self.to_principal = list() # of Id_Contexts
            self.as_principal = None # Id_Context

        def execute_clause(self):
            return self.getTypedRuleContext(tsqlParser.Execute_clauseContext,0)


        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.GRANT)
            else:
                return self.getToken(tsqlParser.GRANT, i)

        def TO(self):
            return self.getToken(tsqlParser.TO, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def grant_permission(self):
            return self.getTypedRuleContext(tsqlParser.Grant_permissionContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def REVERT(self):
            return self.getToken(tsqlParser.REVERT, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_security_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecurity_statement" ):
                listener.enterSecurity_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecurity_statement" ):
                listener.exitSecurity_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecurity_statement" ):
                return visitor.visitSecurity_statement(self)
            else:
                return visitor.visitChildren(self)




    def security_statement(self):

        localctx = tsqlParser.Security_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_security_statement)
        self._la = 0 # Token type
        try:
            self.state = 1970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1915
                self.execute_clause()
                self.state = 1917
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
                if la_ == 1:
                    self.state = 1916
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.GRANT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1919
                self.match(tsqlParser.GRANT)
                self.state = 1931
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.ALL]:
                    self.state = 1920
                    self.match(tsqlParser.ALL)
                    self.state = 1922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.PRIVILEGES:
                        self.state = 1921
                        self.match(tsqlParser.PRIVILEGES)


                    pass
                elif token in [tsqlParser.ALTER, tsqlParser.CREATE, tsqlParser.EXECUTE, tsqlParser.INSERT, tsqlParser.REFERENCES, tsqlParser.SELECT, tsqlParser.VIEW, tsqlParser.CONTROL, tsqlParser.IMPERSONATE, tsqlParser.SHOWPLAN, tsqlParser.TAKE]:
                    self.state = 1924
                    self.grant_permission()
                    self.state = 1929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.LR_BRACKET:
                        self.state = 1925
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 1926
                        self.column_name_list()
                        self.state = 1927
                        self.match(tsqlParser.RR_BRACKET)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 1933
                    self.match(tsqlParser.ON)
                    self.state = 1934
                    localctx.on_id = self.table_name()


                self.state = 1937
                self.match(tsqlParser.TO)

                self.state = 1938
                localctx._id_ = self.id_()
                localctx.to_principal.append(localctx._id_)
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 1939
                    self.match(tsqlParser.COMMA)
                    self.state = 1940
                    localctx._id_ = self.id_()
                    localctx.to_principal.append(localctx._id_)
                    self.state = 1945
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1949
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                if la_ == 1:
                    self.state = 1946
                    self.match(tsqlParser.WITH)
                    self.state = 1947
                    self.match(tsqlParser.GRANT)
                    self.state = 1948
                    self.match(tsqlParser.OPTION)


                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.AS:
                    self.state = 1951
                    self.match(tsqlParser.AS)
                    self.state = 1952
                    localctx.as_principal = self.id_()


                self.state = 1956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
                if la_ == 1:
                    self.state = 1955
                    self.match(tsqlParser.SEMI)


                pass
            elif token in [tsqlParser.REVERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1958
                self.match(tsqlParser.REVERT)
                self.state = 1965
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
                if la_ == 1:
                    self.state = 1959
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 1960
                    self.match(tsqlParser.WITH)
                    self.state = 1961
                    self.match(tsqlParser.COOKIE)
                    self.state = 1962
                    self.match(tsqlParser.EQUAL)
                    self.state = 1963
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 1964
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 1968
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 1967
                    self.match(tsqlParser.SEMI)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Grant_permissionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def VIEW(self):
            return self.getToken(tsqlParser.VIEW, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def TAKE(self):
            return self.getToken(tsqlParser.TAKE, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def CREATE(self):
            return self.getToken(tsqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def SHOWPLAN(self):
            return self.getToken(tsqlParser.SHOWPLAN, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def INSERT(self):
            return self.getToken(tsqlParser.INSERT, 0)

        def ALTER(self):
            return self.getToken(tsqlParser.ALTER, 0)

        def DATABASE(self):
            return self.getToken(tsqlParser.DATABASE, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_grant_permission

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrant_permission" ):
                listener.enterGrant_permission(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrant_permission" ):
                listener.exitGrant_permission(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrant_permission" ):
                return visitor.visitGrant_permission(self)
            else:
                return visitor.visitChildren(self)




    def grant_permission(self):

        localctx = tsqlParser.Grant_permissionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_grant_permission)
        self._la = 0 # Token type
        try:
            self.state = 1998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1972
                self.match(tsqlParser.EXECUTE)
                pass
            elif token in [tsqlParser.VIEW]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1973
                self.match(tsqlParser.VIEW)
                self.state = 1974
                self.id_()
                pass
            elif token in [tsqlParser.TAKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1975
                self.match(tsqlParser.TAKE)
                self.state = 1976
                self.id_()
                pass
            elif token in [tsqlParser.CONTROL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1977
                self.match(tsqlParser.CONTROL)
                self.state = 1979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (tsqlParser.CALLED - 18)) | (1 << (tsqlParser.DATA_COMPRESSION - 18)) | (1 << (tsqlParser.EVENTDATA - 18)) | (1 << (tsqlParser.FILLFACTOR - 18)) | (1 << (tsqlParser.FORCESEEK - 18)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.ID - 400)))) != 0):
                    self.state = 1978
                    self.id_()


                pass
            elif token in [tsqlParser.CREATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1981
                self.match(tsqlParser.CREATE)
                self.state = 1982
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TABLE or _la==tsqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.SHOWPLAN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1983
                self.match(tsqlParser.SHOWPLAN)
                pass
            elif token in [tsqlParser.IMPERSONATE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1984
                self.match(tsqlParser.IMPERSONATE)
                pass
            elif token in [tsqlParser.SELECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1985
                self.match(tsqlParser.SELECT)
                pass
            elif token in [tsqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1986
                self.match(tsqlParser.REFERENCES)
                pass
            elif token in [tsqlParser.INSERT]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1987
                self.match(tsqlParser.INSERT)
                pass
            elif token in [tsqlParser.ALTER]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1988
                self.match(tsqlParser.ALTER)
                self.state = 1996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.ANY) | (1 << tsqlParser.CALLED) | (1 << tsqlParser.DATA_COMPRESSION) | (1 << tsqlParser.DATABASE))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (tsqlParser.EVENTDATA - 65)) | (1 << (tsqlParser.FILLFACTOR - 65)) | (1 << (tsqlParser.FORCESEEK - 65)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.ID - 400)))) != 0):
                    self.state = 1990
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.ANY:
                        self.state = 1989
                        self.match(tsqlParser.ANY)


                    self.state = 1994
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 1992
                        self.id_()
                        pass
                    elif token in [tsqlParser.DATABASE]:
                        self.state = 1993
                        self.match(tsqlParser.DATABASE)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.member_name = None # Id_Context

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def set_special(self):
            return self.getTypedRuleContext(tsqlParser.Set_specialContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_set_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_statement" ):
                listener.enterSet_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_statement" ):
                listener.exitSet_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_statement" ):
                return visitor.visitSet_statement(self)
            else:
                return visitor.visitChildren(self)




    def set_statement(self):

        localctx = tsqlParser.Set_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_set_statement)
        self._la = 0 # Token type
        try:
            self.state = 2039
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2000
                self.match(tsqlParser.SET)
                self.state = 2001
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.DOT:
                    self.state = 2002
                    self.match(tsqlParser.DOT)
                    self.state = 2003
                    localctx.member_name = self.id_()


                self.state = 2006
                self.match(tsqlParser.EQUAL)
                self.state = 2007
                self.expression(0)
                self.state = 2009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
                if la_ == 1:
                    self.state = 2008
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2011
                self.match(tsqlParser.SET)
                self.state = 2012
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2013
                self.assignment_operator()
                self.state = 2014
                self.expression(0)
                self.state = 2016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 2015
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2018
                self.match(tsqlParser.SET)
                self.state = 2019
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2020
                self.match(tsqlParser.EQUAL)
                self.state = 2021
                self.match(tsqlParser.CURSOR)
                self.state = 2022
                self.declare_set_cursor_common()
                self.state = 2033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 2023
                    self.match(tsqlParser.FOR)
                    self.state = 2031
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 2024
                        self.match(tsqlParser.READ)
                        self.state = 2025
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 2026
                        self.match(tsqlParser.UPDATE)
                        self.state = 2029
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 2027
                            self.match(tsqlParser.OF)
                            self.state = 2028
                            self.column_name_list()


                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 2036
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2035
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2038
                self.set_special()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(tsqlParser.BEGIN, 0)

        def DISTRIBUTED(self):
            return self.getToken(tsqlParser.DISTRIBUTED, 0)

        def TRAN(self):
            return self.getToken(tsqlParser.TRAN, 0)

        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def COMMIT(self):
            return self.getToken(tsqlParser.COMMIT, 0)

        def DELAYED_DURABILITY(self):
            return self.getToken(tsqlParser.DELAYED_DURABILITY, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def ROLLBACK(self):
            return self.getToken(tsqlParser.ROLLBACK, 0)

        def SAVE(self):
            return self.getToken(tsqlParser.SAVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_transaction_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_statement" ):
                listener.enterTransaction_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_statement" ):
                listener.exitTransaction_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_statement" ):
                return visitor.visitTransaction_statement(self)
            else:
                return visitor.visitChildren(self)




    def transaction_statement(self):

        localctx = tsqlParser.Transaction_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_transaction_statement)
        self._la = 0 # Token type
        try:
            self.state = 2118
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2041
                self.match(tsqlParser.BEGIN)
                self.state = 2042
                self.match(tsqlParser.DISTRIBUTED)
                self.state = 2043
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2046
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 2044
                    self.id_()

                elif la_ == 2:
                    self.state = 2045
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 2049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 2048
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2051
                self.match(tsqlParser.BEGIN)
                self.state = 2052
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2062
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
                if la_ == 1:
                    self.state = 2055
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 2053
                        self.id_()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 2054
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2060
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,290,self._ctx)
                    if la_ == 1:
                        self.state = 2057
                        self.match(tsqlParser.WITH)
                        self.state = 2058
                        self.match(tsqlParser.MARK)
                        self.state = 2059
                        self.match(tsqlParser.STRING)




                self.state = 2065
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
                if la_ == 1:
                    self.state = 2064
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2067
                self.match(tsqlParser.COMMIT)
                self.state = 2068
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2081
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
                if la_ == 1:
                    self.state = 2071
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                        self.state = 2069
                        self.id_()
                        pass
                    elif token in [tsqlParser.LOCAL_ID]:
                        self.state = 2070
                        self.match(tsqlParser.LOCAL_ID)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 2079
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                    if la_ == 1:
                        self.state = 2073
                        self.match(tsqlParser.WITH)
                        self.state = 2074
                        self.match(tsqlParser.LR_BRACKET)
                        self.state = 2075
                        self.match(tsqlParser.DELAYED_DURABILITY)
                        self.state = 2076
                        self.match(tsqlParser.EQUAL)
                        self.state = 2077
                        _la = self._input.LA(1)
                        if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2078
                        self.match(tsqlParser.RR_BRACKET)




                self.state = 2084
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
                if la_ == 1:
                    self.state = 2083
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2086
                self.match(tsqlParser.COMMIT)
                self.state = 2088
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2087
                    self.match(tsqlParser.WORK)


                self.state = 2091
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
                if la_ == 1:
                    self.state = 2090
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2093
                self.match(tsqlParser.ROLLBACK)
                self.state = 2094
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2097
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
                if la_ == 1:
                    self.state = 2095
                    self.id_()

                elif la_ == 2:
                    self.state = 2096
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 2100
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 2099
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2102
                self.match(tsqlParser.ROLLBACK)
                self.state = 2104
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
                if la_ == 1:
                    self.state = 2103
                    self.match(tsqlParser.WORK)


                self.state = 2107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
                if la_ == 1:
                    self.state = 2106
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2109
                self.match(tsqlParser.SAVE)
                self.state = 2110
                _la = self._input.LA(1)
                if not(_la==tsqlParser.TRAN or _la==tsqlParser.TRANSACTION):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2111
                    self.id_()

                elif la_ == 2:
                    self.state = 2112
                    self.match(tsqlParser.LOCAL_ID)


                self.state = 2116
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                if la_ == 1:
                    self.state = 2115
                    self.match(tsqlParser.SEMI)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Go_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # Token

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_go_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGo_statement" ):
                listener.enterGo_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGo_statement" ):
                listener.exitGo_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGo_statement" ):
                return visitor.visitGo_statement(self)
            else:
                return visitor.visitChildren(self)




    def go_statement(self):

        localctx = tsqlParser.Go_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_go_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2120
            self.match(tsqlParser.GO)
            self.state = 2122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DECIMAL:
                self.state = 2121
                localctx.count = self.match(tsqlParser.DECIMAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Use_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_use_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_statement" ):
                listener.enterUse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_statement" ):
                listener.exitUse_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse_statement" ):
                return visitor.visitUse_statement(self)
            else:
                return visitor.visitChildren(self)




    def use_statement(self):

        localctx = tsqlParser.Use_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_use_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(tsqlParser.USE)
            self.state = 2125
            localctx.database = self.id_()
            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2126
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dbcc_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Simple_idContext

        def DBCC(self):
            return self.getToken(tsqlParser.DBCC, 0)

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def dbcc_options(self):
            return self.getTypedRuleContext(tsqlParser.Dbcc_optionsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_dbcc_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_clause" ):
                listener.enterDbcc_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_clause" ):
                listener.exitDbcc_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbcc_clause" ):
                return visitor.visitDbcc_clause(self)
            else:
                return visitor.visitChildren(self)




    def dbcc_clause(self):

        localctx = tsqlParser.Dbcc_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_dbcc_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2129
            self.match(tsqlParser.DBCC)
            self.state = 2130
            localctx.name = self.simple_id()
            self.state = 2135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.state = 2131
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2132
                self.expression_list()
                self.state = 2133
                self.match(tsqlParser.RR_BRACKET)


            self.state = 2139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2137
                self.match(tsqlParser.WITH)
                self.state = 2138
                self.dbcc_options()


            self.state = 2142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2141
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dbcc_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_dbcc_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDbcc_options" ):
                listener.enterDbcc_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDbcc_options" ):
                listener.exitDbcc_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDbcc_options" ):
                return visitor.visitDbcc_options(self)
            else:
                return visitor.visitChildren(self)




    def dbcc_options(self):

        localctx = tsqlParser.Dbcc_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_dbcc_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self.simple_id()
            self.state = 2147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 2145
                self.match(tsqlParser.COMMA)
                self.state = 2146
                self.simple_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Execute_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.clause = None # Token

        def EXECUTE(self):
            return self.getToken(tsqlParser.EXECUTE, 0)

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_execute_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute_clause" ):
                listener.enterExecute_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute_clause" ):
                listener.exitExecute_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecute_clause" ):
                return visitor.visitExecute_clause(self)
            else:
                return visitor.visitChildren(self)




    def execute_clause(self):

        localctx = tsqlParser.Execute_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_execute_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2149
            self.match(tsqlParser.EXECUTE)
            self.state = 2150
            self.match(tsqlParser.AS)
            self.state = 2151
            localctx.clause = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CALLER or _la==tsqlParser.OWNER or _la==tsqlParser.SELF or _la==tsqlParser.STRING):
                localctx.clause = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_localContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_local

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_local" ):
                listener.enterDeclare_local(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_local" ):
                listener.exitDeclare_local(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_local" ):
                return visitor.visitDeclare_local(self)
            else:
                return visitor.visitChildren(self)




    def declare_local(self):

        localctx = tsqlParser.Declare_localContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_declare_local)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self.match(tsqlParser.LOCAL_ID)
            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 2154
                self.match(tsqlParser.AS)


            self.state = 2157
            self.data_type()
            self.state = 2160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.EQUAL:
                self.state = 2158
                self.match(tsqlParser.EQUAL)
                self.state = 2159
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_type_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLE(self):
            return self.getToken(tsqlParser.TABLE, 0)

        def column_def_table_constraints(self):
            return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_type_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_type_definition" ):
                listener.enterTable_type_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_type_definition" ):
                listener.exitTable_type_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_type_definition" ):
                return visitor.visitTable_type_definition(self)
            else:
                return visitor.visitChildren(self)




    def table_type_definition(self):

        localctx = tsqlParser.Table_type_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_table_type_definition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2162
            self.match(tsqlParser.TABLE)
            self.state = 2163
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2164
            self.column_def_table_constraints()
            self.state = 2165
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_def_table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_def_table_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_def_table_constraintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraints" ):
                listener.enterColumn_def_table_constraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraints" ):
                listener.exitColumn_def_table_constraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraints" ):
                return visitor.visitColumn_def_table_constraints(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraints(self):

        localctx = tsqlParser.Column_def_table_constraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_column_def_table_constraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            self.column_def_table_constraint()
            self.state = 2174
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,315,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.COMMA:
                        self.state = 2168
                        self.match(tsqlParser.COMMA)


                    self.state = 2171
                    self.column_def_table_constraint() 
                self.state = 2176
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,315,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_def_table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_definition(self):
            return self.getTypedRuleContext(tsqlParser.Column_definitionContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(tsqlParser.Table_constraintContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_def_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def_table_constraint" ):
                listener.enterColumn_def_table_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def_table_constraint" ):
                listener.exitColumn_def_table_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def_table_constraint" ):
                return visitor.visitColumn_def_table_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_def_table_constraint(self):

        localctx = tsqlParser.Column_def_table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_column_def_table_constraint)
        try:
            self.state = 2179
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2177
                self.column_definition()
                pass
            elif token in [tsqlParser.CHECK, tsqlParser.CONSTRAINT, tsqlParser.DEFAULT, tsqlParser.FOREIGN, tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2178
                self.table_constraint()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_definitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.constraint = None # Id_Context
            self.seed = None # Token
            self.increment = None # Token

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUIDCOL(self):
            return self.getToken(tsqlParser.ROWGUIDCOL, 0)

        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_constraintContext,i)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_definition" ):
                listener.enterColumn_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_definition" ):
                listener.exitColumn_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_definition" ):
                return visitor.visitColumn_definition(self)
            else:
                return visitor.visitChildren(self)




    def column_definition(self):

        localctx = tsqlParser.Column_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_column_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.id_()
            self.state = 2185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 2182
                self.data_type()
                pass
            elif token in [tsqlParser.AS]:
                self.state = 2183
                self.match(tsqlParser.AS)
                self.state = 2184
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COLLATE:
                self.state = 2187
                self.match(tsqlParser.COLLATE)
                self.state = 2188
                self.id_()


            self.state = 2192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 2191
                self.null_notnull()


            self.state = 2217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CONSTRAINT:
                    self.state = 2194
                    self.match(tsqlParser.CONSTRAINT)
                    self.state = 2195
                    localctx.constraint = self.id_()


                self.state = 2198
                self.match(tsqlParser.DEFAULT)
                self.state = 2199
                self.constant_expression()
                self.state = 2202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2200
                    self.match(tsqlParser.WITH)
                    self.state = 2201
                    self.match(tsqlParser.VALUES)



            elif la_ == 2:
                self.state = 2204
                self.match(tsqlParser.IDENTITY)
                self.state = 2210
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2205
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2206
                    localctx.seed = self.match(tsqlParser.DECIMAL)
                    self.state = 2207
                    self.match(tsqlParser.COMMA)
                    self.state = 2208
                    localctx.increment = self.match(tsqlParser.DECIMAL)
                    self.state = 2209
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 2212
                    self.match(tsqlParser.NOT)
                    self.state = 2213
                    self.match(tsqlParser.FOR)
                    self.state = 2214
                    self.match(tsqlParser.REPLICATION)




            self.state = 2220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ROWGUIDCOL:
                self.state = 2219
                self.match(tsqlParser.ROWGUIDCOL)


            self.state = 2225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2222
                    self.column_constraint() 
                self.state = 2227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pk = None # Column_name_listContext

        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def on_delete(self):
            return self.getTypedRuleContext(tsqlParser.On_deleteContext,0)


        def on_update(self):
            return self.getTypedRuleContext(tsqlParser.On_updateContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = tsqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 2228
                self.match(tsqlParser.CONSTRAINT)
                self.state = 2229
                self.id_()


            self.state = 2233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT or _la==tsqlParser.NULL:
                self.state = 2232
                self.null_notnull()


            self.state = 2271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 2238
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 2235
                    self.match(tsqlParser.PRIMARY)
                    self.state = 2236
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 2237
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 2240
                    self.clustered()


                self.state = 2244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 2243
                    self.index_options()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 2246
                self.match(tsqlParser.CHECK)
                self.state = 2250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2247
                    self.match(tsqlParser.NOT)
                    self.state = 2248
                    self.match(tsqlParser.FOR)
                    self.state = 2249
                    self.match(tsqlParser.REPLICATION)


                self.state = 2252
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2253
                self.search_condition()
                self.state = 2254
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.FOREIGN, tsqlParser.REFERENCES]:
                self.state = 2258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOREIGN:
                    self.state = 2256
                    self.match(tsqlParser.FOREIGN)
                    self.state = 2257
                    self.match(tsqlParser.KEY)


                self.state = 2260
                self.match(tsqlParser.REFERENCES)
                self.state = 2261
                self.table_name()
                self.state = 2262
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2263
                localctx.pk = self.column_name_list()
                self.state = 2264
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2266
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 2265
                    self.on_delete()


                self.state = 2269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 2268
                    self.on_update()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fk = None # Column_name_listContext
            self.pk = None # Column_name_listContext

        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_name_listContext,i)


        def CHECK(self):
            return self.getToken(tsqlParser.CHECK, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def FOREIGN(self):
            return self.getToken(tsqlParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(tsqlParser.KEY, 0)

        def REFERENCES(self):
            return self.getToken(tsqlParser.REFERENCES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def CONSTRAINT(self):
            return self.getToken(tsqlParser.CONSTRAINT, 0)

        def PRIMARY(self):
            return self.getToken(tsqlParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(tsqlParser.UNIQUE, 0)

        def clustered(self):
            return self.getTypedRuleContext(tsqlParser.ClusteredContext,0)


        def index_options(self):
            return self.getTypedRuleContext(tsqlParser.Index_optionsContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def REPLICATION(self):
            return self.getToken(tsqlParser.REPLICATION, 0)

        def on_delete(self):
            return self.getTypedRuleContext(tsqlParser.On_deleteContext,0)


        def on_update(self):
            return self.getTypedRuleContext(tsqlParser.On_updateContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = tsqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONSTRAINT:
                self.state = 2273
                self.match(tsqlParser.CONSTRAINT)
                self.state = 2274
                self.id_()


            self.state = 2335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.PRIMARY, tsqlParser.UNIQUE]:
                self.state = 2280
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.PRIMARY]:
                    self.state = 2277
                    self.match(tsqlParser.PRIMARY)
                    self.state = 2278
                    self.match(tsqlParser.KEY)
                    pass
                elif token in [tsqlParser.UNIQUE]:
                    self.state = 2279
                    self.match(tsqlParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED:
                    self.state = 2282
                    self.clustered()


                self.state = 2285
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2286
                self.column_name_list()
                self.state = 2288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                    self.state = 2287
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2290
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2291
                    self.index_options()


                self.state = 2296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 2294
                    self.match(tsqlParser.ON)
                    self.state = 2295
                    self.id_()


                pass
            elif token in [tsqlParser.CHECK]:
                self.state = 2298
                self.match(tsqlParser.CHECK)
                self.state = 2302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2299
                    self.match(tsqlParser.NOT)
                    self.state = 2300
                    self.match(tsqlParser.FOR)
                    self.state = 2301
                    self.match(tsqlParser.REPLICATION)


                self.state = 2304
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2305
                self.search_condition()
                self.state = 2306
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.DEFAULT]:
                self.state = 2308
                self.match(tsqlParser.DEFAULT)
                self.state = 2310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 2309
                    self.match(tsqlParser.LR_BRACKET)


                self.state = 2312
                self.function_call()
                self.state = 2314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.RR_BRACKET:
                    self.state = 2313
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2316
                self.match(tsqlParser.FOR)
                self.state = 2317
                self.id_()
                pass
            elif token in [tsqlParser.FOREIGN]:
                self.state = 2319
                self.match(tsqlParser.FOREIGN)
                self.state = 2320
                self.match(tsqlParser.KEY)
                self.state = 2321
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2322
                localctx.fk = self.column_name_list()
                self.state = 2323
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2324
                self.match(tsqlParser.REFERENCES)
                self.state = 2325
                self.table_name()
                self.state = 2326
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2327
                localctx.pk = self.column_name_list()
                self.state = 2328
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2330
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
                if la_ == 1:
                    self.state = 2329
                    self.on_delete()


                self.state = 2333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ON:
                    self.state = 2332
                    self.on_update()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_deleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def DELETE(self):
            return self.getToken(tsqlParser.DELETE, 0)

        def NO(self):
            return self.getToken(tsqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(tsqlParser.ACTION, 0)

        def CASCADE(self):
            return self.getToken(tsqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_delete" ):
                listener.enterOn_delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_delete" ):
                listener.exitOn_delete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_delete" ):
                return visitor.visitOn_delete(self)
            else:
                return visitor.visitChildren(self)




    def on_delete(self):

        localctx = tsqlParser.On_deleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_on_delete)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.match(tsqlParser.ON)
            self.state = 2338
            self.match(tsqlParser.DELETE)
            self.state = 2346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2339
                self.match(tsqlParser.NO)
                self.state = 2340
                self.match(tsqlParser.ACTION)
                pass

            elif la_ == 2:
                self.state = 2341
                self.match(tsqlParser.CASCADE)
                pass

            elif la_ == 3:
                self.state = 2342
                self.match(tsqlParser.SET)
                self.state = 2343
                self.match(tsqlParser.NULL)
                pass

            elif la_ == 4:
                self.state = 2344
                self.match(tsqlParser.SET)
                self.state = 2345
                self.match(tsqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_updateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def NO(self):
            return self.getToken(tsqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(tsqlParser.ACTION, 0)

        def CASCADE(self):
            return self.getToken(tsqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_update" ):
                listener.enterOn_update(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_update" ):
                listener.exitOn_update(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_update" ):
                return visitor.visitOn_update(self)
            else:
                return visitor.visitChildren(self)




    def on_update(self):

        localctx = tsqlParser.On_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_on_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2348
            self.match(tsqlParser.ON)
            self.state = 2349
            self.match(tsqlParser.UPDATE)
            self.state = 2357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 2350
                self.match(tsqlParser.NO)
                self.state = 2351
                self.match(tsqlParser.ACTION)
                pass

            elif la_ == 2:
                self.state = 2352
                self.match(tsqlParser.CASCADE)
                pass

            elif la_ == 3:
                self.state = 2353
                self.match(tsqlParser.SET)
                self.state = 2354
                self.match(tsqlParser.NULL)
                pass

            elif la_ == 4:
                self.state = 2355
                self.match(tsqlParser.SET)
                self.state = 2356
                self.match(tsqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def index_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_optionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_index_options

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_options" ):
                listener.enterIndex_options(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_options" ):
                listener.exitIndex_options(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_options" ):
                return visitor.visitIndex_options(self)
            else:
                return visitor.visitChildren(self)




    def index_options(self):

        localctx = tsqlParser.Index_optionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_index_options)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2359
            self.match(tsqlParser.WITH)
            self.state = 2360
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2361
            self.index_option()
            self.state = 2366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2362
                self.match(tsqlParser.COMMA)
                self.state = 2363
                self.index_option()
                self.state = 2368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2369
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Simple_idContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Simple_idContext,i)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_option" ):
                listener.enterIndex_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_option" ):
                listener.exitIndex_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_option" ):
                return visitor.visitIndex_option(self)
            else:
                return visitor.visitChildren(self)




    def index_option(self):

        localctx = tsqlParser.Index_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_index_option)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2371
            self.simple_id()
            self.state = 2372
            self.match(tsqlParser.EQUAL)
            self.state = 2376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.state = 2373
                self.simple_id()
                pass
            elif token in [tsqlParser.OFF, tsqlParser.ON]:
                self.state = 2374
                self.on_off()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.state = 2375
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(tsqlParser.DECLARE, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def CURSOR(self):
            return self.getToken(tsqlParser.CURSOR, 0)

        def FOR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.FOR)
            else:
                return self.getToken(tsqlParser.FOR, i)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def declare_set_cursor_common(self):
            return self.getTypedRuleContext(tsqlParser.Declare_set_cursor_commonContext,0)


        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def UPDATE(self):
            return self.getToken(tsqlParser.UPDATE, 0)

        def OF(self):
            return self.getToken(tsqlParser.OF, 0)

        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_declare_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_cursor" ):
                listener.enterDeclare_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_cursor" ):
                listener.exitDeclare_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_cursor" ):
                return visitor.visitDeclare_cursor(self)
            else:
                return visitor.visitChildren(self)




    def declare_cursor(self):

        localctx = tsqlParser.Declare_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_declare_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378
            self.match(tsqlParser.DECLARE)
            self.state = 2379
            self.cursor_name()
            self.state = 2411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.state = 2380
                self.match(tsqlParser.CURSOR)
                self.state = 2390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                if la_ == 1:
                    self.state = 2381
                    self.declare_set_cursor_common()
                    self.state = 2388
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.FOR:
                        self.state = 2382
                        self.match(tsqlParser.FOR)
                        self.state = 2383
                        self.match(tsqlParser.UPDATE)
                        self.state = 2386
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==tsqlParser.OF:
                            self.state = 2384
                            self.match(tsqlParser.OF)
                            self.state = 2385
                            self.column_name_list()






                pass

            elif la_ == 2:
                self.state = 2393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.INSENSITIVE:
                    self.state = 2392
                    self.match(tsqlParser.INSENSITIVE)


                self.state = 2396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.SCROLL:
                    self.state = 2395
                    self.match(tsqlParser.SCROLL)


                self.state = 2398
                self.match(tsqlParser.CURSOR)
                self.state = 2399
                self.match(tsqlParser.FOR)
                self.state = 2400
                self.select_statement()
                self.state = 2409
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.FOR:
                    self.state = 2401
                    self.match(tsqlParser.FOR)
                    self.state = 2407
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [tsqlParser.READ]:
                        self.state = 2402
                        self.match(tsqlParser.READ)
                        self.state = 2403
                        self.match(tsqlParser.ONLY)
                        pass
                    elif token in [tsqlParser.UPDATE]:
                        self.state = 2404
                        self.match(tsqlParser.UPDATE)
                        pass
                    elif token in [tsqlParser.OF]:
                        self.state = 2405
                        self.match(tsqlParser.OF)
                        self.state = 2406
                        self.column_name_list()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass


            self.state = 2414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 2413
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declare_set_cursor_commonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_declare_set_cursor_common

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclare_set_cursor_common" ):
                listener.enterDeclare_set_cursor_common(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclare_set_cursor_common" ):
                listener.exitDeclare_set_cursor_common(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclare_set_cursor_common" ):
                return visitor.visitDeclare_set_cursor_common(self)
            else:
                return visitor.visitChildren(self)




    def declare_set_cursor_common(self):

        localctx = tsqlParser.Declare_set_cursor_commonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_declare_set_cursor_common)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL:
                self.state = 2416
                _la = self._input.LA(1)
                if not(_la==tsqlParser.GLOBAL or _la==tsqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL:
                self.state = 2419
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORWARD_ONLY or _la==tsqlParser.SCROLL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (tsqlParser.DYNAMIC - 264)) | (1 << (tsqlParser.FAST_FORWARD - 264)) | (1 << (tsqlParser.KEYSET - 264)))) != 0) or _la==tsqlParser.STATIC:
                self.state = 2422
                _la = self._input.LA(1)
                if not(((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (tsqlParser.DYNAMIC - 264)) | (1 << (tsqlParser.FAST_FORWARD - 264)) | (1 << (tsqlParser.KEYSET - 264)))) != 0) or _la==tsqlParser.STATIC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & ((1 << (tsqlParser.OPTIMISTIC - 338)) | (1 << (tsqlParser.READ_ONLY - 338)) | (1 << (tsqlParser.SCROLL_LOCKS - 338)))) != 0):
                self.state = 2425
                _la = self._input.LA(1)
                if not(((((_la - 338)) & ~0x3f) == 0 and ((1 << (_la - 338)) & ((1 << (tsqlParser.OPTIMISTIC - 338)) | (1 << (tsqlParser.READ_ONLY - 338)) | (1 << (tsqlParser.SCROLL_LOCKS - 338)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TYPE_WARNING:
                self.state = 2428
                self.match(tsqlParser.TYPE_WARNING)


            self.state = 2431
            self.match(tsqlParser.FOR)
            self.state = 2432
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fetch_cursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def cursor_name(self):
            return self.getTypedRuleContext(tsqlParser.Cursor_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.LOCAL_ID)
            else:
                return self.getToken(tsqlParser.LOCAL_ID, i)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_fetch_cursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetch_cursor" ):
                listener.enterFetch_cursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetch_cursor" ):
                listener.exitFetch_cursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetch_cursor" ):
                return visitor.visitFetch_cursor(self)
            else:
                return visitor.visitChildren(self)




    def fetch_cursor(self):

        localctx = tsqlParser.Fetch_cursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_fetch_cursor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2434
            self.match(tsqlParser.FETCH)
            self.state = 2444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 2441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.NEXT]:
                    self.state = 2435
                    self.match(tsqlParser.NEXT)
                    pass
                elif token in [tsqlParser.PRIOR]:
                    self.state = 2436
                    self.match(tsqlParser.PRIOR)
                    pass
                elif token in [tsqlParser.FIRST]:
                    self.state = 2437
                    self.match(tsqlParser.FIRST)
                    pass
                elif token in [tsqlParser.LAST]:
                    self.state = 2438
                    self.match(tsqlParser.LAST)
                    pass
                elif token in [tsqlParser.ABSOLUTE, tsqlParser.RELATIVE]:
                    self.state = 2439
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ABSOLUTE or _la==tsqlParser.RELATIVE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2440
                    self.expression(0)
                    pass
                elif token in [tsqlParser.FROM]:
                    pass
                else:
                    pass
                self.state = 2443
                self.match(tsqlParser.FROM)


            self.state = 2447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.state = 2446
                self.match(tsqlParser.GLOBAL)


            self.state = 2449
            self.cursor_name()
            self.state = 2459
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 2450
                self.match(tsqlParser.INTO)
                self.state = 2451
                self.match(tsqlParser.LOCAL_ID)
                self.state = 2456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2452
                    self.match(tsqlParser.COMMA)
                    self.state = 2453
                    self.match(tsqlParser.LOCAL_ID)
                    self.state = 2458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,372,self._ctx)
            if la_ == 1:
                self.state = 2461
                self.match(tsqlParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Set_specialContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(tsqlParser.SET, 0)

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def constant_LOCAL_ID(self):
            return self.getTypedRuleContext(tsqlParser.Constant_LOCAL_IDContext,0)


        def on_off(self):
            return self.getTypedRuleContext(tsqlParser.On_offContext,0)


        def TRANSACTION(self):
            return self.getToken(tsqlParser.TRANSACTION, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def READ(self):
            return self.getToken(tsqlParser.READ, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def IDENTITY_INSERT(self):
            return self.getToken(tsqlParser.IDENTITY_INSERT, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def ANSI_NULLS(self):
            return self.getToken(tsqlParser.ANSI_NULLS, 0)

        def QUOTED_IDENTIFIER(self):
            return self.getToken(tsqlParser.QUOTED_IDENTIFIER, 0)

        def ANSI_PADDING(self):
            return self.getToken(tsqlParser.ANSI_PADDING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_set_special

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_special" ):
                listener.enterSet_special(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_special" ):
                listener.exitSet_special(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet_special" ):
                return visitor.visitSet_special(self)
            else:
                return visitor.visitChildren(self)




    def set_special(self):

        localctx = tsqlParser.Set_specialContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_set_special)
        try:
            self.state = 2507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2464
                self.match(tsqlParser.SET)
                self.state = 2465
                self.id_()
                self.state = 2469
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2466
                    self.id_()
                    pass
                elif token in [tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                    self.state = 2467
                    self.constant_LOCAL_ID()
                    pass
                elif token in [tsqlParser.OFF, tsqlParser.ON]:
                    self.state = 2468
                    self.on_off()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2472
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
                if la_ == 1:
                    self.state = 2471
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2474
                self.match(tsqlParser.SET)
                self.state = 2475
                self.match(tsqlParser.TRANSACTION)
                self.state = 2476
                self.match(tsqlParser.ISOLATION)
                self.state = 2477
                self.match(tsqlParser.LEVEL)
                self.state = 2486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,375,self._ctx)
                if la_ == 1:
                    self.state = 2478
                    self.match(tsqlParser.READ)
                    self.state = 2479
                    self.match(tsqlParser.UNCOMMITTED)
                    pass

                elif la_ == 2:
                    self.state = 2480
                    self.match(tsqlParser.READ)
                    self.state = 2481
                    self.match(tsqlParser.COMMITTED)
                    pass

                elif la_ == 3:
                    self.state = 2482
                    self.match(tsqlParser.REPEATABLE)
                    self.state = 2483
                    self.match(tsqlParser.READ)
                    pass

                elif la_ == 4:
                    self.state = 2484
                    self.match(tsqlParser.SNAPSHOT)
                    pass

                elif la_ == 5:
                    self.state = 2485
                    self.match(tsqlParser.SERIALIZABLE)
                    pass


                self.state = 2489
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
                if la_ == 1:
                    self.state = 2488
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2491
                self.match(tsqlParser.SET)
                self.state = 2492
                self.match(tsqlParser.IDENTITY_INSERT)
                self.state = 2493
                self.table_name()
                self.state = 2494
                self.on_off()
                self.state = 2496
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
                if la_ == 1:
                    self.state = 2495
                    self.match(tsqlParser.SEMI)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2498
                self.match(tsqlParser.SET)
                self.state = 2499
                self.match(tsqlParser.ANSI_NULLS)
                self.state = 2500
                self.on_off()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2501
                self.match(tsqlParser.SET)
                self.state = 2502
                self.match(tsqlParser.QUOTED_IDENTIFIER)
                self.state = 2503
                self.on_off()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2504
                self.match(tsqlParser.SET)
                self.state = 2505
                self.match(tsqlParser.ANSI_PADDING)
                self.state = 2506
                self.on_off()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constant_LOCAL_IDContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant_LOCAL_ID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_LOCAL_ID" ):
                listener.enterConstant_LOCAL_ID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_LOCAL_ID" ):
                listener.exitConstant_LOCAL_ID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_LOCAL_ID" ):
                return visitor.visitConstant_LOCAL_ID(self)
            else:
                return visitor.visitChildren(self)




    def constant_LOCAL_ID(self):

        localctx = tsqlParser.Constant_LOCAL_IDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_constant_LOCAL_ID)
        try:
            self.state = 2511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2509
                self.constant()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2510
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Binary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_operator_expression" ):
                listener.enterBinary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_operator_expression" ):
                listener.exitBinary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary_operator_expression" ):
                return visitor.visitBinary_operator_expression(self)
            else:
                return visitor.visitChildren(self)


    class Primitive_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)
        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)
        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)
        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_expression" ):
                listener.enterPrimitive_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_expression" ):
                listener.exitPrimitive_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitive_expression" ):
                return visitor.visitPrimitive_expression(self)
            else:
                return visitor.visitChildren(self)


    class Bracket_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracket_expression" ):
                listener.enterBracket_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracket_expression" ):
                listener.exitBracket_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracket_expression" ):
                return visitor.visitBracket_expression(self)
            else:
                return visitor.visitChildren(self)


    class Unary_operator_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator_expression" ):
                listener.enterUnary_operator_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator_expression" ):
                listener.exitUnary_operator_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator_expression" ):
                return visitor.visitUnary_operator_expression(self)
            else:
                return visitor.visitChildren(self)


    class Function_call_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)

        def COLLATE(self):
            return self.getToken(tsqlParser.COLLATE, 0)
        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call_expression" ):
                listener.enterFunction_call_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call_expression" ):
                listener.exitFunction_call_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call_expression" ):
                return visitor.visitFunction_call_expression(self)
            else:
                return visitor.visitChildren(self)


    class Case_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.caseExpr = None # ExpressionContext
            self.elseExpr = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(tsqlParser.CASE, 0)
        def END(self):
            return self.getToken(tsqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)

        def switch_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_sectionContext,i)

        def ELSE(self):
            return self.getToken(tsqlParser.ELSE, 0)
        def switch_search_condition_section(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Switch_search_condition_sectionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Switch_search_condition_sectionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_expression" ):
                listener.enterCase_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_expression" ):
                listener.exitCase_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_expression" ):
                return visitor.visitCase_expression(self)
            else:
                return visitor.visitChildren(self)


    class Column_ref_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_ref_expression" ):
                listener.enterColumn_ref_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_ref_expression" ):
                listener.exitColumn_ref_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_ref_expression" ):
                return visitor.visitColumn_ref_expression(self)
            else:
                return visitor.visitChildren(self)


    class Subquery_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery_expression" ):
                listener.enterSubquery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery_expression" ):
                listener.exitSubquery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery_expression" ):
                return visitor.visitSubquery_expression(self)
            else:
                return visitor.visitChildren(self)


    class Over_clause_expressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a tsqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause_expression" ):
                listener.enterOver_clause_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause_expression" ):
                listener.exitOver_clause_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause_expression" ):
                return visitor.visitOver_clause_expression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = tsqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 220
        self.enterRecursionRule(localctx, 220, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2514
                self.match(tsqlParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2515
                self.match(tsqlParser.NULL)
                pass

            elif la_ == 3:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2516
                self.match(tsqlParser.LOCAL_ID)
                pass

            elif la_ == 4:
                localctx = tsqlParser.Primitive_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2517
                self.constant()
                pass

            elif la_ == 5:
                localctx = tsqlParser.Function_call_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2518
                self.function_call()
                pass

            elif la_ == 6:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2519
                self.match(tsqlParser.CASE)
                self.state = 2520
                localctx.caseExpr = self.expression(0)
                self.state = 2522 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2521
                    self.switch_section()
                    self.state = 2524 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 2528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 2526
                    self.match(tsqlParser.ELSE)
                    self.state = 2527
                    localctx.elseExpr = self.expression(0)


                self.state = 2530
                self.match(tsqlParser.END)
                pass

            elif la_ == 7:
                localctx = tsqlParser.Case_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2532
                self.match(tsqlParser.CASE)
                self.state = 2534 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2533
                    self.switch_search_condition_section()
                    self.state = 2536 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==tsqlParser.WHEN):
                        break

                self.state = 2540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ELSE:
                    self.state = 2538
                    self.match(tsqlParser.ELSE)
                    self.state = 2539
                    localctx.elseExpr = self.expression(0)


                self.state = 2542
                self.match(tsqlParser.END)
                pass

            elif la_ == 8:
                localctx = tsqlParser.Column_ref_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2544
                self.full_column_name()
                pass

            elif la_ == 9:
                localctx = tsqlParser.Bracket_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2545
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2546
                self.expression(0)
                self.state = 2547
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = tsqlParser.Subquery_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2549
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2550
                self.subquery()
                self.state = 2551
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2553
                self.match(tsqlParser.BIT_NOT)
                self.state = 2554
                self.expression(6)
                pass

            elif la_ == 12:
                localctx = tsqlParser.Unary_operator_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2555
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2556
                self.expression(4)
                pass

            elif la_ == 13:
                localctx = tsqlParser.Over_clause_expressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2557
                self.over_clause()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2575
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,386,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2573
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                    if la_ == 1:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2560
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2561
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 449)) & ~0x3f) == 0 and ((1 << (_la - 449)) & ((1 << (tsqlParser.STAR - 449)) | (1 << (tsqlParser.DIVIDE - 449)) | (1 << (tsqlParser.MODULE - 449)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2562
                        self.expression(6)
                        pass

                    elif la_ == 2:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2563
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2564
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 452)) & ~0x3f) == 0 and ((1 << (_la - 452)) & ((1 << (tsqlParser.PLUS - 452)) | (1 << (tsqlParser.MINUS - 452)) | (1 << (tsqlParser.BIT_OR - 452)) | (1 << (tsqlParser.BIT_AND - 452)) | (1 << (tsqlParser.BIT_XOR - 452)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2565
                        self.expression(4)
                        pass

                    elif la_ == 3:
                        localctx = tsqlParser.Binary_operator_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2566
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2567
                        self.comparison_operator()
                        self.state = 2568
                        self.expression(3)
                        pass

                    elif la_ == 4:
                        localctx = tsqlParser.Function_call_expressionContext(self, tsqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 2570
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 2571
                        self.match(tsqlParser.COLLATE)
                        self.state = 2572
                        self.id_()
                        pass

             
                self.state = 2577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,386,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Constant_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def constant_expression(self):
            return self.getTypedRuleContext(tsqlParser.Constant_expressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_constant_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_expression" ):
                listener.enterConstant_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_expression" ):
                listener.exitConstant_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant_expression" ):
                return visitor.visitConstant_expression(self)
            else:
                return visitor.visitChildren(self)




    def constant_expression(self):

        localctx = tsqlParser.Constant_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_constant_expression)
        try:
            self.state = 2586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2578
                self.match(tsqlParser.NULL)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2579
                self.constant()
                pass
            elif token in [tsqlParser.CALLED, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NULLIF, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.RIGHT, tsqlParser.SERVER, tsqlParser.SESSION_USER, tsqlParser.SOURCE, tsqlParser.SYSTEM_USER, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.GETDATE, tsqlParser.GETUTCDATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2580
                self.function_call()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2581
                self.match(tsqlParser.LOCAL_ID)
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2582
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2583
                self.constant_expression()
                self.state = 2584
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = tsqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.select_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Common_table_expressionContext,i)


        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_expression" ):
                listener.enterWith_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_expression" ):
                listener.exitWith_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_expression" ):
                return visitor.visitWith_expression(self)
            else:
                return visitor.visitChildren(self)




    def with_expression(self):

        localctx = tsqlParser.With_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_with_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.match(tsqlParser.WITH)
            self.state = 2593
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                self.state = 2591
                self.match(tsqlParser.XMLNAMESPACES)
                self.state = 2592
                self.match(tsqlParser.COMMA)


            self.state = 2595
            self.common_table_expression()
            self.state = 2600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2596
                self.match(tsqlParser.COMMA)
                self.state = 2597
                self.common_table_expression()
                self.state = 2602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expression_name = None # Id_Context

        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def select_statement(self):
            return self.getTypedRuleContext(tsqlParser.Select_statementContext,0)


        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def column_name_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_name_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = tsqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2603
            localctx.expression_name = self.id_()
            self.state = 2608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.LR_BRACKET:
                self.state = 2604
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2605
                self.column_name_list()
                self.state = 2606
                self.match(tsqlParser.RR_BRACKET)


            self.state = 2610
            self.match(tsqlParser.AS)
            self.state = 2611
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2612
            self.select_statement()
            self.state = 2613
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.udt_column_name = None # Id_Context
            self.method_name = None # Id_Context

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def full_column_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_column_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(tsqlParser.Assignment_operatorContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_update_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_elem" ):
                listener.enterUpdate_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_elem" ):
                listener.exitUpdate_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_elem" ):
                return visitor.visitUpdate_elem(self)
            else:
                return visitor.visitChildren(self)




    def update_elem(self):

        localctx = tsqlParser.Update_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_update_elem)
        try:
            self.state = 2631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2617
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 2615
                    self.full_column_name()
                    pass
                elif token in [tsqlParser.LOCAL_ID]:
                    self.state = 2616
                    self.match(tsqlParser.LOCAL_ID)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2621
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.EQUAL]:
                    self.state = 2619
                    self.match(tsqlParser.EQUAL)
                    pass
                elif token in [tsqlParser.PLUS_ASSIGN, tsqlParser.MINUS_ASSIGN, tsqlParser.MULT_ASSIGN, tsqlParser.DIV_ASSIGN, tsqlParser.MOD_ASSIGN, tsqlParser.AND_ASSIGN, tsqlParser.XOR_ASSIGN, tsqlParser.OR_ASSIGN]:
                    self.state = 2620
                    self.assignment_operator()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2623
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2624
                localctx.udt_column_name = self.id_()
                self.state = 2625
                self.match(tsqlParser.DOT)
                self.state = 2626
                localctx.method_name = self.id_()
                self.state = 2627
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2628
                self.expression_list()
                self.state = 2629
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_list" ):
                listener.enterSearch_condition_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_list" ):
                listener.exitSearch_condition_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_list" ):
                return visitor.visitSearch_condition_list(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_list(self):

        localctx = tsqlParser.Search_condition_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_search_condition_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2633
            self.search_condition()
            self.state = 2638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2634
                self.match(tsqlParser.COMMA)
                self.state = 2635
                self.search_condition()
                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition_and(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_condition_andContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_condition_andContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.OR)
            else:
                return self.getToken(tsqlParser.OR, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition" ):
                listener.enterSearch_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition" ):
                listener.exitSearch_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition" ):
                return visitor.visitSearch_condition(self)
            else:
                return visitor.visitChildren(self)




    def search_condition(self):

        localctx = tsqlParser.Search_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_search_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2641
            self.search_condition_and()
            self.state = 2646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.OR:
                self.state = 2642
                self.match(tsqlParser.OR)
                self.state = 2643
                self.search_condition_and()
                self.state = 2648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_andContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def search_condition_not(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_condition_notContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_condition_notContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.AND)
            else:
                return self.getToken(tsqlParser.AND, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_and" ):
                listener.enterSearch_condition_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_and" ):
                listener.exitSearch_condition_and(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_and" ):
                return visitor.visitSearch_condition_and(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_and(self):

        localctx = tsqlParser.Search_condition_andContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_search_condition_and)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649
            self.search_condition_not()
            self.state = 2654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.AND:
                self.state = 2650
                self.match(tsqlParser.AND)
                self.state = 2651
                self.search_condition_not()
                self.state = 2656
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Search_condition_notContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def predicate(self):
            return self.getTypedRuleContext(tsqlParser.PredicateContext,0)


        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_search_condition_not

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSearch_condition_not" ):
                listener.enterSearch_condition_not(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSearch_condition_not" ):
                listener.exitSearch_condition_not(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearch_condition_not" ):
                return visitor.visitSearch_condition_not(self)
            else:
                return visitor.visitChildren(self)




    def search_condition_not(self):

        localctx = tsqlParser.Search_condition_notContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_search_condition_not)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 2657
                self.match(tsqlParser.NOT)


            self.state = 2660
            self.predicate()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(tsqlParser.EXISTS, 0)

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def comparison_operator(self):
            return self.getTypedRuleContext(tsqlParser.Comparison_operatorContext,0)


        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def SOME(self):
            return self.getToken(tsqlParser.SOME, 0)

        def ANY(self):
            return self.getToken(tsqlParser.ANY, 0)

        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def IN(self):
            return self.getToken(tsqlParser.IN, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def LIKE(self):
            return self.getToken(tsqlParser.LIKE, 0)

        def ESCAPE(self):
            return self.getToken(tsqlParser.ESCAPE, 0)

        def IS(self):
            return self.getToken(tsqlParser.IS, 0)

        def null_notnull(self):
            return self.getTypedRuleContext(tsqlParser.Null_notnullContext,0)


        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_predicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicate" ):
                listener.enterPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicate" ):
                listener.exitPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = tsqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 2717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2662
                self.match(tsqlParser.EXISTS)
                self.state = 2663
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2664
                self.subquery()
                self.state = 2665
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2667
                self.expression(0)
                self.state = 2668
                self.comparison_operator()
                self.state = 2669
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2671
                self.expression(0)
                self.state = 2672
                self.comparison_operator()
                self.state = 2673
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.ANY or _la==tsqlParser.SOME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2674
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2675
                self.subquery()
                self.state = 2676
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2678
                self.expression(0)
                self.state = 2680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2679
                    self.match(tsqlParser.NOT)


                self.state = 2682
                self.match(tsqlParser.BETWEEN)
                self.state = 2683
                self.expression(0)
                self.state = 2684
                self.match(tsqlParser.AND)
                self.state = 2685
                self.expression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2687
                self.expression(0)
                self.state = 2689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2688
                    self.match(tsqlParser.NOT)


                self.state = 2691
                self.match(tsqlParser.IN)
                self.state = 2692
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2695
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
                if la_ == 1:
                    self.state = 2693
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 2694
                    self.expression_list()
                    pass


                self.state = 2697
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2699
                self.expression(0)
                self.state = 2701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.NOT:
                    self.state = 2700
                    self.match(tsqlParser.NOT)


                self.state = 2703
                self.match(tsqlParser.LIKE)
                self.state = 2704
                self.expression(0)
                self.state = 2707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ESCAPE:
                    self.state = 2705
                    self.match(tsqlParser.ESCAPE)
                    self.state = 2706
                    self.expression(0)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2709
                self.expression(0)
                self.state = 2710
                self.match(tsqlParser.IS)
                self.state = 2711
                self.null_notnull()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2713
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2714
                self.search_condition()
                self.state = 2715
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.UnionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.UnionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_expression" ):
                return visitor.visitQuery_expression(self)
            else:
                return visitor.visitChildren(self)




    def query_expression(self):

        localctx = tsqlParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.SELECT]:
                self.state = 2719
                self.query_specification()
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.state = 2720
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2721
                self.query_expression()
                self.state = 2722
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2729
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,405,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2726
                    self.union() 
                self.state = 2731
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,405,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def EXCEPT(self):
            return self.getToken(tsqlParser.EXCEPT, 0)

        def INTERSECT(self):
            return self.getToken(tsqlParser.INTERSECT, 0)

        def query_specification(self):
            return self.getTypedRuleContext(tsqlParser.Query_specificationContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(tsqlParser.Query_expressionContext,0)


        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnion" ):
                listener.enterUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnion" ):
                listener.exitUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnion" ):
                return visitor.visitUnion(self)
            else:
                return visitor.visitChildren(self)




    def union(self):

        localctx = tsqlParser.UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_union)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNION]:
                self.state = 2732
                self.match(tsqlParser.UNION)
                self.state = 2734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ALL:
                    self.state = 2733
                    self.match(tsqlParser.ALL)


                pass
            elif token in [tsqlParser.EXCEPT]:
                self.state = 2736
                self.match(tsqlParser.EXCEPT)
                pass
            elif token in [tsqlParser.INTERSECT]:
                self.state = 2737
                self.match(tsqlParser.INTERSECT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2745
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.SELECT]:
                self.state = 2740
                self.query_specification()
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.state = 2741
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2742
                self.query_expression()
                self.state = 2743
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Query_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.where = None # Search_conditionContext
            self.having = None # Search_conditionContext

        def SELECT(self):
            return self.getToken(tsqlParser.SELECT, 0)

        def select_list(self):
            return self.getTypedRuleContext(tsqlParser.Select_listContext,0)


        def top_clause(self):
            return self.getTypedRuleContext(tsqlParser.Top_clauseContext,0)


        def INTO(self):
            return self.getToken(tsqlParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def FROM(self):
            return self.getToken(tsqlParser.FROM, 0)

        def table_sources(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourcesContext,0)


        def WHERE(self):
            return self.getToken(tsqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def group_by_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Group_by_itemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Group_by_itemContext,i)


        def HAVING(self):
            return self.getToken(tsqlParser.HAVING, 0)

        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def search_condition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Search_conditionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Search_conditionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_query_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_specification" ):
                listener.enterQuery_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_specification" ):
                listener.exitQuery_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery_specification" ):
                return visitor.visitQuery_specification(self)
            else:
                return visitor.visitChildren(self)




    def query_specification(self):

        localctx = tsqlParser.Query_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_query_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2747
            self.match(tsqlParser.SELECT)
            self.state = 2749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                self.state = 2748
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.TOP:
                self.state = 2751
                self.top_clause()


            self.state = 2754
            self.select_list()
            self.state = 2757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.INTO:
                self.state = 2755
                self.match(tsqlParser.INTO)
                self.state = 2756
                self.table_name()


            self.state = 2761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FROM:
                self.state = 2759
                self.match(tsqlParser.FROM)
                self.state = 2760
                self.table_sources()


            self.state = 2765
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
            if la_ == 1:
                self.state = 2763
                self.match(tsqlParser.WHERE)
                self.state = 2764
                localctx.where = self.search_condition()


            self.state = 2777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 2767
                self.match(tsqlParser.GROUP)
                self.state = 2768
                self.match(tsqlParser.BY)
                self.state = 2769
                self.group_by_item()
                self.state = 2774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,414,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2770
                        self.match(tsqlParser.COMMA)
                        self.state = 2771
                        self.group_by_item() 
                    self.state = 2776
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,414,self._ctx)



            self.state = 2781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 2779
                self.match(tsqlParser.HAVING)
                self.state = 2780
                localctx.having = self.search_condition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Top_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(tsqlParser.TOP, 0)

        def top_percent(self):
            return self.getTypedRuleContext(tsqlParser.Top_percentContext,0)


        def top_count(self):
            return self.getTypedRuleContext(tsqlParser.Top_countContext,0)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_top_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_clause" ):
                listener.enterTop_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_clause" ):
                listener.exitTop_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_clause" ):
                return visitor.visitTop_clause(self)
            else:
                return visitor.visitChildren(self)




    def top_clause(self):

        localctx = tsqlParser.Top_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_top_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2783
            self.match(tsqlParser.TOP)
            self.state = 2786
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,417,self._ctx)
            if la_ == 1:
                self.state = 2784
                self.top_percent()
                pass

            elif la_ == 2:
                self.state = 2785
                self.top_count()
                pass


            self.state = 2790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 2788
                self.match(tsqlParser.WITH)
                self.state = 2789
                self.match(tsqlParser.TIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Top_percentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PERCENT(self):
            return self.getToken(tsqlParser.PERCENT, 0)

        def REAL(self):
            return self.getToken(tsqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(tsqlParser.FLOAT, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_top_percent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_percent" ):
                listener.enterTop_percent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_percent" ):
                listener.exitTop_percent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_percent" ):
                return visitor.visitTop_percent(self)
            else:
                return visitor.visitChildren(self)




    def top_percent(self):

        localctx = tsqlParser.Top_percentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_top_percent)
        self._la = 0 # Token type
        try:
            self.state = 2799
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FLOAT, tsqlParser.REAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2792
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FLOAT or _la==tsqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2793
                self.match(tsqlParser.PERCENT)
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2794
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2795
                self.expression(0)
                self.state = 2796
                self.match(tsqlParser.RR_BRACKET)
                self.state = 2797
                self.match(tsqlParser.PERCENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Top_countContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_top_count

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTop_count" ):
                listener.enterTop_count(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTop_count" ):
                listener.exitTop_count(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTop_count" ):
                return visitor.visitTop_count(self)
            else:
                return visitor.visitChildren(self)




    def top_count(self):

        localctx = tsqlParser.Top_countContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_top_count)
        try:
            self.state = 2806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2801
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2802
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2803
                self.expression(0)
                self.state = 2804
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def order_by_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Order_by_expressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Order_by_expressionContext,i)


        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def ROW(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ROW)
            else:
                return self.getToken(tsqlParser.ROW, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ROWS)
            else:
                return self.getToken(tsqlParser.ROWS, i)

        def FETCH(self):
            return self.getToken(tsqlParser.FETCH, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_clause" ):
                listener.enterOrder_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_clause" ):
                listener.exitOrder_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_clause" ):
                return visitor.visitOrder_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def order_by_clause(self):

        localctx = tsqlParser.Order_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_order_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2808
            self.match(tsqlParser.ORDER)
            self.state = 2809
            self.match(tsqlParser.BY)
            self.state = 2810
            self.order_by_expression()
            self.state = 2815
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2811
                    self.match(tsqlParser.COMMA)
                    self.state = 2812
                    self.order_by_expression() 
                self.state = 2817
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

            self.state = 2829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
            if la_ == 1:
                self.state = 2818
                self.match(tsqlParser.OFFSET)
                self.state = 2819
                self.expression(0)
                self.state = 2820
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
                if la_ == 1:
                    self.state = 2821
                    self.match(tsqlParser.FETCH)
                    self.state = 2822
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.FIRST or _la==tsqlParser.NEXT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2823
                    self.expression(0)
                    self.state = 2824
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ROW or _la==tsqlParser.ROWS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2825
                    self.match(tsqlParser.ONLY)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class For_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def BROWSE(self):
            return self.getToken(tsqlParser.BROWSE, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def xml_common_directives(self):
            return self.getTypedRuleContext(tsqlParser.Xml_common_directivesContext,0)


        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_for_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_clause" ):
                listener.enterFor_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_clause" ):
                listener.exitFor_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_clause" ):
                return visitor.visitFor_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_clause(self):

        localctx = tsqlParser.For_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_for_clause)
        try:
            self.state = 2850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,427,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2831
                self.match(tsqlParser.FOR)
                self.state = 2832
                self.match(tsqlParser.BROWSE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2833
                self.match(tsqlParser.FOR)
                self.state = 2834
                self.match(tsqlParser.XML)
                self.state = 2835
                self.match(tsqlParser.AUTO)
                self.state = 2837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 2836
                    self.xml_common_directives()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2839
                self.match(tsqlParser.FOR)
                self.state = 2840
                self.match(tsqlParser.XML)
                self.state = 2841
                self.match(tsqlParser.PATH)
                self.state = 2845
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
                if la_ == 1:
                    self.state = 2842
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 2843
                    self.match(tsqlParser.STRING)
                    self.state = 2844
                    self.match(tsqlParser.RR_BRACKET)


                self.state = 2848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                if la_ == 1:
                    self.state = 2847
                    self.xml_common_directives()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xml_common_directivesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_xml_common_directives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXml_common_directives" ):
                listener.enterXml_common_directives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXml_common_directives" ):
                listener.exitXml_common_directives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXml_common_directives" ):
                return visitor.visitXml_common_directives(self)
            else:
                return visitor.visitChildren(self)




    def xml_common_directives(self):

        localctx = tsqlParser.Xml_common_directivesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_xml_common_directives)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2852
            self.match(tsqlParser.COMMA)
            self.state = 2857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.BINARY]:
                self.state = 2853
                self.match(tsqlParser.BINARY)
                self.state = 2854
                self.match(tsqlParser.BASE64)
                pass
            elif token in [tsqlParser.TYPE]:
                self.state = 2855
                self.match(tsqlParser.TYPE)
                pass
            elif token in [tsqlParser.ROOT]:
                self.state = 2856
                self.match(tsqlParser.ROOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Order_by_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(tsqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(tsqlParser.DESC, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_order_by_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expression" ):
                listener.enterOrder_by_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expression" ):
                listener.exitOrder_by_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_expression" ):
                return visitor.visitOrder_by_expression(self)
            else:
                return visitor.visitChildren(self)




    def order_by_expression(self):

        localctx = tsqlParser.Order_by_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_order_by_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2859
            self.expression(0)
            self.state = 2861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                self.state = 2860
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Group_by_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_group_by_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_item" ):
                listener.enterGroup_by_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_item" ):
                listener.exitGroup_by_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_item" ):
                return visitor.visitGroup_by_item(self)
            else:
                return visitor.visitChildren(self)




    def group_by_item(self):

        localctx = tsqlParser.Group_by_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_group_by_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2863
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Option_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(tsqlParser.OPTION, 0)

        def option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.OptionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.OptionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_option_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption_clause" ):
                listener.enterOption_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption_clause" ):
                listener.exitOption_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption_clause" ):
                return visitor.visitOption_clause(self)
            else:
                return visitor.visitChildren(self)




    def option_clause(self):

        localctx = tsqlParser.Option_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_option_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2865
            self.match(tsqlParser.OPTION)
            self.state = 2866
            self.match(tsqlParser.LR_BRACKET)
            self.state = 2867
            self.option()
            self.state = 2872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 2868
                self.match(tsqlParser.COMMA)
                self.state = 2869
                self.option()
                self.state = 2874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2875
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.number_rows = None # Token
            self.number_of_processors = None # Token
            self.number_recursion = None # Token

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def GROUP(self):
            return self.getToken(tsqlParser.GROUP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def ORDER(self):
            return self.getToken(tsqlParser.ORDER, 0)

        def UNION(self):
            return self.getToken(tsqlParser.UNION, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def PLAN(self):
            return self.getToken(tsqlParser.PLAN, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def FOR(self):
            return self.getToken(tsqlParser.FOR, 0)

        def optimize_for_arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Optimize_for_argContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Optimize_for_argContext,i)


        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def USE(self):
            return self.getToken(tsqlParser.USE, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOption" ):
                listener.enterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOption" ):
                listener.exitOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOption" ):
                return visitor.visitOption(self)
            else:
                return visitor.visitChildren(self)




    def option(self):

        localctx = tsqlParser.OptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_option)
        self._la = 0 # Token type
        try:
            self.state = 2922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2877
                self.match(tsqlParser.FAST)
                self.state = 2878
                localctx.number_rows = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2879
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ORDER or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2880
                self.match(tsqlParser.GROUP)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2881
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.CONCAT or _la==tsqlParser.HASH):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2882
                self.match(tsqlParser.UNION)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2883
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2884
                self.match(tsqlParser.JOIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2885
                self.match(tsqlParser.EXPAND)
                self.state = 2886
                self.match(tsqlParser.VIEWS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2887
                self.match(tsqlParser.FORCE)
                self.state = 2888
                self.match(tsqlParser.ORDER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2889
                self.match(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2890
                self.match(tsqlParser.KEEP)
                self.state = 2891
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2892
                self.match(tsqlParser.KEEPFIXED)
                self.state = 2893
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2894
                self.match(tsqlParser.MAXDOP)
                self.state = 2895
                localctx.number_of_processors = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2896
                self.match(tsqlParser.MAXRECURSION)
                self.state = 2897
                localctx.number_recursion = self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2898
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2899
                self.match(tsqlParser.FOR)
                self.state = 2900
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2901
                self.optimize_for_arg()
                self.state = 2906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 2902
                    self.match(tsqlParser.COMMA)
                    self.state = 2903
                    self.optimize_for_arg()
                    self.state = 2908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2909
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2911
                self.match(tsqlParser.OPTIMIZE)
                self.state = 2912
                self.match(tsqlParser.FOR)
                self.state = 2913
                self.match(tsqlParser.UNKNOWN)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2914
                self.match(tsqlParser.PARAMETERIZATION)
                self.state = 2915
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FORCED or _la==tsqlParser.SIMPLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2916
                self.match(tsqlParser.RECOMPILE)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2917
                self.match(tsqlParser.ROBUST)
                self.state = 2918
                self.match(tsqlParser.PLAN)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2919
                self.match(tsqlParser.USE)
                self.state = 2920
                self.match(tsqlParser.PLAN)
                self.state = 2921
                self.match(tsqlParser.STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Optimize_for_argContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_optimize_for_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimize_for_arg" ):
                listener.enterOptimize_for_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimize_for_arg" ):
                listener.exitOptimize_for_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimize_for_arg" ):
                return visitor.visitOptimize_for_arg(self)
            else:
                return visitor.visitChildren(self)




    def optimize_for_arg(self):

        localctx = tsqlParser.Optimize_for_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_optimize_for_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2924
            self.match(tsqlParser.LOCAL_ID)
            self.state = 2928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNKNOWN]:
                self.state = 2925
                self.match(tsqlParser.UNKNOWN)
                pass
            elif token in [tsqlParser.EQUAL]:
                self.state = 2926
                self.match(tsqlParser.EQUAL)
                self.state = 2927
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_list_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Select_list_elemContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Select_list_elemContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list" ):
                return visitor.visitSelect_list(self)
            else:
                return visitor.visitChildren(self)




    def select_list(self):

        localctx = tsqlParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_select_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2930
            self.select_list_elem()
            self.state = 2935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2931
                    self.match(tsqlParser.COMMA)
                    self.state = 2932
                    self.select_list_elem() 
                self.state = 2937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,434,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_list_elemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def column_alias(self):
            return self.getTypedRuleContext(tsqlParser.Column_aliasContext,0)


        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_select_list_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list_elem" ):
                listener.enterSelect_list_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list_elem" ):
                listener.exitSelect_list_elem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_list_elem" ):
                return visitor.visitSelect_list_elem(self)
            else:
                return visitor.visitChildren(self)




    def select_list_elem(self):

        localctx = tsqlParser.Select_list_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_select_list_elem)
        self._la = 0 # Token type
        try:
            self.state = 2959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (tsqlParser.CALLED - 18)) | (1 << (tsqlParser.DATA_COMPRESSION - 18)) | (1 << (tsqlParser.EVENTDATA - 18)) | (1 << (tsqlParser.FILLFACTOR - 18)) | (1 << (tsqlParser.FORCESEEK - 18)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.ID - 400)))) != 0):
                    self.state = 2938
                    self.table_name()
                    self.state = 2939
                    self.match(tsqlParser.DOT)


                self.state = 2946
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 2943
                    self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.DOLLAR]:
                    self.state = 2944
                    self.match(tsqlParser.DOLLAR)
                    self.state = 2945
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.IDENTITY or _la==tsqlParser.ROWGUID):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2948
                self.column_alias()
                self.state = 2949
                self.match(tsqlParser.EQUAL)
                self.state = 2950
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2952
                self.expression(0)
                self.state = 2957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
                if la_ == 1:
                    self.state = 2954
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.AS:
                        self.state = 2953
                        self.match(tsqlParser.AS)


                    self.state = 2956
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_sourceContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_sourceContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_sources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_sources" ):
                listener.enterTable_sources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_sources" ):
                listener.exitTable_sources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_sources" ):
                return visitor.visitTable_sources(self)
            else:
                return visitor.visitChildren(self)




    def table_sources(self):

        localctx = tsqlParser.Table_sourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_table_sources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2961
            self.table_source()
            self.state = 2966
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,440,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2962
                    self.match(tsqlParser.COMMA)
                    self.state = 2963
                    self.table_source() 
                self.state = 2968
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,440,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item_joined(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_item_joinedContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source" ):
                listener.enterTable_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source" ):
                listener.exitTable_source(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source" ):
                return visitor.visitTable_source(self)
            else:
                return visitor.visitChildren(self)




    def table_source(self):

        localctx = tsqlParser.Table_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_table_source)
        try:
            self.state = 2974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2969
                self.table_source_item_joined()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2970
                self.match(tsqlParser.LR_BRACKET)
                self.state = 2971
                self.table_source_item_joined()
                self.state = 2972
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_source_item_joinedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_source_item(self):
            return self.getTypedRuleContext(tsqlParser.Table_source_itemContext,0)


        def join_part(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Join_partContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Join_partContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item_joined

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item_joined" ):
                listener.enterTable_source_item_joined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item_joined" ):
                listener.exitTable_source_item_joined(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item_joined" ):
                return visitor.visitTable_source_item_joined(self)
            else:
                return visitor.visitChildren(self)




    def table_source_item_joined(self):

        localctx = tsqlParser.Table_source_item_joinedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_table_source_item_joined)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2976
            self.table_source_item()
            self.state = 2980
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,442,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2977
                    self.join_part() 
                self.state = 2982
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,442,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_source_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name_with_hint(self):
            return self.getTypedRuleContext(tsqlParser.Table_name_with_hintContext,0)


        def as_table_alias(self):
            return self.getTypedRuleContext(tsqlParser.As_table_aliasContext,0)


        def rowset_function(self):
            return self.getTypedRuleContext(tsqlParser.Rowset_functionContext,0)


        def derived_table(self):
            return self.getTypedRuleContext(tsqlParser.Derived_tableContext,0)


        def column_alias_list(self):
            return self.getTypedRuleContext(tsqlParser.Column_alias_listContext,0)


        def change_table(self):
            return self.getTypedRuleContext(tsqlParser.Change_tableContext,0)


        def function_call(self):
            return self.getTypedRuleContext(tsqlParser.Function_callContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_source_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_source_item" ):
                listener.enterTable_source_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_source_item" ):
                listener.exitTable_source_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_source_item" ):
                return visitor.visitTable_source_item(self)
            else:
                return visitor.visitChildren(self)




    def table_source_item(self):

        localctx = tsqlParser.Table_source_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_table_source_item)
        try:
            self.state = 3018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2983
                self.table_name_with_hint()
                self.state = 2985
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
                if la_ == 1:
                    self.state = 2984
                    self.as_table_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2987
                self.rowset_function()
                self.state = 2989
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
                if la_ == 1:
                    self.state = 2988
                    self.as_table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2991
                self.derived_table()
                self.state = 2996
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
                if la_ == 1:
                    self.state = 2992
                    self.as_table_alias()
                    self.state = 2994
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,445,self._ctx)
                    if la_ == 1:
                        self.state = 2993
                        self.column_alias_list()




                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2998
                self.change_table()
                self.state = 2999
                self.as_table_alias()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3001
                self.function_call()
                self.state = 3003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
                if la_ == 1:
                    self.state = 3002
                    self.as_table_alias()


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3005
                self.match(tsqlParser.LOCAL_ID)
                self.state = 3007
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
                if la_ == 1:
                    self.state = 3006
                    self.as_table_alias()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3009
                self.match(tsqlParser.LOCAL_ID)
                self.state = 3010
                self.match(tsqlParser.DOT)
                self.state = 3011
                self.function_call()
                self.state = 3016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
                if la_ == 1:
                    self.state = 3012
                    self.as_table_alias()
                    self.state = 3014
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                    if la_ == 1:
                        self.state = 3013
                        self.column_alias_list()




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Change_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGETABLE(self):
            return self.getToken(tsqlParser.CHANGETABLE, 0)

        def CHANGES(self):
            return self.getToken(tsqlParser.CHANGES, 0)

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_change_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChange_table" ):
                listener.enterChange_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChange_table" ):
                listener.exitChange_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChange_table" ):
                return visitor.visitChange_table(self)
            else:
                return visitor.visitChildren(self)




    def change_table(self):

        localctx = tsqlParser.Change_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_change_table)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3020
            self.match(tsqlParser.CHANGETABLE)
            self.state = 3021
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3022
            self.match(tsqlParser.CHANGES)
            self.state = 3023
            self.table_name()
            self.state = 3024
            self.match(tsqlParser.COMMA)
            self.state = 3025
            _la = self._input.LA(1)
            if not(_la==tsqlParser.NULL or _la==tsqlParser.LOCAL_ID or _la==tsqlParser.DECIMAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3026
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_partContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.join_type = None # Token
            self.join_hint = None # Token

        def JOIN(self):
            return self.getToken(tsqlParser.JOIN, 0)

        def table_source(self):
            return self.getTypedRuleContext(tsqlParser.Table_sourceContext,0)


        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(tsqlParser.INNER, 0)

        def OUTER(self):
            return self.getToken(tsqlParser.OUTER, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def MERGE(self):
            return self.getToken(tsqlParser.MERGE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def CROSS(self):
            return self.getToken(tsqlParser.CROSS, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_join_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_part" ):
                listener.enterJoin_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_part" ):
                listener.exitJoin_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_part" ):
                return visitor.visitJoin_part(self)
            else:
                return visitor.visitChildren(self)




    def join_part(self):

        localctx = tsqlParser.Join_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_join_part)
        self._la = 0 # Token type
        try:
            self.state = 3054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3035
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.INNER, tsqlParser.JOIN, tsqlParser.MERGE, tsqlParser.HASH, tsqlParser.LOOP, tsqlParser.REMOTE]:
                    self.state = 3029
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.INNER:
                        self.state = 3028
                        self.match(tsqlParser.INNER)


                    pass
                elif token in [tsqlParser.FULL, tsqlParser.LEFT, tsqlParser.RIGHT]:
                    self.state = 3031
                    localctx.join_type = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.FULL or _la==tsqlParser.LEFT or _la==tsqlParser.RIGHT):
                        localctx.join_type = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==tsqlParser.OUTER:
                        self.state = 3032
                        self.match(tsqlParser.OUTER)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE:
                    self.state = 3037
                    localctx.join_hint = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.MERGE or _la==tsqlParser.HASH or _la==tsqlParser.LOOP or _la==tsqlParser.REMOTE):
                        localctx.join_hint = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3040
                self.match(tsqlParser.JOIN)
                self.state = 3041
                self.table_source()
                self.state = 3042
                self.match(tsqlParser.ON)
                self.state = 3043
                self.search_condition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3045
                self.match(tsqlParser.CROSS)
                self.state = 3046
                self.match(tsqlParser.JOIN)
                self.state = 3047
                self.table_source()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3048
                self.match(tsqlParser.CROSS)
                self.state = 3049
                self.match(tsqlParser.APPLY)
                self.state = 3050
                self.table_source()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3051
                self.match(tsqlParser.OUTER)
                self.state = 3052
                self.match(tsqlParser.APPLY)
                self.state = 3053
                self.table_source()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_name_with_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name_with_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name_with_hint" ):
                listener.enterTable_name_with_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name_with_hint" ):
                listener.exitTable_name_with_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name_with_hint" ):
                return visitor.visitTable_name_with_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_name_with_hint(self):

        localctx = tsqlParser.Table_name_with_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_table_name_with_hint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3056
            self.table_name()
            self.state = 3058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.state = 3057
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rowset_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.provider_name = None # Token
            self.connectionString = None # Token
            self.sql = None # Token
            self.data_file = None # Token

        def OPENROWSET(self):
            return self.getToken(tsqlParser.OPENROWSET, 0)

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.COMMA)
            else:
                return self.getToken(tsqlParser.COMMA, i)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def BULK(self):
            return self.getToken(tsqlParser.BULK, 0)

        def bulk_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Bulk_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Bulk_optionContext,i)


        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_rowset_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRowset_function" ):
                listener.enterRowset_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRowset_function" ):
                listener.exitRowset_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowset_function" ):
                return visitor.visitRowset_function(self)
            else:
                return visitor.visitChildren(self)




    def rowset_function(self):

        localctx = tsqlParser.Rowset_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_rowset_function)
        self._la = 0 # Token type
        try:
            self.state = 3086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3060
                self.match(tsqlParser.OPENROWSET)
                self.state = 3061
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3062
                localctx.provider_name = self.match(tsqlParser.STRING)
                self.state = 3063
                self.match(tsqlParser.COMMA)
                self.state = 3064
                localctx.connectionString = self.match(tsqlParser.STRING)
                self.state = 3065
                self.match(tsqlParser.COMMA)
                self.state = 3066
                localctx.sql = self.match(tsqlParser.STRING)
                self.state = 3067
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3068
                self.match(tsqlParser.OPENROWSET)
                self.state = 3069
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3070
                self.match(tsqlParser.BULK)
                self.state = 3071
                localctx.data_file = self.match(tsqlParser.STRING)
                self.state = 3072
                self.match(tsqlParser.COMMA)
                self.state = 3082
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
                if la_ == 1:
                    self.state = 3073
                    self.bulk_option()
                    self.state = 3078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 3074
                        self.match(tsqlParser.COMMA)
                        self.state = 3075
                        self.bulk_option()
                        self.state = 3080
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 3081
                    self.id_()
                    pass


                self.state = 3084
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bulk_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.bulk_option_value = None # Token

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_bulk_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBulk_option" ):
                listener.enterBulk_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBulk_option" ):
                listener.exitBulk_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBulk_option" ):
                return visitor.visitBulk_option(self)
            else:
                return visitor.visitChildren(self)




    def bulk_option(self):

        localctx = tsqlParser.Bulk_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_bulk_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3088
            self.id_()
            self.state = 3089
            self.match(tsqlParser.EQUAL)
            self.state = 3090
            localctx.bulk_option_value = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.STRING):
                localctx.bulk_option_value = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Derived_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subquery(self):
            return self.getTypedRuleContext(tsqlParser.SubqueryContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_derived_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_table" ):
                listener.enterDerived_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_table" ):
                listener.exitDerived_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDerived_table" ):
                return visitor.visitDerived_table(self)
            else:
                return visitor.visitChildren(self)




    def derived_table(self):

        localctx = tsqlParser.Derived_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_derived_table)
        try:
            self.state = 3097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3092
                self.subquery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3093
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3094
                self.subquery()
                self.state = 3095
                self.match(tsqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.style = None # ExpressionContext
            self.seed = None # Token
            self.increment = None # Token

        def ranking_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Ranking_windowed_functionContext,0)


        def aggregate_windowed_function(self):
            return self.getTypedRuleContext(tsqlParser.Aggregate_windowed_functionContext,0)


        def scalar_function_name(self):
            return self.getTypedRuleContext(tsqlParser.Scalar_function_nameContext,0)


        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def data_type(self):
            return self.getTypedRuleContext(tsqlParser.Data_typeContext,0)


        def CONVERT(self):
            return self.getToken(tsqlParser.CONVERT, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def COALESCE(self):
            return self.getToken(tsqlParser.COALESCE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(tsqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(tsqlParser.CURRENT_USER, 0)

        def DATEADD(self):
            return self.getToken(tsqlParser.DATEADD, 0)

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def DATEDIFF(self):
            return self.getToken(tsqlParser.DATEDIFF, 0)

        def DATENAME(self):
            return self.getToken(tsqlParser.DATENAME, 0)

        def DATEPART(self):
            return self.getToken(tsqlParser.DATEPART, 0)

        def GETDATE(self):
            return self.getToken(tsqlParser.GETDATE, 0)

        def GETUTCDATE(self):
            return self.getToken(tsqlParser.GETUTCDATE, 0)

        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MIN_ACTIVE_ROWVERSION(self):
            return self.getToken(tsqlParser.MIN_ACTIVE_ROWVERSION, 0)

        def NULLIF(self):
            return self.getToken(tsqlParser.NULLIF, 0)

        def SESSION_USER(self):
            return self.getToken(tsqlParser.SESSION_USER, 0)

        def SYSTEM_USER(self):
            return self.getToken(tsqlParser.SYSTEM_USER, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_call" ):
                return visitor.visitFunction_call(self)
            else:
                return visitor.visitChildren(self)




    def function_call(self):

        localctx = tsqlParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 3202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,466,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3099
                self.ranking_windowed_function()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3100
                self.aggregate_windowed_function()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3101
                self.scalar_function_name()
                self.state = 3102
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << tsqlParser.CALLED) | (1 << tsqlParser.CASE) | (1 << tsqlParser.COALESCE) | (1 << tsqlParser.CONVERT) | (1 << tsqlParser.CURRENT_TIMESTAMP) | (1 << tsqlParser.CURRENT_USER) | (1 << tsqlParser.DATA_COMPRESSION) | (1 << tsqlParser.DEFAULT))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (tsqlParser.EVENTDATA - 65)) | (1 << (tsqlParser.FILLFACTOR - 65)) | (1 << (tsqlParser.FORCESEEK - 65)) | (1 << (tsqlParser.IDENTITY - 65)) | (1 << (tsqlParser.LEFT - 65)) | (1 << (tsqlParser.NULL - 65)) | (1 << (tsqlParser.NULLIF - 65)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (tsqlParser.OVER - 130)) | (1 << (tsqlParser.PAGE - 130)) | (1 << (tsqlParser.PUBLIC - 130)) | (1 << (tsqlParser.RAW - 130)) | (1 << (tsqlParser.RETURN - 130)) | (1 << (tsqlParser.RETURNS - 130)) | (1 << (tsqlParser.RIGHT - 130)) | (1 << (tsqlParser.SERVER - 130)) | (1 << (tsqlParser.SESSION_USER - 130)) | (1 << (tsqlParser.SOURCE - 130)) | (1 << (tsqlParser.SYSTEM_USER - 130)) | (1 << (tsqlParser.TARGET - 130)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.BINARY_CHECKSUM - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DATEADD - 206)) | (1 << (tsqlParser.DATEDIFF - 206)) | (1 << (tsqlParser.DATENAME - 206)) | (1 << (tsqlParser.DATEPART - 206)) | (1 << (tsqlParser.GETDATE - 206)) | (1 << (tsqlParser.GETUTCDATE - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MIN_ACTIVE_ROWVERSION - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.LOCAL_ID - 400)) | (1 << (tsqlParser.DECIMAL - 400)) | (1 << (tsqlParser.ID - 400)) | (1 << (tsqlParser.STRING - 400)) | (1 << (tsqlParser.BINARY - 400)) | (1 << (tsqlParser.FLOAT - 400)) | (1 << (tsqlParser.REAL - 400)) | (1 << (tsqlParser.DOLLAR - 400)) | (1 << (tsqlParser.LR_BRACKET - 400)) | (1 << (tsqlParser.PLUS - 400)) | (1 << (tsqlParser.MINUS - 400)) | (1 << (tsqlParser.BIT_NOT - 400)))) != 0):
                    self.state = 3103
                    self.expression_list()


                self.state = 3106
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3108
                self.match(tsqlParser.BINARY_CHECKSUM)
                self.state = 3109
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3110
                self.match(tsqlParser.STAR)
                self.state = 3111
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3112
                self.match(tsqlParser.CAST)
                self.state = 3113
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3114
                self.expression(0)
                self.state = 3115
                self.match(tsqlParser.AS)
                self.state = 3116
                self.data_type()
                self.state = 3117
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3119
                self.match(tsqlParser.CONVERT)
                self.state = 3120
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3121
                self.data_type()
                self.state = 3122
                self.match(tsqlParser.COMMA)
                self.state = 3123
                self.expression(0)
                self.state = 3126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3124
                    self.match(tsqlParser.COMMA)
                    self.state = 3125
                    localctx.style = self.expression(0)


                self.state = 3128
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3130
                self.match(tsqlParser.CHECKSUM)
                self.state = 3131
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3132
                self.match(tsqlParser.STAR)
                self.state = 3133
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3134
                self.match(tsqlParser.COALESCE)
                self.state = 3135
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3136
                self.expression_list()
                self.state = 3137
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3139
                self.match(tsqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 3140
                self.match(tsqlParser.CURRENT_USER)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 3141
                self.match(tsqlParser.DATEADD)
                self.state = 3142
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3143
                self.match(tsqlParser.ID)
                self.state = 3144
                self.match(tsqlParser.COMMA)
                self.state = 3145
                self.expression(0)
                self.state = 3146
                self.match(tsqlParser.COMMA)
                self.state = 3147
                self.expression(0)
                self.state = 3148
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 3150
                self.match(tsqlParser.DATEDIFF)
                self.state = 3151
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3152
                self.match(tsqlParser.ID)
                self.state = 3153
                self.match(tsqlParser.COMMA)
                self.state = 3154
                self.expression(0)
                self.state = 3155
                self.match(tsqlParser.COMMA)
                self.state = 3156
                self.expression(0)
                self.state = 3157
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 3159
                self.match(tsqlParser.DATENAME)
                self.state = 3160
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3161
                self.match(tsqlParser.ID)
                self.state = 3162
                self.match(tsqlParser.COMMA)
                self.state = 3163
                self.expression(0)
                self.state = 3164
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 3166
                self.match(tsqlParser.DATEPART)
                self.state = 3167
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3168
                self.match(tsqlParser.ID)
                self.state = 3169
                self.match(tsqlParser.COMMA)
                self.state = 3170
                self.expression(0)
                self.state = 3171
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 3173
                self.match(tsqlParser.GETDATE)
                self.state = 3174
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3175
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 3176
                self.match(tsqlParser.GETUTCDATE)
                self.state = 3177
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3178
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 3179
                self.match(tsqlParser.IDENTITY)
                self.state = 3180
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3181
                self.data_type()
                self.state = 3184
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
                if la_ == 1:
                    self.state = 3182
                    self.match(tsqlParser.COMMA)
                    self.state = 3183
                    localctx.seed = self.match(tsqlParser.DECIMAL)


                self.state = 3188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3186
                    self.match(tsqlParser.COMMA)
                    self.state = 3187
                    localctx.increment = self.match(tsqlParser.DECIMAL)


                self.state = 3190
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 3192
                self.match(tsqlParser.MIN_ACTIVE_ROWVERSION)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 3193
                self.match(tsqlParser.NULLIF)
                self.state = 3194
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3195
                self.expression(0)
                self.state = 3196
                self.match(tsqlParser.COMMA)
                self.state = 3197
                self.expression(0)
                self.state = 3198
                self.match(tsqlParser.RR_BRACKET)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 3200
                self.match(tsqlParser.SESSION_USER)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 3201
                self.match(tsqlParser.SYSTEM_USER)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_switch_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_section" ):
                listener.enterSwitch_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_section" ):
                listener.exitSwitch_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_section" ):
                return visitor.visitSwitch_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_section(self):

        localctx = tsqlParser.Switch_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_switch_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3204
            self.match(tsqlParser.WHEN)
            self.state = 3205
            self.expression(0)
            self.state = 3206
            self.match(tsqlParser.THEN)
            self.state = 3207
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Switch_search_condition_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(tsqlParser.WHEN, 0)

        def search_condition(self):
            return self.getTypedRuleContext(tsqlParser.Search_conditionContext,0)


        def THEN(self):
            return self.getToken(tsqlParser.THEN, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_switch_search_condition_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitch_search_condition_section" ):
                listener.enterSwitch_search_condition_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitch_search_condition_section" ):
                listener.exitSwitch_search_condition_section(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSwitch_search_condition_section" ):
                return visitor.visitSwitch_search_condition_section(self)
            else:
                return visitor.visitChildren(self)




    def switch_search_condition_section(self):

        localctx = tsqlParser.Switch_search_condition_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_switch_search_condition_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3209
            self.match(tsqlParser.WHEN)
            self.state = 3210
            self.search_condition()
            self.state = 3211
            self.match(tsqlParser.THEN)
            self.state = 3212
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class As_table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_alias(self):
            return self.getTypedRuleContext(tsqlParser.Table_aliasContext,0)


        def AS(self):
            return self.getToken(tsqlParser.AS, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_as_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_table_alias" ):
                listener.enterAs_table_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_table_alias" ):
                listener.exitAs_table_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_table_alias" ):
                return visitor.visitAs_table_alias(self)
            else:
                return visitor.visitChildren(self)




    def as_table_alias(self):

        localctx = tsqlParser.As_table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_as_table_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.AS:
                self.state = 3214
                self.match(tsqlParser.AS)


            self.state = 3217
            self.table_alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def with_table_hints(self):
            return self.getTypedRuleContext(tsqlParser.With_table_hintsContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = tsqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3219
            self.id_()
            self.state = 3221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.state = 3220
                self.with_table_hints()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_table_hints" ):
                listener.enterWith_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_table_hints" ):
                listener.exitWith_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_table_hints" ):
                return visitor.visitWith_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def with_table_hints(self):

        localctx = tsqlParser.With_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.WITH:
                self.state = 3223
                self.match(tsqlParser.WITH)


            self.state = 3226
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3227
            self.table_hint()
            self.state = 3232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3228
                self.match(tsqlParser.COMMA)
                self.state = 3229
                self.table_hint()
                self.state = 3234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3235
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_with_table_hintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(tsqlParser.WITH, 0)

        def table_hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Table_hintContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Table_hintContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_insert_with_table_hints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_with_table_hints" ):
                listener.enterInsert_with_table_hints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_with_table_hints" ):
                listener.exitInsert_with_table_hints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_with_table_hints" ):
                return visitor.visitInsert_with_table_hints(self)
            else:
                return visitor.visitChildren(self)




    def insert_with_table_hints(self):

        localctx = tsqlParser.Insert_with_table_hintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_insert_with_table_hints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3237
            self.match(tsqlParser.WITH)
            self.state = 3238
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3239
            self.table_hint()
            self.state = 3244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3240
                self.match(tsqlParser.COMMA)
                self.state = 3241
                self.table_hint()
                self.state = 3246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3247
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_hintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def INDEX(self):
            return self.getToken(tsqlParser.INDEX, 0)

        def index_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Index_valueContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Index_valueContext,i)


        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ID)
            else:
                return self.getToken(tsqlParser.ID, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_table_hint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_hint" ):
                listener.enterTable_hint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_hint" ):
                listener.exitTable_hint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_hint" ):
                return visitor.visitTable_hint(self)
            else:
                return visitor.visitChildren(self)




    def table_hint(self):

        localctx = tsqlParser.Table_hintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_table_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOEXPAND:
                self.state = 3249
                self.match(tsqlParser.NOEXPAND)


            self.state = 3290
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.state = 3252
                self.match(tsqlParser.INDEX)
                self.state = 3253
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3254
                self.index_value()
                self.state = 3259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==tsqlParser.COMMA:
                    self.state = 3255
                    self.match(tsqlParser.COMMA)
                    self.state = 3256
                    self.index_value()
                    self.state = 3261
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3262
                self.match(tsqlParser.RR_BRACKET)

            elif la_ == 2:
                self.state = 3264
                self.match(tsqlParser.INDEX)
                self.state = 3265
                self.match(tsqlParser.EQUAL)
                self.state = 3266
                self.index_value()

            elif la_ == 3:
                self.state = 3267
                self.match(tsqlParser.FORCESEEK)
                self.state = 3282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.LR_BRACKET:
                    self.state = 3268
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3269
                    self.index_value()
                    self.state = 3270
                    self.match(tsqlParser.LR_BRACKET)
                    self.state = 3271
                    self.match(tsqlParser.ID)
                    self.state = 3276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==tsqlParser.COMMA:
                        self.state = 3272
                        self.match(tsqlParser.COMMA)
                        self.state = 3273
                        self.match(tsqlParser.ID)
                        self.state = 3278
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3279
                    self.match(tsqlParser.RR_BRACKET)
                    self.state = 3280
                    self.match(tsqlParser.RR_BRACKET)



            elif la_ == 4:
                self.state = 3284
                self.match(tsqlParser.SERIALIZABLE)

            elif la_ == 5:
                self.state = 3285
                self.match(tsqlParser.SNAPSHOT)

            elif la_ == 6:
                self.state = 3286
                self.match(tsqlParser.SPATIAL_WINDOW_MAX_CELLS)
                self.state = 3287
                self.match(tsqlParser.EQUAL)
                self.state = 3288
                self.match(tsqlParser.DECIMAL)

            elif la_ == 7:
                self.state = 3289
                self.match(tsqlParser.ID)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_index_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_value" ):
                listener.enterIndex_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_value" ):
                listener.exitIndex_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_value" ):
                return visitor.visitIndex_value(self)
            else:
                return visitor.visitChildren(self)




    def index_value(self):

        localctx = tsqlParser.Index_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_index_value)
        try:
            self.state = 3294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3292
                self.id_()
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3293
                self.match(tsqlParser.DECIMAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_alias_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_alias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Column_aliasContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Column_aliasContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias_list" ):
                listener.enterColumn_alias_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias_list" ):
                listener.exitColumn_alias_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias_list" ):
                return visitor.visitColumn_alias_list(self)
            else:
                return visitor.visitChildren(self)




    def column_alias_list(self):

        localctx = tsqlParser.Column_alias_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_column_alias_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3296
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3297
            self.column_alias()
            self.state = 3302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3298
                self.match(tsqlParser.COMMA)
                self.state = 3299
                self.column_alias()
                self.state = 3304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3305
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = tsqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_column_alias)
        try:
            self.state = 3309
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3307
                self.id_()
                pass
            elif token in [tsqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3308
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_value_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(tsqlParser.VALUES, 0)

        def expression_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Expression_listContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Expression_listContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_value_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_value_constructor" ):
                listener.enterTable_value_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_value_constructor" ):
                listener.exitTable_value_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_value_constructor" ):
                return visitor.visitTable_value_constructor(self)
            else:
                return visitor.visitChildren(self)




    def table_value_constructor(self):

        localctx = tsqlParser.Table_value_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_table_value_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3311
            self.match(tsqlParser.VALUES)
            self.state = 3312
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3313
            self.expression_list()
            self.state = 3314
            self.match(tsqlParser.RR_BRACKET)
            self.state = 3322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3315
                self.match(tsqlParser.COMMA)
                self.state = 3316
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3317
                self.expression_list()
                self.state = 3318
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Expression_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_expression_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression_list" ):
                listener.enterExpression_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression_list" ):
                listener.exitExpression_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression_list" ):
                return visitor.visitExpression_list(self)
            else:
                return visitor.visitChildren(self)




    def expression_list(self):

        localctx = tsqlParser.Expression_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_expression_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3325
            self.expression(0)
            self.state = 3330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3326
                self.match(tsqlParser.COMMA)
                self.state = 3327
                self.expression(0)
                self.state = 3332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ranking_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_ranking_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRanking_windowed_function" ):
                listener.enterRanking_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRanking_windowed_function" ):
                listener.exitRanking_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRanking_windowed_function" ):
                return visitor.visitRanking_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def ranking_windowed_function(self):

        localctx = tsqlParser.Ranking_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_ranking_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.DENSE_RANK, tsqlParser.RANK, tsqlParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3333
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DENSE_RANK or _la==tsqlParser.RANK or _la==tsqlParser.ROW_NUMBER):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3334
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3335
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3336
                self.over_clause()
                pass
            elif token in [tsqlParser.NTILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3337
                self.match(tsqlParser.NTILE)
                self.state = 3338
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3339
                self.expression(0)
                self.state = 3340
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3341
                self.over_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_windowed_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def all_distinct_expression(self):
            return self.getTypedRuleContext(tsqlParser.All_distinct_expressionContext,0)


        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def over_clause(self):
            return self.getTypedRuleContext(tsqlParser.Over_clauseContext,0)


        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_aggregate_windowed_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_windowed_function" ):
                listener.enterAggregate_windowed_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_windowed_function" ):
                listener.exitAggregate_windowed_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_windowed_function" ):
                return visitor.visitAggregate_windowed_function(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_windowed_function(self):

        localctx = tsqlParser.Aggregate_windowed_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_aggregate_windowed_function)
        self._la = 0 # Token type
        try:
            self.state = 3377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.AVG, tsqlParser.MAX, tsqlParser.MIN, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.VAR, tsqlParser.VARP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3345
                _la = self._input.LA(1)
                if not(_la==tsqlParser.AVG or _la==tsqlParser.MAX or _la==tsqlParser.MIN or ((((_la - 385)) & ~0x3f) == 0 and ((1 << (_la - 385)) & ((1 << (tsqlParser.STDEV - 385)) | (1 << (tsqlParser.STDEVP - 385)) | (1 << (tsqlParser.SUM - 385)) | (1 << (tsqlParser.VAR - 385)) | (1 << (tsqlParser.VARP - 385)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3346
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3347
                self.all_distinct_expression()
                self.state = 3348
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3350
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
                if la_ == 1:
                    self.state = 3349
                    self.over_clause()


                pass
            elif token in [tsqlParser.COUNT, tsqlParser.COUNT_BIG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3352
                _la = self._input.LA(1)
                if not(_la==tsqlParser.COUNT or _la==tsqlParser.COUNT_BIG):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3353
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3356
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.STAR]:
                    self.state = 3354
                    self.match(tsqlParser.STAR)
                    pass
                elif token in [tsqlParser.ALL, tsqlParser.CALLED, tsqlParser.CASE, tsqlParser.COALESCE, tsqlParser.CONVERT, tsqlParser.CURRENT_TIMESTAMP, tsqlParser.CURRENT_USER, tsqlParser.DATA_COMPRESSION, tsqlParser.DEFAULT, tsqlParser.DISTINCT, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.IDENTITY, tsqlParser.LEFT, tsqlParser.NULL, tsqlParser.NULLIF, tsqlParser.OVER, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.RIGHT, tsqlParser.SERVER, tsqlParser.SESSION_USER, tsqlParser.SOURCE, tsqlParser.SYSTEM_USER, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.BINARY_CHECKSUM, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DATEADD, tsqlParser.DATEDIFF, tsqlParser.DATENAME, tsqlParser.DATEPART, tsqlParser.GETDATE, tsqlParser.GETUTCDATE, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MIN_ACTIVE_ROWVERSION, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.LOCAL_ID, tsqlParser.DECIMAL, tsqlParser.ID, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.LR_BRACKET, tsqlParser.PLUS, tsqlParser.MINUS, tsqlParser.BIT_NOT]:
                    self.state = 3355
                    self.all_distinct_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3358
                self.match(tsqlParser.RR_BRACKET)
                self.state = 3360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
                if la_ == 1:
                    self.state = 3359
                    self.over_clause()


                pass
            elif token in [tsqlParser.CHECKSUM_AGG]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3362
                self.match(tsqlParser.CHECKSUM_AGG)
                self.state = 3363
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3364
                self.all_distinct_expression()
                self.state = 3365
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3367
                self.match(tsqlParser.GROUPING)
                self.state = 3368
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3369
                self.expression(0)
                self.state = 3370
                self.match(tsqlParser.RR_BRACKET)
                pass
            elif token in [tsqlParser.GROUPING_ID]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3372
                self.match(tsqlParser.GROUPING_ID)
                self.state = 3373
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3374
                self.expression_list()
                self.state = 3375
                self.match(tsqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class All_distinct_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(tsqlParser.ExpressionContext,0)


        def ALL(self):
            return self.getToken(tsqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(tsqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_all_distinct_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAll_distinct_expression" ):
                listener.enterAll_distinct_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAll_distinct_expression" ):
                listener.exitAll_distinct_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAll_distinct_expression" ):
                return visitor.visitAll_distinct_expression(self)
            else:
                return visitor.visitChildren(self)




    def all_distinct_expression(self):

        localctx = tsqlParser.All_distinct_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_all_distinct_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ALL or _la==tsqlParser.DISTINCT:
                self.state = 3379
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ALL or _la==tsqlParser.DISTINCT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3382
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Over_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(tsqlParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(tsqlParser.BY, 0)

        def expression_list(self):
            return self.getTypedRuleContext(tsqlParser.Expression_listContext,0)


        def order_by_clause(self):
            return self.getTypedRuleContext(tsqlParser.Order_by_clauseContext,0)


        def row_or_range_clause(self):
            return self.getTypedRuleContext(tsqlParser.Row_or_range_clauseContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = tsqlParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3384
            self.match(tsqlParser.OVER)
            self.state = 3385
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.PARTITION:
                self.state = 3386
                self.match(tsqlParser.PARTITION)
                self.state = 3387
                self.match(tsqlParser.BY)
                self.state = 3388
                self.expression_list()


            self.state = 3392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ORDER:
                self.state = 3391
                self.order_by_clause()


            self.state = 3395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.RANGE or _la==tsqlParser.ROWS:
                self.state = 3394
                self.row_or_range_clause()


            self.state = 3397
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Row_or_range_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_extent(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_extentContext,0)


        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_row_or_range_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRow_or_range_clause" ):
                listener.enterRow_or_range_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRow_or_range_clause" ):
                listener.exitRow_or_range_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRow_or_range_clause" ):
                return visitor.visitRow_or_range_clause(self)
            else:
                return visitor.visitChildren(self)




    def row_or_range_clause(self):

        localctx = tsqlParser.Row_or_range_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_row_or_range_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3399
            _la = self._input.LA(1)
            if not(_la==tsqlParser.RANGE or _la==tsqlParser.ROWS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3400
            self.window_frame_extent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_extentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def BETWEEN(self):
            return self.getToken(tsqlParser.BETWEEN, 0)

        def window_frame_bound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Window_frame_boundContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Window_frame_boundContext,i)


        def AND(self):
            return self.getToken(tsqlParser.AND, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_extent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_extent" ):
                listener.enterWindow_frame_extent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_extent" ):
                listener.exitWindow_frame_extent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_extent" ):
                return visitor.visitWindow_frame_extent(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_extent(self):

        localctx = tsqlParser.Window_frame_extentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_window_frame_extent)
        try:
            self.state = 3408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CURRENT, tsqlParser.UNBOUNDED, tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3402
                self.window_frame_preceding()
                pass
            elif token in [tsqlParser.BETWEEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3403
                self.match(tsqlParser.BETWEEN)
                self.state = 3404
                self.window_frame_bound()
                self.state = 3405
                self.match(tsqlParser.AND)
                self.state = 3406
                self.window_frame_bound()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_boundContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_frame_preceding(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_precedingContext,0)


        def window_frame_following(self):
            return self.getTypedRuleContext(tsqlParser.Window_frame_followingContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_bound" ):
                listener.enterWindow_frame_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_bound" ):
                listener.exitWindow_frame_bound(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_bound" ):
                return visitor.visitWindow_frame_bound(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_bound(self):

        localctx = tsqlParser.Window_frame_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_window_frame_bound)
        try:
            self.state = 3412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3410
                self.window_frame_preceding()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3411
                self.window_frame_following()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_precedingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def CURRENT(self):
            return self.getToken(tsqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_preceding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_preceding" ):
                listener.enterWindow_frame_preceding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_preceding" ):
                listener.exitWindow_frame_preceding(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_preceding" ):
                return visitor.visitWindow_frame_preceding(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_preceding(self):

        localctx = tsqlParser.Window_frame_precedingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_window_frame_preceding)
        try:
            self.state = 3420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3414
                self.match(tsqlParser.UNBOUNDED)
                self.state = 3415
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3416
                self.match(tsqlParser.DECIMAL)
                self.state = 3417
                self.match(tsqlParser.PRECEDING)
                pass
            elif token in [tsqlParser.CURRENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3418
                self.match(tsqlParser.CURRENT)
                self.state = 3419
                self.match(tsqlParser.ROW)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Window_frame_followingContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_window_frame_following

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_frame_following" ):
                listener.enterWindow_frame_following(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_frame_following" ):
                listener.exitWindow_frame_following(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_frame_following" ):
                return visitor.visitWindow_frame_following(self)
            else:
                return visitor.visitChildren(self)




    def window_frame_following(self):

        localctx = tsqlParser.Window_frame_followingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_window_frame_following)
        try:
            self.state = 3426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.UNBOUNDED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3422
                self.match(tsqlParser.UNBOUNDED)
                self.state = 3423
                self.match(tsqlParser.FOLLOWING)
                pass
            elif token in [tsqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3424
                self.match(tsqlParser.DECIMAL)
                self.state = 3425
                self.match(tsqlParser.FOLLOWING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_database_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def database_filestream_option(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Database_filestream_optionContext)
            else:
                return self.getTypedRuleContext(tsqlParser.Database_filestream_optionContext,i)


        def DEFAULT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_LANGUAGE, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def DEFAULT_FULLTEXT_LANGUAGE(self):
            return self.getToken(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0)

        def NESTED_TRIGGERS(self):
            return self.getToken(tsqlParser.NESTED_TRIGGERS, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def TRANSFORM_NOISE_WORDS(self):
            return self.getToken(tsqlParser.TRANSFORM_NOISE_WORDS, 0)

        def TWO_DIGIT_YEAR_CUTOFF(self):
            return self.getToken(tsqlParser.TWO_DIGIT_YEAR_CUTOFF, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def DB_CHAINING(self):
            return self.getToken(tsqlParser.DB_CHAINING, 0)

        def TRUSTWORTHY(self):
            return self.getToken(tsqlParser.TRUSTWORTHY, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_create_database_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_option" ):
                listener.enterCreate_database_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_option" ):
                listener.exitCreate_database_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_database_option" ):
                return visitor.visitCreate_database_option(self)
            else:
                return visitor.visitChildren(self)




    def create_database_option(self):

        localctx = tsqlParser.Create_database_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_create_database_option)
        self._la = 0 # Token type
        try:
            self.state = 3462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILESTREAM]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3428
                self.match(tsqlParser.FILESTREAM)

                self.state = 3429
                self.database_filestream_option()
                self.state = 3434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,495,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3430
                        self.match(tsqlParser.COMMA)
                        self.state = 3431
                        self.database_filestream_option() 
                    self.state = 3436
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,495,self._ctx)

                pass
            elif token in [tsqlParser.DEFAULT_LANGUAGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3437
                self.match(tsqlParser.DEFAULT_LANGUAGE)
                self.state = 3438
                self.match(tsqlParser.EQUAL)
                self.state = 3441
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 3439
                    self.id_()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 3440
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.DEFAULT_FULLTEXT_LANGUAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3443
                self.match(tsqlParser.DEFAULT_FULLTEXT_LANGUAGE)
                self.state = 3444
                self.match(tsqlParser.EQUAL)
                self.state = 3447
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                    self.state = 3445
                    self.id_()
                    pass
                elif token in [tsqlParser.STRING]:
                    self.state = 3446
                    self.match(tsqlParser.STRING)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [tsqlParser.NESTED_TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3449
                self.match(tsqlParser.NESTED_TRIGGERS)
                self.state = 3450
                self.match(tsqlParser.EQUAL)
                self.state = 3451
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRANSFORM_NOISE_WORDS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3452
                self.match(tsqlParser.TRANSFORM_NOISE_WORDS)
                self.state = 3453
                self.match(tsqlParser.EQUAL)
                self.state = 3454
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TWO_DIGIT_YEAR_CUTOFF]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3455
                self.match(tsqlParser.TWO_DIGIT_YEAR_CUTOFF)
                self.state = 3456
                self.match(tsqlParser.EQUAL)
                self.state = 3457
                self.match(tsqlParser.DECIMAL)
                pass
            elif token in [tsqlParser.DB_CHAINING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3458
                self.match(tsqlParser.DB_CHAINING)
                self.state = 3459
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.TRUSTWORTHY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3460
                self.match(tsqlParser.TRUSTWORTHY)
                self.state = 3461
                _la = self._input.LA(1)
                if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_filestream_optionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def NON_TRANSACTED_ACCESS(self):
            return self.getToken(tsqlParser.NON_TRANSACTED_ACCESS, 0)

        def EQUAL(self):
            return self.getToken(tsqlParser.EQUAL, 0)

        def DIRECTORY_NAME(self):
            return self.getToken(tsqlParser.DIRECTORY_NAME, 0)

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def FULL(self):
            return self.getToken(tsqlParser.FULL, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_database_filestream_option

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_filestream_option" ):
                listener.enterDatabase_filestream_option(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_filestream_option" ):
                listener.exitDatabase_filestream_option(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_filestream_option" ):
                return visitor.visitDatabase_filestream_option(self)
            else:
                return visitor.visitChildren(self)




    def database_filestream_option(self):

        localctx = tsqlParser.Database_filestream_optionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_database_filestream_option)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3464
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NON_TRANSACTED_ACCESS]:
                self.state = 3465
                self.match(tsqlParser.NON_TRANSACTED_ACCESS)
                self.state = 3466
                self.match(tsqlParser.EQUAL)
                self.state = 3467
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FULL or _la==tsqlParser.OFF or _la==tsqlParser.READ_ONLY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [tsqlParser.DIRECTORY_NAME]:
                self.state = 3468
                self.match(tsqlParser.DIRECTORY_NAME)
                self.state = 3469
                self.match(tsqlParser.EQUAL)
                self.state = 3470
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3473
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_file_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def file_group(self):
            return self.getTypedRuleContext(tsqlParser.File_groupContext,0)


        def file_spec(self):
            return self.getTypedRuleContext(tsqlParser.File_specContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_database_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_file_spec" ):
                listener.enterDatabase_file_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_file_spec" ):
                listener.exitDatabase_file_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDatabase_file_spec" ):
                return visitor.visitDatabase_file_spec(self)
            else:
                return visitor.visitChildren(self)




    def database_file_spec(self):

        localctx = tsqlParser.Database_file_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_database_file_spec)
        try:
            self.state = 3477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.FILEGROUP]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3475
                self.file_group()
                pass
            elif token in [tsqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3476
                self.file_spec()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_groupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILEGROUP(self):
            return self.getToken(tsqlParser.FILEGROUP, 0)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def file_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_specContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_specContext,i)


        def CONTAINS(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.CONTAINS)
            else:
                return self.getToken(tsqlParser.CONTAINS, i)

        def FILESTREAM(self):
            return self.getToken(tsqlParser.FILESTREAM, 0)

        def DEFAULT(self):
            return self.getToken(tsqlParser.DEFAULT, 0)

        def MEMORY_OPTIMIZED_DATA(self):
            return self.getToken(tsqlParser.MEMORY_OPTIMIZED_DATA, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_group" ):
                listener.enterFile_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_group" ):
                listener.exitFile_group(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_group" ):
                return visitor.visitFile_group(self)
            else:
                return visitor.visitChildren(self)




    def file_group(self):

        localctx = tsqlParser.File_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_file_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3479
            self.match(tsqlParser.FILEGROUP)
            self.state = 3480
            self.id_()
            self.state = 3483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.state = 3481
                self.match(tsqlParser.CONTAINS)
                self.state = 3482
                self.match(tsqlParser.FILESTREAM)


            self.state = 3486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.DEFAULT:
                self.state = 3485
                self.match(tsqlParser.DEFAULT)


            self.state = 3490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.CONTAINS:
                self.state = 3488
                self.match(tsqlParser.CONTAINS)
                self.state = 3489
                self.match(tsqlParser.MEMORY_OPTIMIZED_DATA)


            self.state = 3492
            self.file_spec()
            self.state = 3497
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,504,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3493
                    self.match(tsqlParser.COMMA)
                    self.state = 3494
                    self.file_spec() 
                self.state = 3499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,504,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.file_ = None # Token

        def LR_BRACKET(self):
            return self.getToken(tsqlParser.LR_BRACKET, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.EQUAL)
            else:
                return self.getToken(tsqlParser.EQUAL, i)

        def FILENAME(self):
            return self.getToken(tsqlParser.FILENAME, 0)

        def RR_BRACKET(self):
            return self.getToken(tsqlParser.RR_BRACKET, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.STRING)
            else:
                return self.getToken(tsqlParser.STRING, i)

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def file_size(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.File_sizeContext)
            else:
                return self.getTypedRuleContext(tsqlParser.File_sizeContext,i)


        def MAXSIZE(self):
            return self.getToken(tsqlParser.MAXSIZE, 0)

        def FILEGROWTH(self):
            return self.getToken(tsqlParser.FILEGROWTH, 0)

        def UNLIMITED(self):
            return self.getToken(tsqlParser.UNLIMITED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_spec" ):
                listener.enterFile_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_spec" ):
                listener.exitFile_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_spec" ):
                return visitor.visitFile_spec(self)
            else:
                return visitor.visitChildren(self)




    def file_spec(self):

        localctx = tsqlParser.File_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_file_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3500
            self.match(tsqlParser.LR_BRACKET)
            self.state = 3501
            self.match(tsqlParser.NAME)
            self.state = 3502
            self.match(tsqlParser.EQUAL)
            self.state = 3505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.state = 3503
                self.id_()
                pass
            elif token in [tsqlParser.STRING]:
                self.state = 3504
                self.match(tsqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 3507
                self.match(tsqlParser.COMMA)


            self.state = 3510
            self.match(tsqlParser.FILENAME)
            self.state = 3511
            self.match(tsqlParser.EQUAL)
            self.state = 3512
            localctx.file_ = self.match(tsqlParser.STRING)
            self.state = 3514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.COMMA:
                self.state = 3513
                self.match(tsqlParser.COMMA)


            self.state = 3522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.SIZE:
                self.state = 3516
                self.match(tsqlParser.SIZE)
                self.state = 3517
                self.match(tsqlParser.EQUAL)
                self.state = 3518
                self.file_size()
                self.state = 3520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3519
                    self.match(tsqlParser.COMMA)




            self.state = 3533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.MAXSIZE:
                self.state = 3524
                self.match(tsqlParser.MAXSIZE)
                self.state = 3525
                self.match(tsqlParser.EQUAL)
                self.state = 3528
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [tsqlParser.DECIMAL]:
                    self.state = 3526
                    self.file_size()
                    pass
                elif token in [tsqlParser.UNLIMITED]:
                    self.state = 3527
                    self.match(tsqlParser.UNLIMITED)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3530
                    self.match(tsqlParser.COMMA)




            self.state = 3541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.FILEGROWTH:
                self.state = 3535
                self.match(tsqlParser.FILEGROWTH)
                self.state = 3536
                self.match(tsqlParser.EQUAL)
                self.state = 3537
                self.file_size()
                self.state = 3539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3538
                    self.match(tsqlParser.COMMA)




            self.state = 3543
            self.match(tsqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.server = None # Id_Context
            self.database = None # Id_Context
            self.schema = None # Id_Context
            self.table = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_table_name" ):
                listener.enterFull_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_table_name" ):
                listener.exitFull_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_table_name" ):
                return visitor.visitFull_table_name(self)
            else:
                return visitor.visitChildren(self)




    def full_table_name(self):

        localctx = tsqlParser.Full_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_full_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
            if la_ == 1:
                self.state = 3545
                localctx.server = self.id_()
                self.state = 3546
                self.match(tsqlParser.DOT)
                self.state = 3547
                localctx.database = self.id_()
                self.state = 3548
                self.match(tsqlParser.DOT)
                self.state = 3549
                localctx.schema = self.id_()
                self.state = 3550
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3552
                localctx.database = self.id_()
                self.state = 3553
                self.match(tsqlParser.DOT)
                self.state = 3555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (tsqlParser.CALLED - 18)) | (1 << (tsqlParser.DATA_COMPRESSION - 18)) | (1 << (tsqlParser.EVENTDATA - 18)) | (1 << (tsqlParser.FILLFACTOR - 18)) | (1 << (tsqlParser.FORCESEEK - 18)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.ID - 400)))) != 0):
                    self.state = 3554
                    localctx.schema = self.id_()


                self.state = 3557
                self.match(tsqlParser.DOT)

            elif la_ == 3:
                self.state = 3559
                localctx.schema = self.id_()
                self.state = 3560
                self.match(tsqlParser.DOT)


            self.state = 3564
            localctx.table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.schema = None # Id_Context
            self.table = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = tsqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
            if la_ == 1:
                self.state = 3566
                localctx.database = self.id_()
                self.state = 3567
                self.match(tsqlParser.DOT)
                self.state = 3569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (tsqlParser.CALLED - 18)) | (1 << (tsqlParser.DATA_COMPRESSION - 18)) | (1 << (tsqlParser.EVENTDATA - 18)) | (1 << (tsqlParser.FILLFACTOR - 18)) | (1 << (tsqlParser.FORCESEEK - 18)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.ID - 400)))) != 0):
                    self.state = 3568
                    localctx.schema = self.id_()


                self.state = 3571
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3573
                localctx.schema = self.id_()
                self.state = 3574
                self.match(tsqlParser.DOT)


            self.state = 3578
            localctx.table = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # Id_Context
            self.name = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_simple_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_name" ):
                listener.enterSimple_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_name" ):
                listener.exitSimple_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_name" ):
                return visitor.visitSimple_name(self)
            else:
                return visitor.visitChildren(self)




    def simple_name(self):

        localctx = tsqlParser.Simple_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_simple_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                self.state = 3580
                localctx.schema = self.id_()
                self.state = 3581
                self.match(tsqlParser.DOT)


            self.state = 3585
            localctx.name = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Func_proc_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.database = None # Id_Context
            self.schema = None # Id_Context
            self.procedure = None # Id_Context

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_func_proc_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_proc_name" ):
                listener.enterFunc_proc_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_proc_name" ):
                listener.exitFunc_proc_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_proc_name" ):
                return visitor.visitFunc_proc_name(self)
            else:
                return visitor.visitChildren(self)




    def func_proc_name(self):

        localctx = tsqlParser.Func_proc_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_func_proc_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
            if la_ == 1:
                self.state = 3587
                localctx.database = self.id_()
                self.state = 3588
                self.match(tsqlParser.DOT)
                self.state = 3590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (tsqlParser.CALLED - 18)) | (1 << (tsqlParser.DATA_COMPRESSION - 18)) | (1 << (tsqlParser.EVENTDATA - 18)) | (1 << (tsqlParser.FILLFACTOR - 18)) | (1 << (tsqlParser.FORCESEEK - 18)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.DOUBLE_QUOTE_ID - 400)) | (1 << (tsqlParser.SQUARE_BRACKET_ID - 400)) | (1 << (tsqlParser.ID - 400)))) != 0):
                    self.state = 3589
                    localctx.schema = self.id_()


                self.state = 3592
                self.match(tsqlParser.DOT)

            elif la_ == 2:
                self.state = 3594
                localctx.schema = self.id_()
                self.state = 3595
                self.match(tsqlParser.DOT)


            self.state = 3599
            localctx.procedure = self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ddl_objectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def full_table_name(self):
            return self.getTypedRuleContext(tsqlParser.Full_table_nameContext,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_ddl_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdl_object" ):
                listener.enterDdl_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdl_object" ):
                listener.exitDdl_object(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdl_object" ):
                return visitor.visitDdl_object(self)
            else:
                return visitor.visitChildren(self)




    def ddl_object(self):

        localctx = tsqlParser.Ddl_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_ddl_object)
        try:
            self.state = 3603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3601
                self.full_table_name()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3602
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Full_column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def table_name(self):
            return self.getTypedRuleContext(tsqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_full_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFull_column_name" ):
                listener.enterFull_column_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFull_column_name" ):
                listener.exitFull_column_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFull_column_name" ):
                return visitor.visitFull_column_name(self)
            else:
                return visitor.visitChildren(self)




    def full_column_name(self):

        localctx = tsqlParser.Full_column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_full_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
            if la_ == 1:
                self.state = 3605
                self.table_name()
                self.state = 3606
                self.match(tsqlParser.DOT)


            self.state = 3610
            self.id_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_name_list_with_orderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.ASC)
            else:
                return self.getToken(tsqlParser.ASC, i)

        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DESC)
            else:
                return self.getToken(tsqlParser.DESC, i)

        def getRuleIndex(self):
            return tsqlParser.RULE_column_name_list_with_order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list_with_order" ):
                listener.enterColumn_name_list_with_order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list_with_order" ):
                listener.exitColumn_name_list_with_order(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list_with_order" ):
                return visitor.visitColumn_name_list_with_order(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list_with_order(self):

        localctx = tsqlParser.Column_name_list_with_orderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_column_name_list_with_order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3612
            self.id_()
            self.state = 3614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                self.state = 3613
                _la = self._input.LA(1)
                if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3616
                self.match(tsqlParser.COMMA)
                self.state = 3617
                self.id_()
                self.state = 3619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.ASC or _la==tsqlParser.DESC:
                    self.state = 3618
                    _la = self._input.LA(1)
                    if not(_la==tsqlParser.ASC or _la==tsqlParser.DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_name_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(tsqlParser.Id_Context)
            else:
                return self.getTypedRuleContext(tsqlParser.Id_Context,i)


        def getRuleIndex(self):
            return tsqlParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = tsqlParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3626
            self.id_()
            self.state = 3631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==tsqlParser.COMMA:
                self.state = 3627
                self.match(tsqlParser.COMMA)
                self.state = 3628
                self.id_()
                self.state = 3633
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cursor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def LOCAL_ID(self):
            return self.getToken(tsqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_cursor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCursor_name" ):
                listener.enterCursor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCursor_name" ):
                listener.exitCursor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCursor_name" ):
                return visitor.visitCursor_name(self)
            else:
                return visitor.visitChildren(self)




    def cursor_name(self):

        localctx = tsqlParser.Cursor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_cursor_name)
        try:
            self.state = 3636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3634
                self.id_()
                pass
            elif token in [tsqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3635
                self.match(tsqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_offContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(tsqlParser.ON, 0)

        def OFF(self):
            return self.getToken(tsqlParser.OFF, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_on_off

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_off" ):
                listener.enterOn_off(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_off" ):
                listener.exitOn_off(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_off" ):
                return visitor.visitOn_off(self)
            else:
                return visitor.visitChildren(self)




    def on_off(self):

        localctx = tsqlParser.On_offContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_on_off)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3638
            _la = self._input.LA(1)
            if not(_la==tsqlParser.OFF or _la==tsqlParser.ON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClusteredContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(tsqlParser.CLUSTERED, 0)

        def NONCLUSTERED(self):
            return self.getToken(tsqlParser.NONCLUSTERED, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_clustered

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClustered" ):
                listener.enterClustered(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClustered" ):
                listener.exitClustered(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClustered" ):
                return visitor.visitClustered(self)
            else:
                return visitor.visitChildren(self)




    def clustered(self):

        localctx = tsqlParser.ClusteredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_clustered)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3640
            _la = self._input.LA(1)
            if not(_la==tsqlParser.CLUSTERED or _la==tsqlParser.NONCLUSTERED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Null_notnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def NOT(self):
            return self.getToken(tsqlParser.NOT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_null_notnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_notnull" ):
                listener.enterNull_notnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_notnull" ):
                listener.exitNull_notnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNull_notnull" ):
                return visitor.visitNull_notnull(self)
            else:
                return visitor.visitChildren(self)




    def null_notnull(self):

        localctx = tsqlParser.Null_notnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_null_notnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==tsqlParser.NOT:
                self.state = 3642
                self.match(tsqlParser.NOT)


            self.state = 3645
            self.match(tsqlParser.NULL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scalar_function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def func_proc_name(self):
            return self.getTypedRuleContext(tsqlParser.Func_proc_nameContext,0)


        def RIGHT(self):
            return self.getToken(tsqlParser.RIGHT, 0)

        def LEFT(self):
            return self.getToken(tsqlParser.LEFT, 0)

        def BINARY_CHECKSUM(self):
            return self.getToken(tsqlParser.BINARY_CHECKSUM, 0)

        def CHECKSUM(self):
            return self.getToken(tsqlParser.CHECKSUM, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_scalar_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_function_name" ):
                listener.enterScalar_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_function_name" ):
                listener.exitScalar_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalar_function_name" ):
                return visitor.visitScalar_function_name(self)
            else:
                return visitor.visitChildren(self)




    def scalar_function_name(self):

        localctx = tsqlParser.Scalar_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_scalar_function_name)
        try:
            self.state = 3652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.DOUBLE_QUOTE_ID, tsqlParser.SQUARE_BRACKET_ID, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3647
                self.func_proc_name()
                pass
            elif token in [tsqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3648
                self.match(tsqlParser.RIGHT)
                pass
            elif token in [tsqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3649
                self.match(tsqlParser.LEFT)
                pass
            elif token in [tsqlParser.BINARY_CHECKSUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3650
                self.match(tsqlParser.BINARY_CHECKSUM)
                pass
            elif token in [tsqlParser.CHECKSUM]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3651
                self.match(tsqlParser.CHECKSUM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Data_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def id_(self):
            return self.getTypedRuleContext(tsqlParser.Id_Context,0)


        def IDENTITY(self):
            return self.getToken(tsqlParser.IDENTITY, 0)

        def DECIMAL(self, i:int=None):
            if i is None:
                return self.getTokens(tsqlParser.DECIMAL)
            else:
                return self.getToken(tsqlParser.DECIMAL, i)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_data_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterData_type" ):
                listener.enterData_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitData_type" ):
                listener.exitData_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData_type" ):
                return visitor.visitData_type(self)
            else:
                return visitor.visitChildren(self)




    def data_type(self):

        localctx = tsqlParser.Data_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_data_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3654
            self.id_()
            self.state = 3656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.state = 3655
                self.match(tsqlParser.IDENTITY)


            self.state = 3665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
            if la_ == 1:
                self.state = 3658
                self.match(tsqlParser.LR_BRACKET)
                self.state = 3659
                _la = self._input.LA(1)
                if not(_la==tsqlParser.MAX or _la==tsqlParser.DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.COMMA:
                    self.state = 3660
                    self.match(tsqlParser.COMMA)
                    self.state = 3661
                    self.match(tsqlParser.DECIMAL)


                self.state = 3664
                self.match(tsqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(tsqlParser.NULL, 0)

        def constant(self):
            return self.getTypedRuleContext(tsqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return tsqlParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value" ):
                return visitor.visitDefault_value(self)
            else:
                return visitor.visitChildren(self)




    def default_value(self):

        localctx = tsqlParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_default_value)
        try:
            self.state = 3669
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.NULL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3667
                self.match(tsqlParser.NULL)
                pass
            elif token in [tsqlParser.DECIMAL, tsqlParser.STRING, tsqlParser.BINARY, tsqlParser.FLOAT, tsqlParser.REAL, tsqlParser.DOLLAR, tsqlParser.PLUS, tsqlParser.MINUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3668
                self.constant()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dollar = None # Token

        def STRING(self):
            return self.getToken(tsqlParser.STRING, 0)

        def BINARY(self):
            return self.getToken(tsqlParser.BINARY, 0)

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def sign(self):
            return self.getTypedRuleContext(tsqlParser.SignContext,0)


        def REAL(self):
            return self.getToken(tsqlParser.REAL, 0)

        def FLOAT(self):
            return self.getToken(tsqlParser.FLOAT, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = tsqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 3686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3671
                self.match(tsqlParser.STRING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3672
                self.match(tsqlParser.BINARY)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3673
                    self.sign()


                self.state = 3676
                self.match(tsqlParser.DECIMAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3677
                    self.sign()


                self.state = 3680
                _la = self._input.LA(1)
                if not(_la==tsqlParser.FLOAT or _la==tsqlParser.REAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==tsqlParser.PLUS or _la==tsqlParser.MINUS:
                    self.state = 3681
                    self.sign()


                self.state = 3684
                localctx.dollar = self.match(tsqlParser.DOLLAR)
                self.state = 3685
                _la = self._input.LA(1)
                if not(_la==tsqlParser.DECIMAL or _la==tsqlParser.FLOAT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_sign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign" ):
                listener.enterSign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign" ):
                listener.exitSign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSign" ):
                return visitor.visitSign(self)
            else:
                return visitor.visitChildren(self)




    def sign(self):

        localctx = tsqlParser.SignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_sign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3688
            _la = self._input.LA(1)
            if not(_la==tsqlParser.PLUS or _la==tsqlParser.MINUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Id_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_id(self):
            return self.getTypedRuleContext(tsqlParser.Simple_idContext,0)


        def DOUBLE_QUOTE_ID(self):
            return self.getToken(tsqlParser.DOUBLE_QUOTE_ID, 0)

        def SQUARE_BRACKET_ID(self):
            return self.getToken(tsqlParser.SQUARE_BRACKET_ID, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_id_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterId_" ):
                listener.enterId_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitId_" ):
                listener.exitId_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitId_" ):
                return visitor.visitId_(self)
            else:
                return visitor.visitChildren(self)




    def id_(self):

        localctx = tsqlParser.Id_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_id_)
        try:
            self.state = 3693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [tsqlParser.CALLED, tsqlParser.DATA_COMPRESSION, tsqlParser.EVENTDATA, tsqlParser.FILLFACTOR, tsqlParser.FORCESEEK, tsqlParser.PAGE, tsqlParser.PUBLIC, tsqlParser.RAW, tsqlParser.RETURN, tsqlParser.RETURNS, tsqlParser.SERVER, tsqlParser.SOURCE, tsqlParser.TARGET, tsqlParser.ABSOLUTE, tsqlParser.APPLY, tsqlParser.AUTO, tsqlParser.AVG, tsqlParser.BASE64, tsqlParser.CALLER, tsqlParser.CAST, tsqlParser.CATCH, tsqlParser.CHECKSUM_AGG, tsqlParser.COMMITTED, tsqlParser.CONCAT, tsqlParser.CONTROL, tsqlParser.COOKIE, tsqlParser.COUNT, tsqlParser.COUNT_BIG, tsqlParser.DELAY, tsqlParser.DELETED, tsqlParser.DENSE_RANK, tsqlParser.DISABLE, tsqlParser.DYNAMIC, tsqlParser.ENCRYPTION, tsqlParser.EXPAND, tsqlParser.FAST, tsqlParser.FAST_FORWARD, tsqlParser.FIRST, tsqlParser.FOLLOWING, tsqlParser.FORCE, tsqlParser.FORCED, tsqlParser.FORWARD_ONLY, tsqlParser.FULLSCAN, tsqlParser.GLOBAL, tsqlParser.GO, tsqlParser.GROUPING, tsqlParser.GROUPING_ID, tsqlParser.HASH, tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, tsqlParser.IMPERSONATE, tsqlParser.INPUT, tsqlParser.INSENSITIVE, tsqlParser.INSERTED, tsqlParser.ISOLATION, tsqlParser.KEEP, tsqlParser.KEEPFIXED, tsqlParser.KEYSET, tsqlParser.LAST, tsqlParser.LEVEL, tsqlParser.LOCAL, tsqlParser.LOCK_ESCALATION, tsqlParser.LOGIN, tsqlParser.LOOP, tsqlParser.MARK, tsqlParser.MAX, tsqlParser.MAXDOP, tsqlParser.MAXRECURSION, tsqlParser.MIN, tsqlParser.MODIFY, tsqlParser.NAME, tsqlParser.NEXT, tsqlParser.NOCOUNT, tsqlParser.NOEXPAND, tsqlParser.NORECOMPUTE, tsqlParser.NTILE, tsqlParser.NUMBER, tsqlParser.OFFSET, tsqlParser.ONLINE, tsqlParser.ONLY, tsqlParser.OPTIMISTIC, tsqlParser.OPTIMIZE, tsqlParser.OUT, tsqlParser.OUTPUT, tsqlParser.OWNER, tsqlParser.PARAMETERIZATION, tsqlParser.PARTITION, tsqlParser.PATH, tsqlParser.PRECEDING, tsqlParser.PRIOR, tsqlParser.PRIVILEGES, tsqlParser.RANGE, tsqlParser.RANK, tsqlParser.READONLY, tsqlParser.READ_ONLY, tsqlParser.RECOMPILE, tsqlParser.RELATIVE, tsqlParser.REMOTE, tsqlParser.REPEATABLE, tsqlParser.ROBUST, tsqlParser.ROOT, tsqlParser.ROW, tsqlParser.ROWGUID, tsqlParser.ROWS, tsqlParser.ROW_NUMBER, tsqlParser.SAMPLE, tsqlParser.SCHEMABINDING, tsqlParser.SCROLL, tsqlParser.SCROLL_LOCKS, tsqlParser.SELF, tsqlParser.SERIALIZABLE, tsqlParser.SIMPLE, tsqlParser.SIZE, tsqlParser.SNAPSHOT, tsqlParser.SPATIAL_WINDOW_MAX_CELLS, tsqlParser.STATIC, tsqlParser.STATS_STREAM, tsqlParser.STDEV, tsqlParser.STDEVP, tsqlParser.SUM, tsqlParser.TEXTIMAGE_ON, tsqlParser.THROW, tsqlParser.TIES, tsqlParser.TIME, tsqlParser.TRY, tsqlParser.TYPE, tsqlParser.TYPE_WARNING, tsqlParser.UNBOUNDED, tsqlParser.UNCOMMITTED, tsqlParser.UNKNOWN, tsqlParser.USING, tsqlParser.VAR, tsqlParser.VARP, tsqlParser.VIEWS, tsqlParser.VIEW_METADATA, tsqlParser.WORK, tsqlParser.XML, tsqlParser.XMLNAMESPACES, tsqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3690
                self.simple_id()
                pass
            elif token in [tsqlParser.DOUBLE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3691
                self.match(tsqlParser.DOUBLE_QUOTE_ID)
                pass
            elif token in [tsqlParser.SQUARE_BRACKET_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3692
                self.match(tsqlParser.SQUARE_BRACKET_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(tsqlParser.ID, 0)

        def ABSOLUTE(self):
            return self.getToken(tsqlParser.ABSOLUTE, 0)

        def APPLY(self):
            return self.getToken(tsqlParser.APPLY, 0)

        def AUTO(self):
            return self.getToken(tsqlParser.AUTO, 0)

        def AVG(self):
            return self.getToken(tsqlParser.AVG, 0)

        def BASE64(self):
            return self.getToken(tsqlParser.BASE64, 0)

        def CALLED(self):
            return self.getToken(tsqlParser.CALLED, 0)

        def CALLER(self):
            return self.getToken(tsqlParser.CALLER, 0)

        def CAST(self):
            return self.getToken(tsqlParser.CAST, 0)

        def CATCH(self):
            return self.getToken(tsqlParser.CATCH, 0)

        def CHECKSUM_AGG(self):
            return self.getToken(tsqlParser.CHECKSUM_AGG, 0)

        def COMMITTED(self):
            return self.getToken(tsqlParser.COMMITTED, 0)

        def CONCAT(self):
            return self.getToken(tsqlParser.CONCAT, 0)

        def CONTROL(self):
            return self.getToken(tsqlParser.CONTROL, 0)

        def COOKIE(self):
            return self.getToken(tsqlParser.COOKIE, 0)

        def COUNT(self):
            return self.getToken(tsqlParser.COUNT, 0)

        def COUNT_BIG(self):
            return self.getToken(tsqlParser.COUNT_BIG, 0)

        def DATA_COMPRESSION(self):
            return self.getToken(tsqlParser.DATA_COMPRESSION, 0)

        def DELAY(self):
            return self.getToken(tsqlParser.DELAY, 0)

        def DELETED(self):
            return self.getToken(tsqlParser.DELETED, 0)

        def DENSE_RANK(self):
            return self.getToken(tsqlParser.DENSE_RANK, 0)

        def DISABLE(self):
            return self.getToken(tsqlParser.DISABLE, 0)

        def DYNAMIC(self):
            return self.getToken(tsqlParser.DYNAMIC, 0)

        def ENCRYPTION(self):
            return self.getToken(tsqlParser.ENCRYPTION, 0)

        def EVENTDATA(self):
            return self.getToken(tsqlParser.EVENTDATA, 0)

        def EXPAND(self):
            return self.getToken(tsqlParser.EXPAND, 0)

        def FAST(self):
            return self.getToken(tsqlParser.FAST, 0)

        def FAST_FORWARD(self):
            return self.getToken(tsqlParser.FAST_FORWARD, 0)

        def FILLFACTOR(self):
            return self.getToken(tsqlParser.FILLFACTOR, 0)

        def FIRST(self):
            return self.getToken(tsqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(tsqlParser.FOLLOWING, 0)

        def FORCE(self):
            return self.getToken(tsqlParser.FORCE, 0)

        def FORCESEEK(self):
            return self.getToken(tsqlParser.FORCESEEK, 0)

        def FORWARD_ONLY(self):
            return self.getToken(tsqlParser.FORWARD_ONLY, 0)

        def FULLSCAN(self):
            return self.getToken(tsqlParser.FULLSCAN, 0)

        def GLOBAL(self):
            return self.getToken(tsqlParser.GLOBAL, 0)

        def GO(self):
            return self.getToken(tsqlParser.GO, 0)

        def GROUPING(self):
            return self.getToken(tsqlParser.GROUPING, 0)

        def GROUPING_ID(self):
            return self.getToken(tsqlParser.GROUPING_ID, 0)

        def HASH(self):
            return self.getToken(tsqlParser.HASH, 0)

        def IMPERSONATE(self):
            return self.getToken(tsqlParser.IMPERSONATE, 0)

        def INSENSITIVE(self):
            return self.getToken(tsqlParser.INSENSITIVE, 0)

        def INSERTED(self):
            return self.getToken(tsqlParser.INSERTED, 0)

        def ISOLATION(self):
            return self.getToken(tsqlParser.ISOLATION, 0)

        def KEEP(self):
            return self.getToken(tsqlParser.KEEP, 0)

        def KEEPFIXED(self):
            return self.getToken(tsqlParser.KEEPFIXED, 0)

        def FORCED(self):
            return self.getToken(tsqlParser.FORCED, 0)

        def KEYSET(self):
            return self.getToken(tsqlParser.KEYSET, 0)

        def IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX(self):
            return self.getToken(tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0)

        def INPUT(self):
            return self.getToken(tsqlParser.INPUT, 0)

        def LAST(self):
            return self.getToken(tsqlParser.LAST, 0)

        def LEVEL(self):
            return self.getToken(tsqlParser.LEVEL, 0)

        def LOCAL(self):
            return self.getToken(tsqlParser.LOCAL, 0)

        def LOCK_ESCALATION(self):
            return self.getToken(tsqlParser.LOCK_ESCALATION, 0)

        def LOGIN(self):
            return self.getToken(tsqlParser.LOGIN, 0)

        def LOOP(self):
            return self.getToken(tsqlParser.LOOP, 0)

        def MARK(self):
            return self.getToken(tsqlParser.MARK, 0)

        def MAX(self):
            return self.getToken(tsqlParser.MAX, 0)

        def MAXDOP(self):
            return self.getToken(tsqlParser.MAXDOP, 0)

        def MAXRECURSION(self):
            return self.getToken(tsqlParser.MAXRECURSION, 0)

        def MIN(self):
            return self.getToken(tsqlParser.MIN, 0)

        def MODIFY(self):
            return self.getToken(tsqlParser.MODIFY, 0)

        def NAME(self):
            return self.getToken(tsqlParser.NAME, 0)

        def NEXT(self):
            return self.getToken(tsqlParser.NEXT, 0)

        def NOCOUNT(self):
            return self.getToken(tsqlParser.NOCOUNT, 0)

        def NOEXPAND(self):
            return self.getToken(tsqlParser.NOEXPAND, 0)

        def NORECOMPUTE(self):
            return self.getToken(tsqlParser.NORECOMPUTE, 0)

        def NTILE(self):
            return self.getToken(tsqlParser.NTILE, 0)

        def NUMBER(self):
            return self.getToken(tsqlParser.NUMBER, 0)

        def OFFSET(self):
            return self.getToken(tsqlParser.OFFSET, 0)

        def ONLINE(self):
            return self.getToken(tsqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(tsqlParser.ONLY, 0)

        def OPTIMISTIC(self):
            return self.getToken(tsqlParser.OPTIMISTIC, 0)

        def OPTIMIZE(self):
            return self.getToken(tsqlParser.OPTIMIZE, 0)

        def OUT(self):
            return self.getToken(tsqlParser.OUT, 0)

        def OUTPUT(self):
            return self.getToken(tsqlParser.OUTPUT, 0)

        def OWNER(self):
            return self.getToken(tsqlParser.OWNER, 0)

        def PAGE(self):
            return self.getToken(tsqlParser.PAGE, 0)

        def PARAMETERIZATION(self):
            return self.getToken(tsqlParser.PARAMETERIZATION, 0)

        def PARTITION(self):
            return self.getToken(tsqlParser.PARTITION, 0)

        def PATH(self):
            return self.getToken(tsqlParser.PATH, 0)

        def PRECEDING(self):
            return self.getToken(tsqlParser.PRECEDING, 0)

        def PRIOR(self):
            return self.getToken(tsqlParser.PRIOR, 0)

        def PRIVILEGES(self):
            return self.getToken(tsqlParser.PRIVILEGES, 0)

        def PUBLIC(self):
            return self.getToken(tsqlParser.PUBLIC, 0)

        def RANGE(self):
            return self.getToken(tsqlParser.RANGE, 0)

        def RANK(self):
            return self.getToken(tsqlParser.RANK, 0)

        def RAW(self):
            return self.getToken(tsqlParser.RAW, 0)

        def READONLY(self):
            return self.getToken(tsqlParser.READONLY, 0)

        def READ_ONLY(self):
            return self.getToken(tsqlParser.READ_ONLY, 0)

        def RECOMPILE(self):
            return self.getToken(tsqlParser.RECOMPILE, 0)

        def RELATIVE(self):
            return self.getToken(tsqlParser.RELATIVE, 0)

        def REMOTE(self):
            return self.getToken(tsqlParser.REMOTE, 0)

        def REPEATABLE(self):
            return self.getToken(tsqlParser.REPEATABLE, 0)

        def RETURN(self):
            return self.getToken(tsqlParser.RETURN, 0)

        def RETURNS(self):
            return self.getToken(tsqlParser.RETURNS, 0)

        def ROBUST(self):
            return self.getToken(tsqlParser.ROBUST, 0)

        def ROOT(self):
            return self.getToken(tsqlParser.ROOT, 0)

        def ROW(self):
            return self.getToken(tsqlParser.ROW, 0)

        def ROWGUID(self):
            return self.getToken(tsqlParser.ROWGUID, 0)

        def ROWS(self):
            return self.getToken(tsqlParser.ROWS, 0)

        def ROW_NUMBER(self):
            return self.getToken(tsqlParser.ROW_NUMBER, 0)

        def SAMPLE(self):
            return self.getToken(tsqlParser.SAMPLE, 0)

        def SIZE(self):
            return self.getToken(tsqlParser.SIZE, 0)

        def SCHEMABINDING(self):
            return self.getToken(tsqlParser.SCHEMABINDING, 0)

        def SCROLL(self):
            return self.getToken(tsqlParser.SCROLL, 0)

        def SCROLL_LOCKS(self):
            return self.getToken(tsqlParser.SCROLL_LOCKS, 0)

        def SELF(self):
            return self.getToken(tsqlParser.SELF, 0)

        def SERIALIZABLE(self):
            return self.getToken(tsqlParser.SERIALIZABLE, 0)

        def SERVER(self):
            return self.getToken(tsqlParser.SERVER, 0)

        def SIMPLE(self):
            return self.getToken(tsqlParser.SIMPLE, 0)

        def SNAPSHOT(self):
            return self.getToken(tsqlParser.SNAPSHOT, 0)

        def SOURCE(self):
            return self.getToken(tsqlParser.SOURCE, 0)

        def SPATIAL_WINDOW_MAX_CELLS(self):
            return self.getToken(tsqlParser.SPATIAL_WINDOW_MAX_CELLS, 0)

        def STATIC(self):
            return self.getToken(tsqlParser.STATIC, 0)

        def STATS_STREAM(self):
            return self.getToken(tsqlParser.STATS_STREAM, 0)

        def STDEV(self):
            return self.getToken(tsqlParser.STDEV, 0)

        def STDEVP(self):
            return self.getToken(tsqlParser.STDEVP, 0)

        def SUM(self):
            return self.getToken(tsqlParser.SUM, 0)

        def TARGET(self):
            return self.getToken(tsqlParser.TARGET, 0)

        def TEXTIMAGE_ON(self):
            return self.getToken(tsqlParser.TEXTIMAGE_ON, 0)

        def THROW(self):
            return self.getToken(tsqlParser.THROW, 0)

        def TIES(self):
            return self.getToken(tsqlParser.TIES, 0)

        def TIME(self):
            return self.getToken(tsqlParser.TIME, 0)

        def TRY(self):
            return self.getToken(tsqlParser.TRY, 0)

        def TYPE(self):
            return self.getToken(tsqlParser.TYPE, 0)

        def TYPE_WARNING(self):
            return self.getToken(tsqlParser.TYPE_WARNING, 0)

        def UNBOUNDED(self):
            return self.getToken(tsqlParser.UNBOUNDED, 0)

        def UNCOMMITTED(self):
            return self.getToken(tsqlParser.UNCOMMITTED, 0)

        def UNKNOWN(self):
            return self.getToken(tsqlParser.UNKNOWN, 0)

        def USING(self):
            return self.getToken(tsqlParser.USING, 0)

        def VAR(self):
            return self.getToken(tsqlParser.VAR, 0)

        def VARP(self):
            return self.getToken(tsqlParser.VARP, 0)

        def VIEW_METADATA(self):
            return self.getToken(tsqlParser.VIEW_METADATA, 0)

        def VIEWS(self):
            return self.getToken(tsqlParser.VIEWS, 0)

        def WORK(self):
            return self.getToken(tsqlParser.WORK, 0)

        def XML(self):
            return self.getToken(tsqlParser.XML, 0)

        def XMLNAMESPACES(self):
            return self.getToken(tsqlParser.XMLNAMESPACES, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_simple_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_id" ):
                listener.enterSimple_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_id" ):
                listener.exitSimple_id(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_id" ):
                return visitor.visitSimple_id(self)
            else:
                return visitor.visitChildren(self)




    def simple_id(self):

        localctx = tsqlParser.Simple_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_simple_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3695
            _la = self._input.LA(1)
            if not(((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & ((1 << (tsqlParser.CALLED - 18)) | (1 << (tsqlParser.DATA_COMPRESSION - 18)) | (1 << (tsqlParser.EVENTDATA - 18)) | (1 << (tsqlParser.FILLFACTOR - 18)) | (1 << (tsqlParser.FORCESEEK - 18)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (tsqlParser.PAGE - 131)) | (1 << (tsqlParser.PUBLIC - 131)) | (1 << (tsqlParser.RAW - 131)) | (1 << (tsqlParser.RETURN - 131)) | (1 << (tsqlParser.RETURNS - 131)) | (1 << (tsqlParser.SERVER - 131)) | (1 << (tsqlParser.SOURCE - 131)) | (1 << (tsqlParser.TARGET - 131)))) != 0) or ((((_la - 206)) & ~0x3f) == 0 and ((1 << (_la - 206)) & ((1 << (tsqlParser.ABSOLUTE - 206)) | (1 << (tsqlParser.APPLY - 206)) | (1 << (tsqlParser.AUTO - 206)) | (1 << (tsqlParser.AVG - 206)) | (1 << (tsqlParser.BASE64 - 206)) | (1 << (tsqlParser.CALLER - 206)) | (1 << (tsqlParser.CAST - 206)) | (1 << (tsqlParser.CATCH - 206)) | (1 << (tsqlParser.CHECKSUM_AGG - 206)) | (1 << (tsqlParser.COMMITTED - 206)) | (1 << (tsqlParser.CONCAT - 206)) | (1 << (tsqlParser.CONTROL - 206)) | (1 << (tsqlParser.COOKIE - 206)) | (1 << (tsqlParser.COUNT - 206)) | (1 << (tsqlParser.COUNT_BIG - 206)) | (1 << (tsqlParser.DELAY - 206)) | (1 << (tsqlParser.DELETED - 206)) | (1 << (tsqlParser.DENSE_RANK - 206)) | (1 << (tsqlParser.DISABLE - 206)) | (1 << (tsqlParser.DYNAMIC - 206)) | (1 << (tsqlParser.ENCRYPTION - 206)) | (1 << (tsqlParser.EXPAND - 206)))) != 0) or ((((_la - 270)) & ~0x3f) == 0 and ((1 << (_la - 270)) & ((1 << (tsqlParser.FAST - 270)) | (1 << (tsqlParser.FAST_FORWARD - 270)) | (1 << (tsqlParser.FIRST - 270)) | (1 << (tsqlParser.FOLLOWING - 270)) | (1 << (tsqlParser.FORCE - 270)) | (1 << (tsqlParser.FORCED - 270)) | (1 << (tsqlParser.FORWARD_ONLY - 270)) | (1 << (tsqlParser.FULLSCAN - 270)) | (1 << (tsqlParser.GLOBAL - 270)) | (1 << (tsqlParser.GO - 270)) | (1 << (tsqlParser.GROUPING - 270)) | (1 << (tsqlParser.GROUPING_ID - 270)) | (1 << (tsqlParser.HASH - 270)) | (1 << (tsqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 270)) | (1 << (tsqlParser.IMPERSONATE - 270)) | (1 << (tsqlParser.INPUT - 270)) | (1 << (tsqlParser.INSENSITIVE - 270)) | (1 << (tsqlParser.INSERTED - 270)) | (1 << (tsqlParser.ISOLATION - 270)) | (1 << (tsqlParser.KEEP - 270)) | (1 << (tsqlParser.KEEPFIXED - 270)) | (1 << (tsqlParser.KEYSET - 270)) | (1 << (tsqlParser.LAST - 270)) | (1 << (tsqlParser.LEVEL - 270)) | (1 << (tsqlParser.LOCAL - 270)) | (1 << (tsqlParser.LOCK_ESCALATION - 270)) | (1 << (tsqlParser.LOGIN - 270)) | (1 << (tsqlParser.LOOP - 270)) | (1 << (tsqlParser.MARK - 270)) | (1 << (tsqlParser.MAX - 270)) | (1 << (tsqlParser.MAXDOP - 270)) | (1 << (tsqlParser.MAXRECURSION - 270)) | (1 << (tsqlParser.MIN - 270)) | (1 << (tsqlParser.MODIFY - 270)) | (1 << (tsqlParser.NAME - 270)) | (1 << (tsqlParser.NEXT - 270)) | (1 << (tsqlParser.NOCOUNT - 270)) | (1 << (tsqlParser.NOEXPAND - 270)) | (1 << (tsqlParser.NORECOMPUTE - 270)) | (1 << (tsqlParser.NTILE - 270)) | (1 << (tsqlParser.NUMBER - 270)))) != 0) or ((((_la - 335)) & ~0x3f) == 0 and ((1 << (_la - 335)) & ((1 << (tsqlParser.OFFSET - 335)) | (1 << (tsqlParser.ONLINE - 335)) | (1 << (tsqlParser.ONLY - 335)) | (1 << (tsqlParser.OPTIMISTIC - 335)) | (1 << (tsqlParser.OPTIMIZE - 335)) | (1 << (tsqlParser.OUT - 335)) | (1 << (tsqlParser.OUTPUT - 335)) | (1 << (tsqlParser.OWNER - 335)) | (1 << (tsqlParser.PARAMETERIZATION - 335)) | (1 << (tsqlParser.PARTITION - 335)) | (1 << (tsqlParser.PATH - 335)) | (1 << (tsqlParser.PRECEDING - 335)) | (1 << (tsqlParser.PRIOR - 335)) | (1 << (tsqlParser.PRIVILEGES - 335)) | (1 << (tsqlParser.RANGE - 335)) | (1 << (tsqlParser.RANK - 335)) | (1 << (tsqlParser.READONLY - 335)) | (1 << (tsqlParser.READ_ONLY - 335)) | (1 << (tsqlParser.RECOMPILE - 335)) | (1 << (tsqlParser.RELATIVE - 335)) | (1 << (tsqlParser.REMOTE - 335)) | (1 << (tsqlParser.REPEATABLE - 335)) | (1 << (tsqlParser.ROBUST - 335)) | (1 << (tsqlParser.ROOT - 335)) | (1 << (tsqlParser.ROW - 335)) | (1 << (tsqlParser.ROWGUID - 335)) | (1 << (tsqlParser.ROWS - 335)) | (1 << (tsqlParser.ROW_NUMBER - 335)) | (1 << (tsqlParser.SAMPLE - 335)) | (1 << (tsqlParser.SCHEMABINDING - 335)) | (1 << (tsqlParser.SCROLL - 335)) | (1 << (tsqlParser.SCROLL_LOCKS - 335)) | (1 << (tsqlParser.SELF - 335)) | (1 << (tsqlParser.SERIALIZABLE - 335)) | (1 << (tsqlParser.SIMPLE - 335)) | (1 << (tsqlParser.SIZE - 335)) | (1 << (tsqlParser.SNAPSHOT - 335)) | (1 << (tsqlParser.SPATIAL_WINDOW_MAX_CELLS - 335)) | (1 << (tsqlParser.STATIC - 335)) | (1 << (tsqlParser.STATS_STREAM - 335)) | (1 << (tsqlParser.STDEV - 335)) | (1 << (tsqlParser.STDEVP - 335)) | (1 << (tsqlParser.SUM - 335)) | (1 << (tsqlParser.TEXTIMAGE_ON - 335)) | (1 << (tsqlParser.THROW - 335)) | (1 << (tsqlParser.TIES - 335)) | (1 << (tsqlParser.TIME - 335)) | (1 << (tsqlParser.TRY - 335)))) != 0) or ((((_la - 400)) & ~0x3f) == 0 and ((1 << (_la - 400)) & ((1 << (tsqlParser.TYPE - 400)) | (1 << (tsqlParser.TYPE_WARNING - 400)) | (1 << (tsqlParser.UNBOUNDED - 400)) | (1 << (tsqlParser.UNCOMMITTED - 400)) | (1 << (tsqlParser.UNKNOWN - 400)) | (1 << (tsqlParser.USING - 400)) | (1 << (tsqlParser.VAR - 400)) | (1 << (tsqlParser.VARP - 400)) | (1 << (tsqlParser.VIEWS - 400)) | (1 << (tsqlParser.VIEW_METADATA - 400)) | (1 << (tsqlParser.WORK - 400)) | (1 << (tsqlParser.XML - 400)) | (1 << (tsqlParser.XMLNAMESPACES - 400)) | (1 << (tsqlParser.ID - 400)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Comparison_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_comparison_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison_operator" ):
                listener.enterComparison_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison_operator" ):
                listener.exitComparison_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison_operator" ):
                return visitor.visitComparison_operator(self)
            else:
                return visitor.visitChildren(self)




    def comparison_operator(self):

        localctx = tsqlParser.Comparison_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_comparison_operator)
        try:
            self.state = 3712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,540,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3697
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3698
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3699
                self.match(tsqlParser.LESS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3700
                self.match(tsqlParser.LESS)
                self.state = 3701
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3702
                self.match(tsqlParser.GREATER)
                self.state = 3703
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3704
                self.match(tsqlParser.LESS)
                self.state = 3705
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3706
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3707
                self.match(tsqlParser.EQUAL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3708
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3709
                self.match(tsqlParser.GREATER)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3710
                self.match(tsqlParser.EXCLAMATION)
                self.state = 3711
                self.match(tsqlParser.LESS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Assignment_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return tsqlParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_operator" ):
                return visitor.visitAssignment_operator(self)
            else:
                return visitor.visitChildren(self)




    def assignment_operator(self):

        localctx = tsqlParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3714
            _la = self._input.LA(1)
            if not(((((_la - 431)) & ~0x3f) == 0 and ((1 << (_la - 431)) & ((1 << (tsqlParser.PLUS_ASSIGN - 431)) | (1 << (tsqlParser.MINUS_ASSIGN - 431)) | (1 << (tsqlParser.MULT_ASSIGN - 431)) | (1 << (tsqlParser.DIV_ASSIGN - 431)) | (1 << (tsqlParser.MOD_ASSIGN - 431)) | (1 << (tsqlParser.AND_ASSIGN - 431)) | (1 << (tsqlParser.XOR_ASSIGN - 431)) | (1 << (tsqlParser.OR_ASSIGN - 431)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_sizeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL(self):
            return self.getToken(tsqlParser.DECIMAL, 0)

        def KB(self):
            return self.getToken(tsqlParser.KB, 0)

        def MB(self):
            return self.getToken(tsqlParser.MB, 0)

        def GB(self):
            return self.getToken(tsqlParser.GB, 0)

        def TB(self):
            return self.getToken(tsqlParser.TB, 0)

        def getRuleIndex(self):
            return tsqlParser.RULE_file_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_size" ):
                listener.enterFile_size(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_size" ):
                listener.exitFile_size(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_size" ):
                return visitor.visitFile_size(self)
            else:
                return visitor.visitChildren(self)




    def file_size(self):

        localctx = tsqlParser.File_sizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_file_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3716
            self.match(tsqlParser.DECIMAL)
            self.state = 3718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (tsqlParser.GB - 281)) | (1 << (tsqlParser.KB - 281)) | (1 << (tsqlParser.MB - 281)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE:
                self.state = 3717
                _la = self._input.LA(1)
                if not(((((_la - 281)) & ~0x3f) == 0 and ((1 << (_la - 281)) & ((1 << (tsqlParser.GB - 281)) | (1 << (tsqlParser.KB - 281)) | (1 << (tsqlParser.MB - 281)))) != 0) or _la==tsqlParser.TB or _la==tsqlParser.MODULE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[110] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 12)
         




