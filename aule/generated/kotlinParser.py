# Generated from kotlinParser.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3z")
        buf.write("\u055e\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\3\2\3\2\7\2\u00e5\n\2\f\2\16\2\u00e8\13\2\3\3\5\3")
        buf.write("\u00eb\n\3\3\3\7\3\u00ee\n\3\f\3\16\3\u00f1\13\3\3\4\3")
        buf.write("\4\3\4\3\4\7\4\u00f7\n\4\f\4\16\4\u00fa\13\4\3\4\7\4\u00fd")
        buf.write("\n\4\f\4\16\4\u0100\13\4\3\5\3\5\3\5\3\5\7\5\u0106\n\5")
        buf.write("\f\5\16\5\u0109\13\5\3\5\3\5\3\5\3\5\5\5\u010f\n\5\3\5")
        buf.write("\7\5\u0112\n\5\f\5\16\5\u0115\13\5\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u011b\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0124\n\7\3")
        buf.write("\b\5\b\u0127\n\b\3\t\3\t\3\t\3\t\7\t\u012d\n\t\f\t\16")
        buf.write("\t\u0130\13\t\3\t\3\t\3\n\3\n\3\n\3\n\5\n\u0138\n\n\3")
        buf.write("\13\3\13\5\13\u013c\n\13\3\13\3\13\7\13\u0140\n\13\f\13")
        buf.write("\16\13\u0143\13\13\3\13\3\13\3\f\3\f\3\f\3\f\7\f\u014b")
        buf.write("\n\f\f\f\16\f\u014e\13\f\5\f\u0150\n\f\3\r\5\r\u0153\n")
        buf.write("\r\3\r\3\r\3\r\3\r\3\16\5\16\u015a\n\16\3\16\3\16\3\17")
        buf.write("\3\17\3\17\3\17\5\17\u0162\n\17\3\17\5\17\u0165\n\17\3")
        buf.write("\17\3\17\5\17\u0169\n\17\3\17\3\17\5\17\u016d\n\17\3\17")
        buf.write("\5\17\u0170\n\17\3\17\3\17\5\17\u0174\n\17\3\17\5\17\u0177")
        buf.write("\n\17\5\17\u0179\n\17\3\20\3\20\5\20\u017d\n\20\3\20\3")
        buf.write("\20\3\20\7\20\u0182\n\20\f\20\16\20\u0185\13\20\3\21\3")
        buf.write("\21\3\21\3\21\5\21\u018b\n\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\7\22\u0192\n\22\f\22\16\22\u0195\13\22\3\22\3\22\5\22")
        buf.write("\u0199\n\22\3\23\3\23\3\23\5\23\u019e\n\23\3\24\3\24\3")
        buf.write("\24\3\24\5\24\u01a4\n\24\3\25\3\25\3\25\3\26\3\26\3\26")
        buf.write("\3\26\7\26\u01ad\n\26\f\26\16\26\u01b0\13\26\5\26\u01b2")
        buf.write("\n\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\7\27\u01bc")
        buf.write("\n\27\f\27\16\27\u01bf\13\27\3\27\3\27\3\30\3\30\3\30")
        buf.write("\5\30\u01c6\n\30\3\30\3\30\3\30\5\30\u01cb\n\30\3\30\3")
        buf.write("\30\5\30\u01cf\n\30\3\30\3\30\3\30\3\30\7\30\u01d5\n\30")
        buf.write("\f\30\16\30\u01d8\13\30\5\30\u01da\n\30\3\30\5\30\u01dd")
        buf.write("\n\30\3\30\5\30\u01e0\n\30\3\30\5\30\u01e3\n\30\3\30\5")
        buf.write("\30\u01e6\n\30\5\30\u01e8\n\30\3\30\7\30\u01eb\n\30\f")
        buf.write("\30\16\30\u01ee\13\30\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u01f9\n\31\3\31\3\31\5\31\u01fd\n\31")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0208")
        buf.write("\n\32\3\32\3\32\3\32\5\32\u020d\n\32\3\33\7\33\u0210\n")
        buf.write("\33\f\33\16\33\u0213\13\33\3\34\3\34\3\35\3\35\3\35\3")
        buf.write("\35\3\35\5\35\u021c\n\35\3\36\3\36\3\37\3\37\3 \3 \3!")
        buf.write("\3!\3\"\6\"\u0227\n\"\r\"\16\"\u0228\3#\3#\3#\3#\5#\u022f")
        buf.write("\n#\3#\3#\3$\3$\3%\3%\3%\5%\u0238\n%\3%\5%\u023b\n%\3")
        buf.write("%\3%\3&\3&\3&\3&\7&\u0243\n&\f&\16&\u0246\13&\5&\u0248")
        buf.write("\n&\3&\3&\3\'\3\'\3\'\7\'\u024f\n\'\f\'\16\'\u0252\13")
        buf.write("\'\3\'\5\'\u0255\n\'\3\'\5\'\u0258\n\'\3(\3(\3(\3(\5(")
        buf.write("\u025e\n(\3(\5(\u0261\n(\3(\3(\5(\u0265\n(\3(\3(\5(\u0269")
        buf.write("\n(\5(\u026b\n(\3)\3)\3)\3)\3)\5)\u0272\n)\3*\3*\3*\3")
        buf.write("+\3+\3+\3+\3,\3,\5,\u027d\n,\3,\3,\3,\5,\u0282\n,\3-\3")
        buf.write("-\3-\5-\u0287\n-\3-\3-\3-\3-\7-\u028d\n-\f-\16-\u0290")
        buf.write("\13-\5-\u0292\n-\3-\3-\3.\3.\3.\3.\3.\5.\u029b\n.\3.\3")
        buf.write(".\7.\u029f\n.\f.\16.\u02a2\13.\3/\3/\3/\3/\5/\u02a8\n")
        buf.write("/\3\60\5\60\u02ab\n\60\3\60\3\60\5\60\u02af\n\60\3\60")
        buf.write("\3\60\3\60\3\60\5\60\u02b5\n\60\3\61\3\61\5\61\u02b9\n")
        buf.write("\61\3\61\3\61\3\62\3\62\3\62\3\62\3\63\3\63\3\63\5\63")
        buf.write("\u02c4\n\63\3\64\3\64\3\64\3\64\5\64\u02ca\n\64\3\64\5")
        buf.write("\64\u02cd\n\64\3\64\3\64\5\64\u02d1\n\64\3\64\3\64\3\64")
        buf.write("\7\64\u02d6\n\64\f\64\16\64\u02d9\13\64\5\64\u02db\n\64")
        buf.write("\3\64\3\64\3\64\5\64\u02e0\n\64\3\64\7\64\u02e3\n\64\f")
        buf.write("\64\16\64\u02e6\13\64\3\65\3\65\3\65\3\65\7\65\u02ec\n")
        buf.write("\65\f\65\16\65\u02ef\13\65\3\66\3\66\3\66\5\66\u02f4\n")
        buf.write("\66\3\66\5\66\u02f7\n\66\3\66\3\66\7\66\u02fb\n\66\f\66")
        buf.write("\16\66\u02fe\13\66\3\67\3\67\3\67\3\67\5\67\u0304\n\67")
        buf.write("\3\67\3\67\7\67\u0308\n\67\f\67\16\67\u030b\13\67\38\3")
        buf.write("8\38\38\58\u0311\n8\39\79\u0314\n9\f9\169\u0317\139\3")
        buf.write(":\3:\3:\3:\7:\u031d\n:\f:\16:\u0320\13:\5:\u0322\n:\3")
        buf.write(":\3:\3;\3;\3;\5;\u0329\n;\3;\3;\3;\3;\5;\u032f\n;\3;\3")
        buf.write(";\5;\u0333\n;\3;\3;\3;\5;\u0338\n;\3;\3;\5;\u033c\n;\3")
        buf.write(";\7;\u033f\n;\f;\16;\u0342\13;\3<\7<\u0345\n<\f<\16<\u0348")
        buf.write("\13<\3<\3<\7<\u034c\n<\f<\16<\u034f\13<\3<\7<\u0352\n")
        buf.write("<\f<\16<\u0355\13<\5<\u0357\n<\3<\7<\u035a\n<\f<\16<\u035d")
        buf.write("\13<\3=\3=\3=\5=\u0362\n=\3>\3>\3>\3>\3?\3?\3?\7?\u036b")
        buf.write("\n?\f?\16?\u036e\13?\3@\3@\3@\3@\5@\u0374\n@\3@\3@\3A")
        buf.write("\3A\5A\u037a\nA\7A\u037c\nA\fA\16A\u037f\13A\3B\3B\3B")
        buf.write("\3B\5B\u0385\nB\3B\3B\5B\u0389\nB\3B\3B\3C\3C\3C\3C\3")
        buf.write("C\3C\7C\u0393\nC\fC\16C\u0396\13C\3C\3C\5C\u039a\nC\3")
        buf.write("D\3D\3D\7D\u039f\nD\fD\16D\u03a2\13D\3D\5D\u03a5\nD\3")
        buf.write("E\3E\3E\5E\u03aa\nE\3E\3E\3E\3E\3E\3E\3F\3F\3F\3G\3G\3")
        buf.write("G\5G\u03b8\nG\3H\3H\3H\5H\u03bd\nH\3H\3H\5H\u03c1\nH\3")
        buf.write("H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3I\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("K\3K\3K\3K\7K\u03d9\nK\fK\16K\u03dc\13K\3L\3L\3L\7L\u03e1")
        buf.write("\nL\fL\16L\u03e4\13L\3M\3M\3M\7M\u03e9\nM\fM\16M\u03ec")
        buf.write("\13M\3N\3N\3N\3N\7N\u03f2\nN\fN\16N\u03f5\13N\3O\3O\3")
        buf.write("O\3O\7O\u03fb\nO\fO\16O\u03fe\13O\3P\3P\3P\3P\7P\u0404")
        buf.write("\nP\fP\16P\u0407\13P\3P\3P\3P\3P\5P\u040d\nP\5P\u040f")
        buf.write("\nP\3Q\3Q\3Q\7Q\u0414\nQ\fQ\16Q\u0417\13Q\3R\3R\3R\7R")
        buf.write("\u041c\nR\fR\16R\u041f\13R\3S\3S\3S\7S\u0424\nS\fS\16")
        buf.write("S\u0427\13S\3T\3T\3T\3T\7T\u042d\nT\fT\16T\u0430\13T\3")
        buf.write("U\3U\3U\3U\7U\u0436\nU\fU\16U\u0439\13U\3V\3V\3V\3V\7")
        buf.write("V\u043f\nV\fV\16V\u0442\13V\3W\7W\u0445\nW\fW\16W\u0448")
        buf.write("\13W\3W\3W\3X\3X\3X\3X\3X\7X\u0451\nX\fX\16X\u0454\13")
        buf.write("X\3X\3X\7X\u0458\nX\fX\16X\u045b\13X\5X\u045d\nX\3Y\3")
        buf.write("Y\7Y\u0461\nY\fY\16Y\u0464\13Y\5Y\u0466\nY\3Y\3Y\3Y\5")
        buf.write("Y\u046b\nY\3Y\5Y\u046e\nY\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\7[\u047a\n[\f[\16[\u047d\13[\3[\3[\3[\3[\3[\3[\3[\3")
        buf.write("[\7[\u0487\n[\f[\16[\u048a\13[\3[\5[\u048d\n[\3\\\3\\")
        buf.write("\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u0497\n\\\3\\\3\\\3\\\3\\")
        buf.write("\3\\\5\\\u049e\n\\\3\\\5\\\u04a1\n\\\3\\\3\\\3\\\3\\\3")
        buf.write("\\\3\\\3\\\3\\\3\\\3\\\5\\\u04ad\n\\\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\5]\u04b6\n]\3^\3^\3^\3^\5^\u04bc\n^\3_\3_\5_\u04c0")
        buf.write("\n_\3`\3`\3a\3a\3b\3b\3c\3c\3d\3d\3e\3e\3f\3f\3g\3g\3")
        buf.write("h\3h\3h\3h\3h\3h\3h\5h\u04d9\nh\3i\3i\3i\3i\3i\3i\3i\3")
        buf.write("i\5i\u04e3\ni\3j\3j\7j\u04e7\nj\fj\16j\u04ea\13j\3j\5")
        buf.write("j\u04ed\nj\3j\3j\3k\3k\3k\5k\u04f4\nk\5k\u04f6\nk\3l\3")
        buf.write("l\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\7l\u0504\nl\fl\16l\u0507")
        buf.write("\13l\5l\u0509\nl\3l\3l\3l\3l\5l\u050f\nl\3m\3m\3m\3m\7")
        buf.write("m\u0515\nm\fm\16m\u0518\13m\5m\u051a\nm\3m\3m\3n\3n\3")
        buf.write("n\3n\3n\7n\u0523\nn\fn\16n\u0526\13n\5n\u0528\nn\3n\3")
        buf.write("n\3o\3o\3o\3o\3o\5o\u0531\no\3o\3o\7o\u0535\no\fo\16o")
        buf.write("\u0538\13o\3o\3o\3p\3p\3p\7p\u053f\np\fp\16p\u0542\13")
        buf.write("p\3p\3p\3p\7p\u0547\np\fp\16p\u054a\13p\3p\3p\3p\3p\7")
        buf.write("p\u0550\np\fp\16p\u0553\13p\5p\u0555\np\3q\3q\3q\3q\3")
        buf.write("q\5q\u055c\nq\3q\2\2r\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfh")
        buf.write("jlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\2\25\3\2?@\4\2\27")
        buf.write("\27AA\3\2FI\3\2JL\3\2MP\4\2..QQ\4\2DESW\3\2_`\7\2\17\17")
        buf.write("JJbbddoo\3\2rr\3\2ww\4\2\21\21*+\3\2,-\3\2./\4\2\33\33")
        buf.write("\62\63\3\2\60\61\3\2\23\26\4\2\30\30\32\32\4\2\27\27\64")
        buf.write("8\2\u05d7\2\u00e2\3\2\2\2\4\u00ea\3\2\2\2\6\u00f2\3\2")
        buf.write("\2\2\b\u0101\3\2\2\2\n\u011a\3\2\2\2\f\u0123\3\2\2\2\16")
        buf.write("\u0126\3\2\2\2\20\u0128\3\2\2\2\22\u0133\3\2\2\2\24\u0139")
        buf.write("\3\2\2\2\26\u014f\3\2\2\2\30\u0152\3\2\2\2\32\u0159\3")
        buf.write("\2\2\2\34\u0178\3\2\2\2\36\u017c\3\2\2\2 \u018a\3\2\2")
        buf.write("\2\"\u018c\3\2\2\2$\u019a\3\2\2\2&\u01a3\3\2\2\2(\u01a5")
        buf.write("\3\2\2\2*\u01a8\3\2\2\2,\u01b7\3\2\2\2.\u01c2\3\2\2\2")
        buf.write("\60\u01fc\3\2\2\2\62\u020c\3\2\2\2\64\u0211\3\2\2\2\66")
        buf.write("\u0214\3\2\2\28\u021b\3\2\2\2:\u021d\3\2\2\2<\u021f\3")
        buf.write("\2\2\2>\u0221\3\2\2\2@\u0223\3\2\2\2B\u0226\3\2\2\2D\u022a")
        buf.write("\3\2\2\2F\u0232\3\2\2\2H\u0237\3\2\2\2J\u023e\3\2\2\2")
        buf.write("L\u024b\3\2\2\2N\u026a\3\2\2\2P\u026c\3\2\2\2R\u0273\3")
        buf.write("\2\2\2T\u0276\3\2\2\2V\u027a\3\2\2\2X\u0286\3\2\2\2Z\u0295")
        buf.write("\3\2\2\2\\\u02a7\3\2\2\2^\u02b4\3\2\2\2`\u02b6\3\2\2\2")
        buf.write("b\u02bc\3\2\2\2d\u02c3\3\2\2\2f\u02c5\3\2\2\2h\u02e7\3")
        buf.write("\2\2\2j\u02f0\3\2\2\2l\u02ff\3\2\2\2n\u0310\3\2\2\2p\u0315")
        buf.write("\3\2\2\2r\u0318\3\2\2\2t\u0325\3\2\2\2v\u0346\3\2\2\2")
        buf.write("x\u0361\3\2\2\2z\u0363\3\2\2\2|\u0367\3\2\2\2~\u036f\3")
        buf.write("\2\2\2\u0080\u037d\3\2\2\2\u0082\u0380\3\2\2\2\u0084\u038c")
        buf.write("\3\2\2\2\u0086\u039b\3\2\2\2\u0088\u03a6\3\2\2\2\u008a")
        buf.write("\u03b1\3\2\2\2\u008c\u03b7\3\2\2\2\u008e\u03b9\3\2\2\2")
        buf.write("\u0090\u03c7\3\2\2\2\u0092\u03cd\3\2\2\2\u0094\u03d4\3")
        buf.write("\2\2\2\u0096\u03dd\3\2\2\2\u0098\u03e5\3\2\2\2\u009a\u03ed")
        buf.write("\3\2\2\2\u009c\u03f6\3\2\2\2\u009e\u040e\3\2\2\2\u00a0")
        buf.write("\u0410\3\2\2\2\u00a2\u0418\3\2\2\2\u00a4\u0420\3\2\2\2")
        buf.write("\u00a6\u0428\3\2\2\2\u00a8\u0431\3\2\2\2\u00aa\u043a\3")
        buf.write("\2\2\2\u00ac\u0446\3\2\2\2\u00ae\u045c\3\2\2\2\u00b0\u0465")
        buf.write("\3\2\2\2\u00b2\u046f\3\2\2\2\u00b4\u048c\3\2\2\2\u00b6")
        buf.write("\u04ac\3\2\2\2\u00b8\u04b5\3\2\2\2\u00ba\u04bb\3\2\2\2")
        buf.write("\u00bc\u04bf\3\2\2\2\u00be\u04c1\3\2\2\2\u00c0\u04c3\3")
        buf.write("\2\2\2\u00c2\u04c5\3\2\2\2\u00c4\u04c7\3\2\2\2\u00c6\u04c9")
        buf.write("\3\2\2\2\u00c8\u04cb\3\2\2\2\u00ca\u04cd\3\2\2\2\u00cc")
        buf.write("\u04cf\3\2\2\2\u00ce\u04d8\3\2\2\2\u00d0\u04e2\3\2\2\2")
        buf.write("\u00d2\u04e8\3\2\2\2\u00d4\u04f5\3\2\2\2\u00d6\u050e\3")
        buf.write("\2\2\2\u00d8\u0510\3\2\2\2\u00da\u051d\3\2\2\2\u00dc\u052b")
        buf.write("\3\2\2\2\u00de\u0554\3\2\2\2\u00e0\u055b\3\2\2\2\u00e2")
        buf.write("\u00e6\5\4\3\2\u00e3\u00e5\5\n\6\2\u00e4\u00e3\3\2\2\2")
        buf.write("\u00e5\u00e8\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3")
        buf.write("\2\2\2\u00e7\3\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00eb")
        buf.write("\5\6\4\2\u00ea\u00e9\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb")
        buf.write("\u00ef\3\2\2\2\u00ec\u00ee\5\b\5\2\u00ed\u00ec\3\2\2\2")
        buf.write("\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3")
        buf.write("\2\2\2\u00f0\5\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00f3")
        buf.write("\7\16\2\2\u00f3\u00f8\5\u00b2Z\2\u00f4\u00f5\7\20\2\2")
        buf.write("\u00f5\u00f7\5\u00b2Z\2\u00f6\u00f4\3\2\2\2\u00f7\u00fa")
        buf.write("\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9")
        buf.write("\u00fe\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fb\u00fd\7\7\2\2")
        buf.write("\u00fc\u00fb\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc\3")
        buf.write("\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\7\3\2\2\2\u0100\u00fe")
        buf.write("\3\2\2\2\u0101\u0102\7\17\2\2\u0102\u0107\5\u00b2Z\2\u0103")
        buf.write("\u0104\7\20\2\2\u0104\u0106\5\u00b2Z\2\u0105\u0103\3\2")
        buf.write("\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108")
        buf.write("\3\2\2\2\u0108\u010e\3\2\2\2\u0109\u0107\3\2\2\2\u010a")
        buf.write("\u010b\7\20\2\2\u010b\u010f\7\21\2\2\u010c\u010d\7\62")
        buf.write("\2\2\u010d\u010f\7o\2\2\u010e\u010a\3\2\2\2\u010e\u010c")
        buf.write("\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0113\3\2\2\2\u0110")
        buf.write("\u0112\7\7\2\2\u0111\u0110\3\2\2\2\u0112\u0115\3\2\2\2")
        buf.write("\u0113\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\t\3\2\2")
        buf.write("\2\u0115\u0113\3\2\2\2\u0116\u011b\5.\30\2\u0117\u011b")
        buf.write("\5t;\2\u0118\u011b\5f\64\2\u0119\u011b\5j\66\2\u011a\u0116")
        buf.write("\3\2\2\2\u011a\u0117\3\2\2\2\u011a\u0118\3\2\2\2\u011a")
        buf.write("\u0119\3\2\2\2\u011b\13\3\2\2\2\u011c\u0124\5l\67\2\u011d")
        buf.write("\u0124\5j\66\2\u011e\u0124\5t;\2\u011f\u0124\5.\30\2\u0120")
        buf.write("\u0124\5f\64\2\u0121\u0124\5|?\2\u0122\u0124\5Z.\2\u0123")
        buf.write("\u011c\3\2\2\2\u0123\u011d\3\2\2\2\u0123\u011e\3\2\2\2")
        buf.write("\u0123\u011f\3\2\2\2\u0123\u0120\3\2\2\2\u0123\u0121\3")
        buf.write("\2\2\2\u0123\u0122\3\2\2\2\u0124\r\3\2\2\2\u0125\u0127")
        buf.write("\5@!\2\u0126\u0125\3\2\2\2\u0126\u0127\3\2\2\2\u0127\17")
        buf.write("\3\2\2\2\u0128\u0129\7\23\2\2\u0129\u012e\5\22\n\2\u012a")
        buf.write("\u012b\7\22\2\2\u012b\u012d\5\22\n\2\u012c\u012a\3\2\2")
        buf.write("\2\u012d\u0130\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f")
        buf.write("\3\2\2\2\u012f\u0131\3\2\2\2\u0130\u012e\3\2\2\2\u0131")
        buf.write("\u0132\7\25\2\2\u0132\21\3\2\2\2\u0133\u0134\5\64\33\2")
        buf.write("\u0134\u0137\7o\2\2\u0135\u0136\7\33\2\2\u0136\u0138\5")
        buf.write("\36\20\2\u0137\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138")
        buf.write("\23\3\2\2\2\u0139\u013b\7\23\2\2\u013a\u013c\5\32\16\2")
        buf.write("\u013b\u013a\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u0141\3")
        buf.write("\2\2\2\u013d\u013e\7\22\2\2\u013e\u0140\5\32\16\2\u013f")
        buf.write("\u013d\3\2\2\2\u0140\u0143\3\2\2\2\u0141\u013f\3\2\2\2")
        buf.write("\u0141\u0142\3\2\2\2\u0142\u0144\3\2\2\2\u0143\u0141\3")
        buf.write("\2\2\2\u0144\u0145\7\25\2\2\u0145\25\3\2\2\2\u0146\u0147")
        buf.write("\7C\2\2\u0147\u014c\5\30\r\2\u0148\u0149\7\22\2\2\u0149")
        buf.write("\u014b\5\30\r\2\u014a\u0148\3\2\2\2\u014b\u014e\3\2\2")
        buf.write("\2\u014c\u014a\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u0150")
        buf.write("\3\2\2\2\u014e\u014c\3\2\2\2\u014f\u0146\3\2\2\2\u014f")
        buf.write("\u0150\3\2\2\2\u0150\27\3\2\2\2\u0151\u0153\5B\"\2\u0152")
        buf.write("\u0151\3\2\2\2\u0152\u0153\3\2\2\2\u0153\u0154\3\2\2\2")
        buf.write("\u0154\u0155\7o\2\2\u0155\u0156\7\33\2\2\u0156\u0157\5")
        buf.write("\32\16\2\u0157\31\3\2\2\2\u0158\u015a\5B\"\2\u0159\u0158")
        buf.write("\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\3\2\2\2\u015b")
        buf.write("\u015c\5\34\17\2\u015c\33\3\2\2\2\u015d\u015e\7\34\2\2")
        buf.write("\u015e\u015f\5\34\17\2\u015f\u0161\7\35\2\2\u0160\u0162")
        buf.write("\7\36\2\2\u0161\u0160\3\2\2\2\u0161\u0162\3\2\2\2\u0162")
        buf.write("\u0164\3\2\2\2\u0163\u0165\5(\25\2\u0164\u0163\3\2\2\2")
        buf.write("\u0164\u0165\3\2\2\2\u0165\u0179\3\2\2\2\u0166\u0168\5")
        buf.write("*\26\2\u0167\u0169\5(\25\2\u0168\u0167\3\2\2\2\u0168\u0169")
        buf.write("\3\2\2\2\u0169\u0179\3\2\2\2\u016a\u016c\5\36\20\2\u016b")
        buf.write("\u016d\7\36\2\2\u016c\u016b\3\2\2\2\u016c\u016d\3\2\2")
        buf.write("\2\u016d\u016f\3\2\2\2\u016e\u0170\5(\25\2\u016f\u016e")
        buf.write("\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0179\3\2\2\2\u0171")
        buf.write("\u0173\7B\2\2\u0172\u0174\7\36\2\2\u0173\u0172\3\2\2\2")
        buf.write("\u0173\u0174\3\2\2\2\u0174\u0176\3\2\2\2\u0175\u0177\5")
        buf.write("(\25\2\u0176\u0175\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0179")
        buf.write("\3\2\2\2\u0178\u015d\3\2\2\2\u0178\u0166\3\2\2\2\u0178")
        buf.write("\u016a\3\2\2\2\u0178\u0171\3\2\2\2\u0179\35\3\2\2\2\u017a")
        buf.write("\u017b\7\16\2\2\u017b\u017d\7\20\2\2\u017c\u017a\3\2\2")
        buf.write("\2\u017c\u017d\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u0183")
        buf.write("\5\"\22\2\u017f\u0180\7\20\2\2\u0180\u0182\5\"\22\2\u0181")
        buf.write("\u017f\3\2\2\2\u0182\u0185\3\2\2\2\u0183\u0181\3\2\2\2")
        buf.write("\u0183\u0184\3\2\2\2\u0184\37\3\2\2\2\u0185\u0183\3\2")
        buf.write("\2\2\u0186\u018b\7\21\2\2\u0187\u0188\5\16\b\2\u0188\u0189")
        buf.write("\5\32\16\2\u0189\u018b\3\2\2\2\u018a\u0186\3\2\2\2\u018a")
        buf.write("\u0187\3\2\2\2\u018b!\3\2\2\2\u018c\u0198\7o\2\2\u018d")
        buf.write("\u018e\7\23\2\2\u018e\u0193\5 \21\2\u018f\u0190\7\22\2")
        buf.write("\2\u0190\u0192\5 \21\2\u0191\u018f\3\2\2\2\u0192\u0195")
        buf.write("\3\2\2\2\u0193\u0191\3\2\2\2\u0193\u0194\3\2\2\2\u0194")
        buf.write("\u0196\3\2\2\2\u0195\u0193\3\2\2\2\u0196\u0197\7\25\2")
        buf.write("\2\u0197\u0199\3\2\2\2\u0198\u018d\3\2\2\2\u0198\u0199")
        buf.write("\3\2\2\2\u0199#\3\2\2\2\u019a\u019d\7o\2\2\u019b\u019c")
        buf.write("\7\33\2\2\u019c\u019e\5\32\16\2\u019d\u019b\3\2\2\2\u019d")
        buf.write("\u019e\3\2\2\2\u019e%\3\2\2\2\u019f\u01a4\5T+\2\u01a0")
        buf.write("\u01a1\5\64\33\2\u01a1\u01a2\5\32\16\2\u01a2\u01a4\3\2")
        buf.write("\2\2\u01a3\u019f\3\2\2\2\u01a3\u01a0\3\2\2\2\u01a4\'\3")
        buf.write("\2\2\2\u01a5\u01a6\7\20\2\2\u01a6\u01a7\5*\26\2\u01a7")
        buf.write(")\3\2\2\2\u01a8\u01b1\7\34\2\2\u01a9\u01ae\5&\24\2\u01aa")
        buf.write("\u01ab\7\22\2\2\u01ab\u01ad\5&\24\2\u01ac\u01aa\3\2\2")
        buf.write("\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae\u01af")
        buf.write("\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b1")
        buf.write("\u01a9\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b3\3\2\2\2")
        buf.write("\u01b3\u01b4\7\35\2\2\u01b4\u01b5\7)\2\2\u01b5\u01b6\5")
        buf.write("\32\16\2\u01b6+\3\2\2\2\u01b7\u01b8\7\34\2\2\u01b8\u01bd")
        buf.write("\5$\23\2\u01b9\u01ba\7\22\2\2\u01ba\u01bc\5$\23\2\u01bb")
        buf.write("\u01b9\3\2\2\2\u01bc\u01bf\3\2\2\2\u01bd\u01bb\3\2\2\2")
        buf.write("\u01bd\u01be\3\2\2\2\u01be\u01c0\3\2\2\2\u01bf\u01bd\3")
        buf.write("\2\2\2\u01c0\u01c1\7\35\2\2\u01c1-\3\2\2\2\u01c2\u01c3")
        buf.write("\5\64\33\2\u01c3\u01c5\t\2\2\2\u01c4\u01c6\5\20\t\2\u01c5")
        buf.write("\u01c4\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01ca\3\2\2\2")
        buf.write("\u01c7\u01c8\5\32\16\2\u01c8\u01c9\7\20\2\2\u01c9\u01cb")
        buf.write("\3\2\2\2\u01ca\u01c7\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb")
        buf.write("\u01ce\3\2\2\2\u01cc\u01cf\5,\27\2\u01cd\u01cf\5$\23\2")
        buf.write("\u01ce\u01cc\3\2\2\2\u01ce\u01cd\3\2\2\2\u01cf\u01d0\3")
        buf.write("\2\2\2\u01d0\u01d9\5\26\f\2\u01d1\u01d2\t\3\2\2\u01d2")
        buf.write("\u01d6\5\u0094K\2\u01d3\u01d5\7\7\2\2\u01d4\u01d3\3\2")
        buf.write("\2\2\u01d5\u01d8\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d6\u01d7")
        buf.write("\3\2\2\2\u01d7\u01da\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d9")
        buf.write("\u01d1\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01e7\3\2\2\2")
        buf.write("\u01db\u01dd\5\60\31\2\u01dc\u01db\3\2\2\2\u01dc\u01dd")
        buf.write("\3\2\2\2\u01dd\u01df\3\2\2\2\u01de\u01e0\5\62\32\2\u01df")
        buf.write("\u01de\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e8\3\2\2\2")
        buf.write("\u01e1\u01e3\5\62\32\2\u01e2\u01e1\3\2\2\2\u01e2\u01e3")
        buf.write("\3\2\2\2\u01e3\u01e5\3\2\2\2\u01e4\u01e6\5\60\31\2\u01e5")
        buf.write("\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e8\3\2\2\2")
        buf.write("\u01e7\u01dc\3\2\2\2\u01e7\u01e2\3\2\2\2\u01e8\u01ec\3")
        buf.write("\2\2\2\u01e9\u01eb\7\7\2\2\u01ea\u01e9\3\2\2\2\u01eb\u01ee")
        buf.write("\3\2\2\2\u01ec\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed")
        buf.write("/\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ef\u01f0\5\64\33\2\u01f0")
        buf.write("\u01f1\7D\2\2\u01f1\u01fd\3\2\2\2\u01f2\u01f3\5\64\33")
        buf.write("\2\u01f3\u01f4\7D\2\2\u01f4\u01f5\7\34\2\2\u01f5\u01f8")
        buf.write("\7\35\2\2\u01f6\u01f7\7\33\2\2\u01f7\u01f9\5\32\16\2\u01f8")
        buf.write("\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fa\3\2\2\2")
        buf.write("\u01fa\u01fb\5x=\2\u01fb\u01fd\3\2\2\2\u01fc\u01ef\3\2")
        buf.write("\2\2\u01fc\u01f2\3\2\2\2\u01fd\61\3\2\2\2\u01fe\u01ff")
        buf.write("\5\64\33\2\u01ff\u0200\7E\2\2\u0200\u020d\3\2\2\2\u0201")
        buf.write("\u0202\5\64\33\2\u0202\u0203\7E\2\2\u0203\u0204\7\34\2")
        buf.write("\2\u0204\u0207\5\64\33\2\u0205\u0208\7o\2\2\u0206\u0208")
        buf.write("\5T+\2\u0207\u0205\3\2\2\2\u0207\u0206\3\2\2\2\u0208\u0209")
        buf.write("\3\2\2\2\u0209\u020a\7\35\2\2\u020a\u020b\5x=\2\u020b")
        buf.write("\u020d\3\2\2\2\u020c\u01fe\3\2\2\2\u020c\u0201\3\2\2\2")
        buf.write("\u020d\63\3\2\2\2\u020e\u0210\5\66\34\2\u020f\u020e\3")
        buf.write("\2\2\2\u0210\u0213\3\2\2\2\u0211\u020f\3\2\2\2\u0211\u0212")
        buf.write("\3\2\2\2\u0212\65\3\2\2\2\u0213\u0211\3\2\2\2\u0214\u0215")
        buf.write("\58\35\2\u0215\67\3\2\2\2\u0216\u021c\5:\36\2\u0217\u021c")
        buf.write("\5> \2\u0218\u021c\5@!\2\u0219\u021c\5B\"\2\u021a\u021c")
        buf.write("\5<\37\2\u021b\u0216\3\2\2\2\u021b\u0217\3\2\2\2\u021b")
        buf.write("\u0218\3\2\2\2\u021b\u0219\3\2\2\2\u021b\u021a\3\2\2\2")
        buf.write("\u021c9\3\2\2\2\u021d\u021e\t\4\2\2\u021e;\3\2\2\2\u021f")
        buf.write("\u0220\t\5\2\2\u0220=\3\2\2\2\u0221\u0222\t\6\2\2\u0222")
        buf.write("?\3\2\2\2\u0223\u0224\t\7\2\2\u0224A\3\2\2\2\u0225\u0227")
        buf.write("\5D#\2\u0226\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u0226")
        buf.write("\3\2\2\2\u0228\u0229\3\2\2\2\u0229C\3\2\2\2\u022a\u022e")
        buf.write("\7R\2\2\u022b\u022c\5F$\2\u022c\u022d\7\33\2\2\u022d\u022f")
        buf.write("\3\2\2\2\u022e\u022b\3\2\2\2\u022e\u022f\3\2\2\2\u022f")
        buf.write("\u0230\3\2\2\2\u0230\u0231\5L\'\2\u0231E\3\2\2\2\u0232")
        buf.write("\u0233\t\b\2\2\u0233G\3\2\2\2\u0234\u0235\5\u00b2Z\2\u0235")
        buf.write("\u0236\7\27\2\2\u0236\u0238\3\2\2\2\u0237\u0234\3\2\2")
        buf.write("\2\u0237\u0238\3\2\2\2\u0238\u023a\3\2\2\2\u0239\u023b")
        buf.write("\7\21\2\2\u023a\u0239\3\2\2\2\u023a\u023b\3\2\2\2\u023b")
        buf.write("\u023c\3\2\2\2\u023c\u023d\5\u0094K\2\u023dI\3\2\2\2\u023e")
        buf.write("\u0247\7\34\2\2\u023f\u0244\5H%\2\u0240\u0241\7\22\2\2")
        buf.write("\u0241\u0243\5H%\2\u0242\u0240\3\2\2\2\u0243\u0246\3\2")
        buf.write("\2\2\u0244\u0242\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0248")
        buf.write("\3\2\2\2\u0246\u0244\3\2\2\2\u0247\u023f\3\2\2\2\u0247")
        buf.write("\u0248\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024a\7\35\2")
        buf.write("\2\u024aK\3\2\2\2\u024b\u0250\5\u00b2Z\2\u024c\u024d\7")
        buf.write("\20\2\2\u024d\u024f\5\u00b2Z\2\u024e\u024c\3\2\2\2\u024f")
        buf.write("\u0252\3\2\2\2\u0250\u024e\3\2\2\2\u0250\u0251\3\2\2\2")
        buf.write("\u0251\u0254\3\2\2\2\u0252\u0250\3\2\2\2\u0253\u0255\5")
        buf.write("\24\13\2\u0254\u0253\3\2\2\2\u0254\u0255\3\2\2\2\u0255")
        buf.write("\u0257\3\2\2\2\u0256\u0258\5J&\2\u0257\u0256\3\2\2\2\u0257")
        buf.write("\u0258\3\2\2\2\u0258M\3\2\2\2\u0259\u025a\7X\2\2\u025a")
        buf.write("\u026b\5\u0094K\2\u025b\u025d\7Z\2\2\u025c\u025e\5P)\2")
        buf.write("\u025d\u025c\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u0260\3")
        buf.write("\2\2\2\u025f\u0261\5\u0094K\2\u0260\u025f\3\2\2\2\u0260")
        buf.write("\u0261\3\2\2\2\u0261\u026b\3\2\2\2\u0262\u0264\7Y\2\2")
        buf.write("\u0263\u0265\5P)\2\u0264\u0263\3\2\2\2\u0264\u0265\3\2")
        buf.write("\2\2\u0265\u026b\3\2\2\2\u0266\u0268\7[\2\2\u0267\u0269")
        buf.write("\5P)\2\u0268\u0267\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b")
        buf.write("\3\2\2\2\u026a\u0259\3\2\2\2\u026a\u025b\3\2\2\2\u026a")
        buf.write("\u0262\3\2\2\2\u026a\u0266\3\2\2\2\u026bO\3\2\2\2\u026c")
        buf.write("\u0271\7R\2\2\u026d\u0272\5\u00b2Z\2\u026e\u0272\7i\2")
        buf.write("\2\u026f\u0272\7h\2\2\u0270\u0272\7g\2\2\u0271\u026d\3")
        buf.write("\2\2\2\u0271\u026e\3\2\2\2\u0271\u026f\3\2\2\2\u0271\u0270")
        buf.write("\3\2\2\2\u0272Q\3\2\2\2\u0273\u0274\5\u00b2Z\2\u0274\u0275")
        buf.write("\7R\2\2\u0275S\3\2\2\2\u0276\u0277\7o\2\2\u0277\u0278")
        buf.write("\7\33\2\2\u0278\u0279\5\32\16\2\u0279U\3\2\2\2\u027a\u027c")
        buf.write("\5\64\33\2\u027b\u027d\t\2\2\2\u027c\u027b\3\2\2\2\u027c")
        buf.write("\u027d\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0281\5T+\2\u027f")
        buf.write("\u0280\7\27\2\2\u0280\u0282\5\u0094K\2\u0281\u027f\3\2")
        buf.write("\2\2\u0281\u0282\3\2\2\2\u0282W\3\2\2\2\u0283\u0284\5")
        buf.write("\64\33\2\u0284\u0285\7\\\2\2\u0285\u0287\3\2\2\2\u0286")
        buf.write("\u0283\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\3\2\2\2")
        buf.write("\u0288\u0291\7\34\2\2\u0289\u028e\5V,\2\u028a\u028b\7")
        buf.write("\22\2\2\u028b\u028d\5V,\2\u028c\u028a\3\2\2\2\u028d\u0290")
        buf.write("\3\2\2\2\u028e\u028c\3\2\2\2\u028e\u028f\3\2\2\2\u028f")
        buf.write("\u0292\3\2\2\2\u0290\u028e\3\2\2\2\u0291\u0289\3\2\2\2")
        buf.write("\u0291\u0292\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294\7")
        buf.write("\35\2\2\u0294Y\3\2\2\2\u0295\u0296\5\64\33\2\u0296\u0297")
        buf.write("\7\\\2\2\u0297\u029a\5r:\2\u0298\u0299\7\33\2\2\u0299")
        buf.write("\u029b\5\\/\2\u029a\u0298\3\2\2\2\u029a\u029b\3\2\2\2")
        buf.write("\u029b\u029c\3\2\2\2\u029c\u02a0\5z>\2\u029d\u029f\7\7")
        buf.write("\2\2\u029e\u029d\3\2\2\2\u029f\u02a2\3\2\2\2\u02a0\u029e")
        buf.write("\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1[\3\2\2\2\u02a2\u02a0")
        buf.write("\3\2\2\2\u02a3\u02a4\7]\2\2\u02a4\u02a8\5J&\2\u02a5\u02a6")
        buf.write("\7^\2\2\u02a6\u02a8\5J&\2\u02a7\u02a3\3\2\2\2\u02a7\u02a5")
        buf.write("\3\2\2\2\u02a8]\3\2\2\2\u02a9\u02ab\5\24\13\2\u02aa\u02a9")
        buf.write("\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac")
        buf.write("\u02ae\5J&\2\u02ad\u02af\5\u00d2j\2\u02ae\u02ad\3\2\2")
        buf.write("\2\u02ae\u02af\3\2\2\2\u02af\u02b5\3\2\2\2\u02b0\u02b1")
        buf.write("\5\24\13\2\u02b1\u02b2\5\u00d2j\2\u02b2\u02b5\3\2\2\2")
        buf.write("\u02b3\u02b5\5\u00d2j\2\u02b4\u02aa\3\2\2\2\u02b4\u02b0")
        buf.write("\3\2\2\2\u02b4\u02b3\3\2\2\2\u02b5_\3\2\2\2\u02b6\u02b8")
        buf.write("\5\36\20\2\u02b7\u02b9\5\24\13\2\u02b8\u02b7\3\2\2\2\u02b8")
        buf.write("\u02b9\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bb\5J&\2\u02bb")
        buf.write("a\3\2\2\2\u02bc\u02bd\5\36\20\2\u02bd\u02be\7A\2\2\u02be")
        buf.write("\u02bf\5\u0094K\2\u02bfc\3\2\2\2\u02c0\u02c4\5`\61\2\u02c1")
        buf.write("\u02c4\5\36\20\2\u02c2\u02c4\5b\62\2\u02c3\u02c0\3\2\2")
        buf.write("\2\u02c3\u02c1\3\2\2\2\u02c3\u02c2\3\2\2\2\u02c4e\3\2")
        buf.write("\2\2\u02c5\u02c6\5\64\33\2\u02c6\u02c7\t\t\2\2\u02c7\u02c9")
        buf.write("\7o\2\2\u02c8\u02ca\5\20\t\2\u02c9\u02c8\3\2\2\2\u02c9")
        buf.write("\u02ca\3\2\2\2\u02ca\u02cc\3\2\2\2\u02cb\u02cd\5X-\2\u02cc")
        buf.write("\u02cb\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02da\3\2\2\2")
        buf.write("\u02ce\u02d0\7\33\2\2\u02cf\u02d1\5B\"\2\u02d0\u02cf\3")
        buf.write("\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d7")
        buf.write("\5d\63\2\u02d3\u02d4\7\22\2\2\u02d4\u02d6\5d\63\2\u02d5")
        buf.write("\u02d3\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2")
        buf.write("\u02d7\u02d8\3\2\2\2\u02d8\u02db\3\2\2\2\u02d9\u02d7\3")
        buf.write("\2\2\2\u02da\u02ce\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02dc")
        buf.write("\3\2\2\2\u02dc\u02df\5\26\f\2\u02dd\u02e0\5n8\2\u02de")
        buf.write("\u02e0\5~@\2\u02df\u02dd\3\2\2\2\u02df\u02de\3\2\2\2\u02e0")
        buf.write("\u02e4\3\2\2\2\u02e1\u02e3\7\7\2\2\u02e2\u02e1\3\2\2\2")
        buf.write("\u02e3\u02e6\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e4\u02e5\3")
        buf.write("\2\2\2\u02e5g\3\2\2\2\u02e6\u02e4\3\2\2\2\u02e7\u02e8")
        buf.write("\7\33\2\2\u02e8\u02ed\5d\63\2\u02e9\u02ea\7\22\2\2\u02ea")
        buf.write("\u02ec\5d\63\2\u02eb\u02e9\3\2\2\2\u02ec\u02ef\3\2\2\2")
        buf.write("\u02ed\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02eei\3\2\2")
        buf.write("\2\u02ef\u02ed\3\2\2\2\u02f0\u02f1\7a\2\2\u02f1\u02f3")
        buf.write("\7o\2\2\u02f2\u02f4\5X-\2\u02f3\u02f2\3\2\2\2\u02f3\u02f4")
        buf.write("\3\2\2\2\u02f4\u02f6\3\2\2\2\u02f5\u02f7\5h\65\2\u02f6")
        buf.write("\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f8\3\2\2\2")
        buf.write("\u02f8\u02fc\5n8\2\u02f9\u02fb\7\7\2\2\u02fa\u02f9\3\2")
        buf.write("\2\2\u02fb\u02fe\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fc\u02fd")
        buf.write("\3\2\2\2\u02fdk\3\2\2\2\u02fe\u02fc\3\2\2\2\u02ff\u0300")
        buf.write("\5\64\33\2\u0300\u0301\7b\2\2\u0301\u0303\7a\2\2\u0302")
        buf.write("\u0304\5h\65\2\u0303\u0302\3\2\2\2\u0303\u0304\3\2\2\2")
        buf.write("\u0304\u0305\3\2\2\2\u0305\u0309\5n8\2\u0306\u0308\7\7")
        buf.write("\2\2\u0307\u0306\3\2\2\2\u0308\u030b\3\2\2\2\u0309\u0307")
        buf.write("\3\2\2\2\u0309\u030a\3\2\2\2\u030am\3\2\2\2\u030b\u0309")
        buf.write("\3\2\2\2\u030c\u030d\7\b\2\2\u030d\u030e\5p9\2\u030e\u030f")
        buf.write("\7\t\2\2\u030f\u0311\3\2\2\2\u0310\u030c\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311o\3\2\2\2\u0312\u0314\5\f\7\2\u0313")
        buf.write("\u0312\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313\3\2\2\2")
        buf.write("\u0315\u0316\3\2\2\2\u0316q\3\2\2\2\u0317\u0315\3\2\2")
        buf.write("\2\u0318\u0321\7\34\2\2\u0319\u031e\5V,\2\u031a\u031b")
        buf.write("\7\22\2\2\u031b\u031d\5V,\2\u031c\u031a\3\2\2\2\u031d")
        buf.write("\u0320\3\2\2\2\u031e\u031c\3\2\2\2\u031e\u031f\3\2\2\2")
        buf.write("\u031f\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0321\u0319\3")
        buf.write("\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324")
        buf.write("\7\35\2\2\u0324s\3\2\2\2\u0325\u0326\5\64\33\2\u0326\u0328")
        buf.write("\7c\2\2\u0327\u0329\5\20\t\2\u0328\u0327\3\2\2\2\u0328")
        buf.write("\u0329\3\2\2\2\u0329\u032e\3\2\2\2\u032a\u032b\5\32\16")
        buf.write("\2\u032b\u032c\7\20\2\2\u032c\u032f\3\2\2\2\u032d\u032f")
        buf.write("\5B\"\2\u032e\u032a\3\2\2\2\u032e\u032d\3\2\2\2\u032e")
        buf.write("\u032f\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0332\7o\2\2")
        buf.write("\u0331\u0333\5\20\t\2\u0332\u0331\3\2\2\2\u0332\u0333")
        buf.write("\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0337\5r:\2\u0335\u0336")
        buf.write("\7\33\2\2\u0336\u0338\5\32\16\2\u0337\u0335\3\2\2\2\u0337")
        buf.write("\u0338\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033b\5\26\f")
        buf.write("\2\u033a\u033c\5x=\2\u033b\u033a\3\2\2\2\u033b\u033c\3")
        buf.write("\2\2\2\u033c\u0340\3\2\2\2\u033d\u033f\7\7\2\2\u033e\u033d")
        buf.write("\3\2\2\2\u033f\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340")
        buf.write("\u0341\3\2\2\2\u0341u\3\2\2\2\u0342\u0340\3\2\2\2\u0343")
        buf.write("\u0345\7\7\2\2\u0344\u0343\3\2\2\2\u0345\u0348\3\2\2\2")
        buf.write("\u0346\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0356\3")
        buf.write("\2\2\2\u0348\u0346\3\2\2\2\u0349\u0353\5\u00bc_\2\u034a")
        buf.write("\u034c\7\7\2\2\u034b\u034a\3\2\2\2\u034c\u034f\3\2\2\2")
        buf.write("\u034d\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u0350\3")
        buf.write("\2\2\2\u034f\u034d\3\2\2\2\u0350\u0352\5\u00bc_\2\u0351")
        buf.write("\u034d\3\2\2\2\u0352\u0355\3\2\2\2\u0353\u0351\3\2\2\2")
        buf.write("\u0353\u0354\3\2\2\2\u0354\u0357\3\2\2\2\u0355\u0353\3")
        buf.write("\2\2\2\u0356\u0349\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u035b")
        buf.write("\3\2\2\2\u0358\u035a\7\7\2\2\u0359\u0358\3\2\2\2\u035a")
        buf.write("\u035d\3\2\2\2\u035b\u0359\3\2\2\2\u035b\u035c\3\2\2\2")
        buf.write("\u035cw\3\2\2\2\u035d\u035b\3\2\2\2\u035e\u0362\5z>\2")
        buf.write("\u035f\u0360\7\27\2\2\u0360\u0362\5\u0094K\2\u0361\u035e")
        buf.write("\3\2\2\2\u0361\u035f\3\2\2\2\u0362y\3\2\2\2\u0363\u0364")
        buf.write("\7\b\2\2\u0364\u0365\5v<\2\u0365\u0366\7\t\2\2\u0366{")
        buf.write("\3\2\2\2\u0367\u0368\7d\2\2\u0368\u036c\5z>\2\u0369\u036b")
        buf.write("\7\7\2\2\u036a\u0369\3\2\2\2\u036b\u036e\3\2\2\2\u036c")
        buf.write("\u036a\3\2\2\2\u036c\u036d\3\2\2\2\u036d}\3\2\2\2\u036e")
        buf.write("\u036c\3\2\2\2\u036f\u0370\7\b\2\2\u0370\u0373\5\u0080")
        buf.write("A\2\u0371\u0372\7\7\2\2\u0372\u0374\5p9\2\u0373\u0371")
        buf.write("\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("\u0376\7\t\2\2\u0376\177\3\2\2\2\u0377\u0379\5\u0082B")
        buf.write("\2\u0378\u037a\7\22\2\2\u0379\u0378\3\2\2\2\u0379\u037a")
        buf.write("\3\2\2\2\u037a\u037c\3\2\2\2\u037b\u0377\3\2\2\2\u037c")
        buf.write("\u037f\3\2\2\2\u037d\u037b\3\2\2\2\u037d\u037e\3\2\2\2")
        buf.write("\u037e\u0081\3\2\2\2\u037f\u037d\3\2\2\2\u0380\u0381\5")
        buf.write("\64\33\2\u0381\u0388\7o\2\2\u0382\u0384\7\33\2\2\u0383")
        buf.write("\u0385\5B\"\2\u0384\u0383\3\2\2\2\u0384\u0385\3\2\2\2")
        buf.write("\u0385\u0386\3\2\2\2\u0386\u0389\5`\61\2\u0387\u0389\5")
        buf.write("J&\2\u0388\u0382\3\2\2\2\u0388\u0387\3\2\2\2\u0388\u0389")
        buf.write("\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b\5n8\2\u038b\u0083")
        buf.write("\3\2\2\2\u038c\u038d\7e\2\2\u038d\u038e\7\34\2\2\u038e")
        buf.write("\u038f\5\u0094K\2\u038f\u0390\7\35\2\2\u0390\u0394\5\u0094")
        buf.write("K\2\u0391\u0393\7\7\2\2\u0392\u0391\3\2\2\2\u0393\u0396")
        buf.write("\3\2\2\2\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2\2\u0395")
        buf.write("\u0399\3\2\2\2\u0396\u0394\3\2\2\2\u0397\u0398\7f\2\2")
        buf.write("\u0398\u039a\5\u0094K\2\u0399\u0397\3\2\2\2\u0399\u039a")
        buf.write("\3\2\2\2\u039a\u0085\3\2\2\2\u039b\u039c\7k\2\2\u039c")
        buf.write("\u03a0\5z>\2\u039d\u039f\5\u0088E\2\u039e\u039d\3\2\2")
        buf.write("\2\u039f\u03a2\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1")
        buf.write("\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3")
        buf.write("\u03a5\5\u008aF\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2")
        buf.write("\2\2\u03a5\u0087\3\2\2\2\u03a6\u03a7\7l\2\2\u03a7\u03a9")
        buf.write("\7\34\2\2\u03a8\u03aa\5B\"\2\u03a9\u03a8\3\2\2\2\u03a9")
        buf.write("\u03aa\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ac\7o\2\2")
        buf.write("\u03ac\u03ad\7\33\2\2\u03ad\u03ae\5\36\20\2\u03ae\u03af")
        buf.write("\7\35\2\2\u03af\u03b0\5z>\2\u03b0\u0089\3\2\2\2\u03b1")
        buf.write("\u03b2\7m\2\2\u03b2\u03b3\5z>\2\u03b3\u008b\3\2\2\2\u03b4")
        buf.write("\u03b8\5\u008eH\2\u03b5\u03b8\5\u0090I\2\u03b6\u03b8\5")
        buf.write("\u0092J\2\u03b7\u03b4\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7")
        buf.write("\u03b6\3\2\2\2\u03b8\u008d\3\2\2\2\u03b9\u03ba\7i\2\2")
        buf.write("\u03ba\u03bc\7\34\2\2\u03bb\u03bd\5B\"\2\u03bc\u03bb\3")
        buf.write("\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03c0\3\2\2\2\u03be\u03c1")
        buf.write("\5,\27\2\u03bf\u03c1\5$\23\2\u03c0\u03be\3\2\2\2\u03c0")
        buf.write("\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c3\7.\2\2")
        buf.write("\u03c3\u03c4\5\u0094K\2\u03c4\u03c5\7\35\2\2\u03c5\u03c6")
        buf.write("\5\u0094K\2\u03c6\u008f\3\2\2\2\u03c7\u03c8\7h\2\2\u03c8")
        buf.write("\u03c9\7\34\2\2\u03c9\u03ca\5\u0094K\2\u03ca\u03cb\7\35")
        buf.write("\2\2\u03cb\u03cc\5\u0094K\2\u03cc\u0091\3\2\2\2\u03cd")
        buf.write("\u03ce\7j\2\2\u03ce\u03cf\5\u0094K\2\u03cf\u03d0\7h\2")
        buf.write("\2\u03d0\u03d1\7\34\2\2\u03d1\u03d2\5\u0094K\2\u03d2\u03d3")
        buf.write("\7\35\2\2\u03d3\u0093\3\2\2\2\u03d4\u03da\5\u0096L\2\u03d5")
        buf.write("\u03d6\5\u00ccg\2\u03d6\u03d7\5\u0096L\2\u03d7\u03d9\3")
        buf.write("\2\2\2\u03d8\u03d5\3\2\2\2\u03d9\u03dc\3\2\2\2\u03da\u03d8")
        buf.write("\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u0095\3\2\2\2\u03dc")
        buf.write("\u03da\3\2\2\2\u03dd\u03e2\5\u0098M\2\u03de\u03df\7 \2")
        buf.write("\2\u03df\u03e1\5\u0098M\2\u03e0\u03de\3\2\2\2\u03e1\u03e4")
        buf.write("\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write("\u0097\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e5\u03ea\5\u009a")
        buf.write("N\2\u03e6\u03e7\7!\2\2\u03e7\u03e9\5\u009aN\2\u03e8\u03e6")
        buf.write("\3\2\2\2\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea")
        buf.write("\u03eb\3\2\2\2\u03eb\u0099\3\2\2\2\u03ec\u03ea\3\2\2\2")
        buf.write("\u03ed\u03f3\5\u009cO\2\u03ee\u03ef\5\u00caf\2\u03ef\u03f0")
        buf.write("\5\u009cO\2\u03f0\u03f2\3\2\2\2\u03f1\u03ee\3\2\2\2\u03f2")
        buf.write("\u03f5\3\2\2\2\u03f3\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2")
        buf.write("\u03f4\u009b\3\2\2\2\u03f5\u03f3\3\2\2\2\u03f6\u03fc\5")
        buf.write("\u009eP\2\u03f7\u03f8\5\u00c8e\2\u03f8\u03f9\5\u009eP")
        buf.write("\2\u03f9\u03fb\3\2\2\2\u03fa\u03f7\3\2\2\2\u03fb\u03fe")
        buf.write("\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("\u009d\3\2\2\2\u03fe\u03fc\3\2\2\2\u03ff\u0405\5\u00a0")
        buf.write("Q\2\u0400\u0401\5\u00c2b\2\u0401\u0402\5\u00a0Q\2\u0402")
        buf.write("\u0404\3\2\2\2\u0403\u0400\3\2\2\2\u0404\u0407\3\2\2\2")
        buf.write("\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u040f\3")
        buf.write("\2\2\2\u0407\u0405\3\2\2\2\u0408\u040c\5\u00a0Q\2\u0409")
        buf.write("\u040a\5\u00c6d\2\u040a\u040b\5\32\16\2\u040b\u040d\3")
        buf.write("\2\2\2\u040c\u0409\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040f")
        buf.write("\3\2\2\2\u040e\u03ff\3\2\2\2\u040e\u0408\3\2\2\2\u040f")
        buf.write("\u009f\3\2\2\2\u0410\u0415\5\u00a2R\2\u0411\u0412\7\"")
        buf.write("\2\2\u0412\u0414\5\u00a2R\2\u0413\u0411\3\2\2\2\u0414")
        buf.write("\u0417\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2")
        buf.write("\u0416\u00a1\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u041d\5")
        buf.write("\u00a4S\2\u0419\u041a\7o\2\2\u041a\u041c\5\u00a4S\2\u041b")
        buf.write("\u0419\3\2\2\2\u041c\u041f\3\2\2\2\u041d\u041b\3\2\2\2")
        buf.write("\u041d\u041e\3\2\2\2\u041e\u00a3\3\2\2\2\u041f\u041d\3")
        buf.write("\2\2\2\u0420\u0425\5\u00a6T\2\u0421\u0422\7$\2\2\u0422")
        buf.write("\u0424\5\u00a6T\2\u0423\u0421\3\2\2\2\u0424\u0427\3\2")
        buf.write("\2\2\u0425\u0423\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u00a5")
        buf.write("\3\2\2\2\u0427\u0425\3\2\2\2\u0428\u042e\5\u00a8U\2\u0429")
        buf.write("\u042a\5\u00c0a\2\u042a\u042b\5\u00a8U\2\u042b\u042d\3")
        buf.write("\2\2\2\u042c\u0429\3\2\2\2\u042d\u0430\3\2\2\2\u042e\u042c")
        buf.write("\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u00a7\3\2\2\2\u0430")
        buf.write("\u042e\3\2\2\2\u0431\u0437\5\u00aaV\2\u0432\u0433\5\u00be")
        buf.write("`\2\u0433\u0434\5\u00aaV\2\u0434\u0436\3\2\2\2\u0435\u0432")
        buf.write("\3\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3\2\2\2\u0437")
        buf.write("\u0438\3\2\2\2\u0438\u00a9\3\2\2\2\u0439\u0437\3\2\2\2")
        buf.write("\u043a\u0440\5\u00acW\2\u043b\u043c\5\u00c4c\2\u043c\u043d")
        buf.write("\5\u00acW\2\u043d\u043f\3\2\2\2\u043e\u043b\3\2\2\2\u043f")
        buf.write("\u0442\3\2\2\2\u0440\u043e\3\2\2\2\u0440\u0441\3\2\2\2")
        buf.write("\u0441\u00ab\3\2\2\2\u0442\u0440\3\2\2\2\u0443\u0445\5")
        buf.write("\u00ceh\2\u0444\u0443\3\2\2\2\u0445\u0448\3\2\2\2\u0446")
        buf.write("\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0449\3\2\2\2")
        buf.write("\u0448\u0446\3\2\2\2\u0449\u044a\5\u00aeX\2\u044a\u00ad")
        buf.write("\3\2\2\2\u044b\u044c\5\u00b6\\\2\u044c\u044d\5^\60\2\u044d")
        buf.write("\u045d\3\2\2\2\u044e\u0452\5\u00b6\\\2\u044f\u0451\5\u00d0")
        buf.write("i\2\u0450\u044f\3\2\2\2\u0451\u0454\3\2\2\2\u0452\u0450")
        buf.write("\3\2\2\2\u0452\u0453\3\2\2\2\u0453\u045d\3\2\2\2\u0454")
        buf.write("\u0452\3\2\2\2\u0455\u0459\5\u00b0Y\2\u0456\u0458\5\u00d0")
        buf.write("i\2\u0457\u0456\3\2\2\2\u0458\u045b\3\2\2\2\u0459\u0457")
        buf.write("\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045d\3\2\2\2\u045b")
        buf.write("\u0459\3\2\2\2\u045c\u044b\3\2\2\2\u045c\u044e\3\2\2\2")
        buf.write("\u045c\u0455\3\2\2\2\u045d\u00af\3\2\2\2\u045e\u0462\5")
        buf.write("\36\20\2\u045f\u0461\7\36\2\2\u0460\u045f\3\2\2\2\u0461")
        buf.write("\u0464\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0463\3\2\2\2")
        buf.write("\u0463\u0466\3\2\2\2\u0464\u0462\3\2\2\2\u0465\u045e\3")
        buf.write("\2\2\2\u0465\u0466\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u046a")
        buf.write("\7%\2\2\u0468\u046b\5\u00b2Z\2\u0469\u046b\7_\2\2\u046a")
        buf.write("\u0468\3\2\2\2\u046a\u0469\3\2\2\2\u046b\u046d\3\2\2\2")
        buf.write("\u046c\u046e\5\24\13\2\u046d\u046c\3\2\2\2\u046d\u046e")
        buf.write("\3\2\2\2\u046e\u00b1\3\2\2\2\u046f\u0470\t\n\2\2\u0470")
        buf.write("\u00b3\3\2\2\2\u0471\u047b\7\r\2\2\u0472\u047a\7s\2\2")
        buf.write("\u0473\u0474\7t\2\2\u0474\u0475\5\u0094K\2\u0475\u0476")
        buf.write("\7\t\2\2\u0476\u047a\3\2\2\2\u0477\u047a\7u\2\2\u0478")
        buf.write("\u047a\n\13\2\2\u0479\u0472\3\2\2\2\u0479\u0473\3\2\2")
        buf.write("\2\u0479\u0477\3\2\2\2\u0479\u0478\3\2\2\2\u047a\u047d")
        buf.write("\3\2\2\2\u047b\u0479\3\2\2\2\u047b\u047c\3\2\2\2\u047c")
        buf.write("\u047e\3\2\2\2\u047d\u047b\3\2\2\2\u047e\u048d\7r\2\2")
        buf.write("\u047f\u0488\7\f\2\2\u0480\u0481\7y\2\2\u0481\u0482\5")
        buf.write("\u0094K\2\u0482\u0483\7\t\2\2\u0483\u0487\3\2\2\2\u0484")
        buf.write("\u0487\7z\2\2\u0485\u0487\n\f\2\2\u0486\u0480\3\2\2\2")
        buf.write("\u0486\u0484\3\2\2\2\u0486\u0485\3\2\2\2\u0487\u048a\3")
        buf.write("\2\2\2\u0488\u0486\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048b")
        buf.write("\3\2\2\2\u048a\u0488\3\2\2\2\u048b\u048d\7w\2\2\u048c")
        buf.write("\u0471\3\2\2\2\u048c\u047f\3\2\2\2\u048d\u00b5\3\2\2\2")
        buf.write("\u048e\u048f\7\34\2\2\u048f\u0490\5\u0094K\2\u0490\u0491")
        buf.write("\7\35\2\2\u0491\u04ad\3\2\2\2\u0492\u04ad\5\u00b8]\2\u0493")
        buf.write("\u04ad\5\u00d6l\2\u0494\u0496\7]\2\2\u0495\u0497\5P)\2")
        buf.write("\u0496\u0495\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u04ad\3")
        buf.write("\2\2\2\u0498\u049d\7^\2\2\u0499\u049a\7\23\2\2\u049a\u049b")
        buf.write("\5\32\16\2\u049b\u049c\7\25\2\2\u049c\u049e\3\2\2\2\u049d")
        buf.write("\u0499\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0\3\2\2\2")
        buf.write("\u049f\u04a1\5P)\2\u04a0\u049f\3\2\2\2\u04a0\u04a1\3\2")
        buf.write("\2\2\u04a1\u04ad\3\2\2\2\u04a2\u04ad\5\u0084C\2\u04a3")
        buf.write("\u04ad\5\u00dco\2\u04a4\u04ad\5\u0086D\2\u04a5\u04ad\5")
        buf.write("\u00dan\2\u04a6\u04ad\5N(\2\u04a7\u04ad\5\u008cG\2\u04a8")
        buf.write("\u04ad\5\u00b2Z\2\u04a9\u04aa\7n\2\2\u04aa\u04ad\5\u00b2")
        buf.write("Z\2\u04ab\u04ad\7\16\2\2\u04ac\u048e\3\2\2\2\u04ac\u0492")
        buf.write("\3\2\2\2\u04ac\u0493\3\2\2\2\u04ac\u0494\3\2\2\2\u04ac")
        buf.write("\u0498\3\2\2\2\u04ac\u04a2\3\2\2\2\u04ac\u04a3\3\2\2\2")
        buf.write("\u04ac\u04a4\3\2\2\2\u04ac\u04a5\3\2\2\2\u04ac\u04a6\3")
        buf.write("\2\2\2\u04ac\u04a7\3\2\2\2\u04ac\u04a8\3\2\2\2\u04ac\u04a9")
        buf.write("\3\2\2\2\u04ac\u04ab\3\2\2\2\u04ad\u00b7\3\2\2\2\u04ae")
        buf.write("\u04b6\7&\2\2\u04af\u04b6\7\'\2\2\u04b0\u04b6\5\u00b4")
        buf.write("[\2\u04b1\u04b6\7\6\2\2\u04b2\u04b6\7\n\2\2\u04b3\u04b6")
        buf.write("\7\13\2\2\u04b4\u04b6\7(\2\2\u04b5\u04ae\3\2\2\2\u04b5")
        buf.write("\u04af\3\2\2\2\u04b5\u04b0\3\2\2\2\u04b5\u04b1\3\2\2\2")
        buf.write("\u04b5\u04b2\3\2\2\2\u04b5\u04b3\3\2\2\2\u04b5\u04b4\3")
        buf.write("\2\2\2\u04b6\u00b9\3\2\2\2\u04b7\u04bc\5t;\2\u04b8\u04bc")
        buf.write("\5.\30\2\u04b9\u04bc\5f\64\2\u04ba\u04bc\5j\66\2\u04bb")
        buf.write("\u04b7\3\2\2\2\u04bb\u04b8\3\2\2\2\u04bb\u04b9\3\2\2\2")
        buf.write("\u04bb\u04ba\3\2\2\2\u04bc\u00bb\3\2\2\2\u04bd\u04c0\5")
        buf.write("\u00ba^\2\u04be\u04c0\5\u0094K\2\u04bf\u04bd\3\2\2\2\u04bf")
        buf.write("\u04be\3\2\2\2\u04c0\u00bd\3\2\2\2\u04c1\u04c2\t\r\2\2")
        buf.write("\u04c2\u00bf\3\2\2\2\u04c3\u04c4\t\16\2\2\u04c4\u00c1")
        buf.write("\3\2\2\2\u04c5\u04c6\t\17\2\2\u04c6\u00c3\3\2\2\2\u04c7")
        buf.write("\u04c8\t\20\2\2\u04c8\u00c5\3\2\2\2\u04c9\u04ca\t\21\2")
        buf.write("\2\u04ca\u00c7\3\2\2\2\u04cb\u04cc\t\22\2\2\u04cc\u00c9")
        buf.write("\3\2\2\2\u04cd\u04ce\t\23\2\2\u04ce\u00cb\3\2\2\2\u04cf")
        buf.write("\u04d0\t\24\2\2\u04d0\u00cd\3\2\2\2\u04d1\u04d9\7-\2\2")
        buf.write("\u04d2\u04d9\7,\2\2\u04d3\u04d9\7:\2\2\u04d4\u04d9\79")
        buf.write("\2\2\u04d5\u04d9\7<\2\2\u04d6\u04d9\5B\"\2\u04d7\u04d9")
        buf.write("\5R*\2\u04d8\u04d1\3\2\2\2\u04d8\u04d2\3\2\2\2\u04d8\u04d3")
        buf.write("\3\2\2\2\u04d8\u04d4\3\2\2\2\u04d8\u04d5\3\2\2\2\u04d8")
        buf.write("\u04d6\3\2\2\2\u04d8\u04d7\3\2\2\2\u04d9\u00cf\3\2\2\2")
        buf.write("\u04da\u04e3\7:\2\2\u04db\u04e3\79\2\2\u04dc\u04e3\7;")
        buf.write("\2\2\u04dd\u04e3\5^\60\2\u04de\u04e3\5\u00d8m\2\u04df")
        buf.write("\u04e0\5\u00d4k\2\u04e0\u04e1\5\u00aeX\2\u04e1\u04e3\3")
        buf.write("\2\2\2\u04e2\u04da\3\2\2\2\u04e2\u04db\3\2\2\2\u04e2\u04dc")
        buf.write("\3\2\2\2\u04e2\u04dd\3\2\2\2\u04e2\u04de\3\2\2\2\u04e2")
        buf.write("\u04df\3\2\2\2\u04e3\u00d1\3\2\2\2\u04e4\u04e5\7R\2\2")
        buf.write("\u04e5\u04e7\5L\'\2\u04e6\u04e4\3\2\2\2\u04e7\u04ea\3")
        buf.write("\2\2\2\u04e8\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ec")
        buf.write("\3\2\2\2\u04ea\u04e8\3\2\2\2\u04eb\u04ed\5R*\2\u04ec\u04eb")
        buf.write("\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee")
        buf.write("\u04ef\5\u00d6l\2\u04ef\u00d3\3\2\2\2\u04f0\u04f6\7\20")
        buf.write("\2\2\u04f1\u04f3\7\36\2\2\u04f2\u04f4\7\20\2\2\u04f3\u04f2")
        buf.write("\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f6\3\2\2\2\u04f5")
        buf.write("\u04f0\3\2\2\2\u04f5\u04f1\3\2\2\2\u04f6\u00d5\3\2\2\2")
        buf.write("\u04f7\u04f8\7\b\2\2\u04f8\u04f9\5v<\2\u04f9\u04fa\7\t")
        buf.write("\2\2\u04fa\u050f\3\2\2\2\u04fb\u0508\7\b\2\2\u04fc\u04fd")
        buf.write("\5\64\33\2\u04fd\u04fe\7o\2\2\u04fe\u0505\3\2\2\2\u04ff")
        buf.write("\u0500\7\22\2\2\u0500\u0501\5\64\33\2\u0501\u0502\7o\2")
        buf.write("\2\u0502\u0504\3\2\2\2\u0503\u04ff\3\2\2\2\u0504\u0507")
        buf.write("\3\2\2\2\u0505\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506")
        buf.write("\u0509\3\2\2\2\u0507\u0505\3\2\2\2\u0508\u04fc\3\2\2\2")
        buf.write("\u0508\u0509\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050b\7")
        buf.write(")\2\2\u050b\u050c\5v<\2\u050c\u050d\7\t\2\2\u050d\u050f")
        buf.write("\3\2\2\2\u050e\u04f7\3\2\2\2\u050e\u04fb\3\2\2\2\u050f")
        buf.write("\u00d7\3\2\2\2\u0510\u0519\7=\2\2\u0511\u0516\5\u0094")
        buf.write("K\2\u0512\u0513\7\22\2\2\u0513\u0515\5\u0094K\2\u0514")
        buf.write("\u0512\3\2\2\2\u0515\u0518\3\2\2\2\u0516\u0514\3\2\2\2")
        buf.write("\u0516\u0517\3\2\2\2\u0517\u051a\3\2\2\2\u0518\u0516\3")
        buf.write("\2\2\2\u0519\u0511\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051b")
        buf.write("\3\2\2\2\u051b\u051c\7>\2\2\u051c\u00d9\3\2\2\2\u051d")
        buf.write("\u0527\7a\2\2\u051e\u051f\7\33\2\2\u051f\u0524\5d\63\2")
        buf.write("\u0520\u0521\7\22\2\2\u0521\u0523\5d\63\2\u0522\u0520")
        buf.write("\3\2\2\2\u0523\u0526\3\2\2\2\u0524\u0522\3\2\2\2\u0524")
        buf.write("\u0525\3\2\2\2\u0525\u0528\3\2\2\2\u0526\u0524\3\2\2\2")
        buf.write("\u0527\u051e\3\2\2\2\u0527\u0528\3\2\2\2\u0528\u0529\3")
        buf.write("\2\2\2\u0529\u052a\5n8\2\u052a\u00db\3\2\2\2\u052b\u0530")
        buf.write("\7g\2\2\u052c\u052d\7\34\2\2\u052d\u052e\5\u0094K\2\u052e")
        buf.write("\u052f\7\35\2\2\u052f\u0531\3\2\2\2\u0530\u052c\3\2\2")
        buf.write("\2\u0530\u0531\3\2\2\2\u0531\u0532\3\2\2\2\u0532\u0536")
        buf.write("\7\b\2\2\u0533\u0535\5\u00dep\2\u0534\u0533\3\2\2\2\u0535")
        buf.write("\u0538\3\2\2\2\u0536\u0534\3\2\2\2\u0536\u0537\3\2\2\2")
        buf.write("\u0537\u0539\3\2\2\2\u0538\u0536\3\2\2\2\u0539\u053a\7")
        buf.write("\t\2\2\u053a\u00dd\3\2\2\2\u053b\u0540\5\u00e0q\2\u053c")
        buf.write("\u053d\7\22\2\2\u053d\u053f\5\u00e0q\2\u053e\u053c\3\2")
        buf.write("\2\2\u053f\u0542\3\2\2\2\u0540\u053e\3\2\2\2\u0540\u0541")
        buf.write("\3\2\2\2\u0541\u0543\3\2\2\2\u0542\u0540\3\2\2\2\u0543")
        buf.write("\u0544\7)\2\2\u0544\u0548\5\u0094K\2\u0545\u0547\7\7\2")
        buf.write("\2\u0546\u0545\3\2\2\2\u0547\u054a\3\2\2\2\u0548\u0546")
        buf.write("\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u0555\3\2\2\2\u054a")
        buf.write("\u0548\3\2\2\2\u054b\u054c\7f\2\2\u054c\u054d\7)\2\2\u054d")
        buf.write("\u0551\5\u0094K\2\u054e\u0550\7\7\2\2\u054f\u054e\3\2")
        buf.write("\2\2\u0550\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0551\u0552")
        buf.write("\3\2\2\2\u0552\u0555\3\2\2\2\u0553\u0551\3\2\2\2\u0554")
        buf.write("\u053b\3\2\2\2\u0554\u054b\3\2\2\2\u0555\u00df\3\2\2\2")
        buf.write("\u0556\u055c\5\u0094K\2\u0557\u0558\t\17\2\2\u0558\u055c")
        buf.write("\5\u0094K\2\u0559\u055a\t\21\2\2\u055a\u055c\5\32\16\2")
        buf.write("\u055b\u0556\3\2\2\2\u055b\u0557\3\2\2\2\u055b\u0559\3")
        buf.write("\2\2\2\u055c\u00e1\3\2\2\2\u00b5\u00e6\u00ea\u00ef\u00f8")
        buf.write("\u00fe\u0107\u010e\u0113\u011a\u0123\u0126\u012e\u0137")
        buf.write("\u013b\u0141\u014c\u014f\u0152\u0159\u0161\u0164\u0168")
        buf.write("\u016c\u016f\u0173\u0176\u0178\u017c\u0183\u018a\u0193")
        buf.write("\u0198\u019d\u01a3\u01ae\u01b1\u01bd\u01c5\u01ca\u01ce")
        buf.write("\u01d6\u01d9\u01dc\u01df\u01e2\u01e5\u01e7\u01ec\u01f8")
        buf.write("\u01fc\u0207\u020c\u0211\u021b\u0228\u022e\u0237\u023a")
        buf.write("\u0244\u0247\u0250\u0254\u0257\u025d\u0260\u0264\u0268")
        buf.write("\u026a\u0271\u027c\u0281\u0286\u028e\u0291\u029a\u02a0")
        buf.write("\u02a7\u02aa\u02ae\u02b4\u02b8\u02c3\u02c9\u02cc\u02d0")
        buf.write("\u02d7\u02da\u02df\u02e4\u02ed\u02f3\u02f6\u02fc\u0303")
        buf.write("\u0309\u0310\u0315\u031e\u0321\u0328\u032e\u0332\u0337")
        buf.write("\u033b\u0340\u0346\u034d\u0353\u0356\u035b\u0361\u036c")
        buf.write("\u0373\u0379\u037d\u0384\u0388\u0394\u0399\u03a0\u03a4")
        buf.write("\u03a9\u03b7\u03bc\u03c0\u03da\u03e2\u03ea\u03f3\u03fc")
        buf.write("\u0405\u040c\u040e\u0415\u041d\u0425\u042e\u0437\u0440")
        buf.write("\u0446\u0452\u0459\u045c\u0462\u0465\u046a\u046d\u0479")
        buf.write("\u047b\u0486\u0488\u048c\u0496\u049d\u04a0\u04ac\u04b5")
        buf.write("\u04bb\u04bf\u04d8\u04e2\u04e8\u04ec\u04f3\u04f5\u0505")
        buf.write("\u0508\u050e\u0516\u0519\u0524\u0527\u0530\u0536\u0540")
        buf.write("\u0548\u0551\u0554\u055b")
        return buf.getvalue()


class kotlinParser ( Parser ):

    grammarFileName = "kotlinParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "';'", "'{'", "'}'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'package'", "'import'", 
                     "'.'", "'*'", "','", "'<'", "'<='", "'>'", "'>='", 
                     "'='", "'=='", "'==='", "'!='", "':'", "'('", "')'", 
                     "'?'", "'!!.'", "'||'", "'&&'", "'?:'", "'...'", "'..'", 
                     "'::'", "'true'", "'false'", "'null'", "'->'", "'/'", 
                     "'%'", "'+'", "'-'", "'in'", "'!in'", "'is'", "'!is'", 
                     "'as'", "'as?'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'--'", "'++'", "'!!'", "'!'", "'['", "']'", "'val'", 
                     "'var'", "'by'", "'dynamic'", "'where'", "'get'", "'set'", 
                     "'abstract'", "'open'", "'final'", "'override'", "'enum'", 
                     "'annotation'", "'data'", "'private'", "'protected'", 
                     "'public'", "'internal'", "'out'", "'@'", "'file'", 
                     "'field'", "'property'", "'param'", "'sparam'", "'throw'", 
                     "'continue'", "'return'", "'break'", "'constructor'", 
                     "'this'", "'super'", "'class'", "'interface'", "'object'", 
                     "'companion'", "'fun'", "'init'", "'if'", "'else'", 
                     "'when'", "'while'", "'for'", "'do'", "'try'", "'catch'", 
                     "'finally'", "'$'" ]

    symbolicNames = [ "<INVALID>", "MULTILINE_COMMENT", "SINGLELINE_COMMENT", 
                      "WHITESPACE", "IntegerLiteral", "SEMI", "OPEN_BLOCK", 
                      "CLOSE_BLOCK", "HexadecimalLiteral", "CharacterLiteral", 
                      "TRIPLE_QUOTE", "SINGLE_QUOTE", "PACKAGE", "IMPORT", 
                      "DOT", "STAR", "COMMA", "LT", "LTE", "GT", "GTE", 
                      "EQ", "EQ_EQ", "EQ_EQ_EQ", "NEQ", "COLON", "BRACE_OPEN", 
                      "BRACE_CLOSE", "Q", "DA", "DISJ", "CONJ", "ELVIS", 
                      "LONG_RANGE", "RANGE", "REFERENCE", "TRUE", "FALSE", 
                      "NULL", "OP_ASTERISK", "OP_DIV", "OP_MOD", "OP_PLUS", 
                      "OP_MUNUS", "OP_IN", "OP_NOT_IN", "OP_IS", "OP_NOT_IS", 
                      "OP_AS", "OP_AS_SAFE", "OP_PLUS_ASSIGN", "OP_MINUS_ASSIGN", 
                      "OP_MULT_ASSIGN", "OP_DIV_ASSIGN", "OP_MOD_ASSIGN", 
                      "OP_DECREMENT", "OP_INCREMENT", "OP_NULL_ASSERT", 
                      "OP_NOT", "SQ_OPEN", "SQ_CLOSE", "KEYWORD_val", "KEYWORD_var", 
                      "KEYWORD_by", "KEYWORD_dynamic", "KEYWORD_where", 
                      "GET", "SET", "HierarchyModifier_abstract", "HierarchyModifier_open", 
                      "HierarchyModifier_final", "HierarchyModifier_override", 
                      "ClassModifier_enum", "ClassModifier_annotation", 
                      "ClassModifier_data", "AccessModifier_private", "AccessModifier_protected", 
                      "AccessModifier_public", "AccessModifier_internal", 
                      "VarianceAnnotation_out", "DOG", "AnnotationUseSiteTarget_file", 
                      "AnnotationUseSiteTarget_field", "AnnotationUseSiteTarget_property", 
                      "AnnotationUseSiteTarget_param", "AnnotationUseSiteTarget_sparam", 
                      "Jump_throw", "Jump_continue", "Jump_return", "Jump_break", 
                      "KEYWORD_constructor", "ConstructorDelegationCall_this", 
                      "ConstructorDelegationCall_super", "Declaration_class", 
                      "Declaration_interface", "Declaration_object", "Declaration_companion", 
                      "Declaration_fun", "Declaration_init", "CF_if", "CF_else", 
                      "CF_when", "CF_while", "CF_for", "CF_do", "CF_try", 
                      "CF_catch", "CF_FINALLY", "BAX", "SimpleName", "SINLE_QUOTE_WHITESPACE", 
                      "SINGLE_TEXT", "SINLE_QUOTE_CLOSE", "SINLE_QUOTE_ESCAPED_CHAR", 
                      "SINLE_QUOTE_EXPRESSION_START", "SINGLE_QUOTE_REF", 
                      "MULTILINE_QUOTE_TEXT", "MULTILINE_QUOTE_CLOSE", "MULTILINE_QUOTES", 
                      "MULTILINE_QUOTE_EXPRESSION_START", "MULTILINE_QUOTE_REF" ]

    RULE_root = 0
    RULE_preamble = 1
    RULE_packageHeader = 2
    RULE_importHeader = 3
    RULE_toplevelObject = 4
    RULE_memberDeclaration = 5
    RULE_optionalProjection = 6
    RULE_typeParameters = 7
    RULE_typeParameter = 8
    RULE_typeArguments = 9
    RULE_typeConstraints = 10
    RULE_typeConstraint = 11
    RULE_type_ = 12
    RULE_typeDescriptor = 13
    RULE_userType = 14
    RULE_simpleUserType_typeParam = 15
    RULE_simpleUserType = 16
    RULE_variableDeclarationEntry = 17
    RULE_functionType_paramOrType = 18
    RULE_extensionFunctionTypeNoReceiver = 19
    RULE_functionTypeNoReceiver = 20
    RULE_multipleVariableDeclarations = 21
    RULE_propertyDeclaration = 22
    RULE_getter = 23
    RULE_setter = 24
    RULE_modifiers = 25
    RULE_modifier = 26
    RULE_modifierKeyword = 27
    RULE_hierarchyModifier = 28
    RULE_classModifier = 29
    RULE_accessModifier = 30
    RULE_varianceAnnotation = 31
    RULE_annotations = 32
    RULE_annotation = 33
    RULE_annotationUseSiteTarget = 34
    RULE_valueArgument = 35
    RULE_valueArguments = 36
    RULE_unescapedAnnotation = 37
    RULE_jump = 38
    RULE_labelReference = 39
    RULE_labelDefinition = 40
    RULE_parameter = 41
    RULE_functionParameter = 42
    RULE_primaryConstructor = 43
    RULE_secondaryConstructor = 44
    RULE_constructorDelegationCall = 45
    RULE_callSuffix = 46
    RULE_constructorInvocation = 47
    RULE_explicitDelegation = 48
    RULE_delegationSpecifier = 49
    RULE_classDeclaration = 50
    RULE_supertypesSpecifiers = 51
    RULE_objectDeclaration = 52
    RULE_companionObject = 53
    RULE_classBody = 54
    RULE_members = 55
    RULE_valueParameters = 56
    RULE_functionDeclaration = 57
    RULE_statements = 58
    RULE_functionBody = 59
    RULE_block = 60
    RULE_anonymousInitializer = 61
    RULE_enumClassBody = 62
    RULE_enumEntries = 63
    RULE_enumEntry = 64
    RULE_ifExpression = 65
    RULE_tryExpression = 66
    RULE_catchBlock = 67
    RULE_finallyBlock = 68
    RULE_loop = 69
    RULE_forLoop = 70
    RULE_whileLoop = 71
    RULE_doWhileLoop = 72
    RULE_expression = 73
    RULE_disjunction = 74
    RULE_conjunction = 75
    RULE_equalityComparison = 76
    RULE_comparison = 77
    RULE_namedInfix = 78
    RULE_elvisExpression = 79
    RULE_infixFunctionCall = 80
    RULE_rangeExpression = 81
    RULE_additiveExpression = 82
    RULE_multiplicativeExpression = 83
    RULE_typeRHS = 84
    RULE_prefixUnaryExpression = 85
    RULE_postfixUnaryExpression = 86
    RULE_callableReference = 87
    RULE_identifier = 88
    RULE_stringLiteral = 89
    RULE_atomicExpression = 90
    RULE_literalConstant = 91
    RULE_declaration = 92
    RULE_statement = 93
    RULE_multiplicativeOperation = 94
    RULE_additiveOperation = 95
    RULE_inOperation = 96
    RULE_typeOperation = 97
    RULE_isOperation = 98
    RULE_comparisonOperation = 99
    RULE_equalityOperation = 100
    RULE_assignmentOperator = 101
    RULE_prefixUnaryOperation = 102
    RULE_postfixUnaryOperation = 103
    RULE_annotatedLambda = 104
    RULE_memberAccessOperation = 105
    RULE_functionLiteral = 106
    RULE_arrayAccess = 107
    RULE_objectLiteral = 108
    RULE_when = 109
    RULE_whenEntry = 110
    RULE_whenCondition = 111

    ruleNames =  [ "root", "preamble", "packageHeader", "importHeader", 
                   "toplevelObject", "memberDeclaration", "optionalProjection", 
                   "typeParameters", "typeParameter", "typeArguments", "typeConstraints", 
                   "typeConstraint", "type_", "typeDescriptor", "userType", 
                   "simpleUserType_typeParam", "simpleUserType", "variableDeclarationEntry", 
                   "functionType_paramOrType", "extensionFunctionTypeNoReceiver", 
                   "functionTypeNoReceiver", "multipleVariableDeclarations", 
                   "propertyDeclaration", "getter", "setter", "modifiers", 
                   "modifier", "modifierKeyword", "hierarchyModifier", "classModifier", 
                   "accessModifier", "varianceAnnotation", "annotations", 
                   "annotation", "annotationUseSiteTarget", "valueArgument", 
                   "valueArguments", "unescapedAnnotation", "jump", "labelReference", 
                   "labelDefinition", "parameter", "functionParameter", 
                   "primaryConstructor", "secondaryConstructor", "constructorDelegationCall", 
                   "callSuffix", "constructorInvocation", "explicitDelegation", 
                   "delegationSpecifier", "classDeclaration", "supertypesSpecifiers", 
                   "objectDeclaration", "companionObject", "classBody", 
                   "members", "valueParameters", "functionDeclaration", 
                   "statements", "functionBody", "block", "anonymousInitializer", 
                   "enumClassBody", "enumEntries", "enumEntry", "ifExpression", 
                   "tryExpression", "catchBlock", "finallyBlock", "loop", 
                   "forLoop", "whileLoop", "doWhileLoop", "expression", 
                   "disjunction", "conjunction", "equalityComparison", "comparison", 
                   "namedInfix", "elvisExpression", "infixFunctionCall", 
                   "rangeExpression", "additiveExpression", "multiplicativeExpression", 
                   "typeRHS", "prefixUnaryExpression", "postfixUnaryExpression", 
                   "callableReference", "identifier", "stringLiteral", "atomicExpression", 
                   "literalConstant", "declaration", "statement", "multiplicativeOperation", 
                   "additiveOperation", "inOperation", "typeOperation", 
                   "isOperation", "comparisonOperation", "equalityOperation", 
                   "assignmentOperator", "prefixUnaryOperation", "postfixUnaryOperation", 
                   "annotatedLambda", "memberAccessOperation", "functionLiteral", 
                   "arrayAccess", "objectLiteral", "when", "whenEntry", 
                   "whenCondition" ]

    EOF = Token.EOF
    MULTILINE_COMMENT=1
    SINGLELINE_COMMENT=2
    WHITESPACE=3
    IntegerLiteral=4
    SEMI=5
    OPEN_BLOCK=6
    CLOSE_BLOCK=7
    HexadecimalLiteral=8
    CharacterLiteral=9
    TRIPLE_QUOTE=10
    SINGLE_QUOTE=11
    PACKAGE=12
    IMPORT=13
    DOT=14
    STAR=15
    COMMA=16
    LT=17
    LTE=18
    GT=19
    GTE=20
    EQ=21
    EQ_EQ=22
    EQ_EQ_EQ=23
    NEQ=24
    COLON=25
    BRACE_OPEN=26
    BRACE_CLOSE=27
    Q=28
    DA=29
    DISJ=30
    CONJ=31
    ELVIS=32
    LONG_RANGE=33
    RANGE=34
    REFERENCE=35
    TRUE=36
    FALSE=37
    NULL=38
    OP_ASTERISK=39
    OP_DIV=40
    OP_MOD=41
    OP_PLUS=42
    OP_MUNUS=43
    OP_IN=44
    OP_NOT_IN=45
    OP_IS=46
    OP_NOT_IS=47
    OP_AS=48
    OP_AS_SAFE=49
    OP_PLUS_ASSIGN=50
    OP_MINUS_ASSIGN=51
    OP_MULT_ASSIGN=52
    OP_DIV_ASSIGN=53
    OP_MOD_ASSIGN=54
    OP_DECREMENT=55
    OP_INCREMENT=56
    OP_NULL_ASSERT=57
    OP_NOT=58
    SQ_OPEN=59
    SQ_CLOSE=60
    KEYWORD_val=61
    KEYWORD_var=62
    KEYWORD_by=63
    KEYWORD_dynamic=64
    KEYWORD_where=65
    GET=66
    SET=67
    HierarchyModifier_abstract=68
    HierarchyModifier_open=69
    HierarchyModifier_final=70
    HierarchyModifier_override=71
    ClassModifier_enum=72
    ClassModifier_annotation=73
    ClassModifier_data=74
    AccessModifier_private=75
    AccessModifier_protected=76
    AccessModifier_public=77
    AccessModifier_internal=78
    VarianceAnnotation_out=79
    DOG=80
    AnnotationUseSiteTarget_file=81
    AnnotationUseSiteTarget_field=82
    AnnotationUseSiteTarget_property=83
    AnnotationUseSiteTarget_param=84
    AnnotationUseSiteTarget_sparam=85
    Jump_throw=86
    Jump_continue=87
    Jump_return=88
    Jump_break=89
    KEYWORD_constructor=90
    ConstructorDelegationCall_this=91
    ConstructorDelegationCall_super=92
    Declaration_class=93
    Declaration_interface=94
    Declaration_object=95
    Declaration_companion=96
    Declaration_fun=97
    Declaration_init=98
    CF_if=99
    CF_else=100
    CF_when=101
    CF_while=102
    CF_for=103
    CF_do=104
    CF_try=105
    CF_catch=106
    CF_FINALLY=107
    BAX=108
    SimpleName=109
    SINLE_QUOTE_WHITESPACE=110
    SINGLE_TEXT=111
    SINLE_QUOTE_CLOSE=112
    SINLE_QUOTE_ESCAPED_CHAR=113
    SINLE_QUOTE_EXPRESSION_START=114
    SINGLE_QUOTE_REF=115
    MULTILINE_QUOTE_TEXT=116
    MULTILINE_QUOTE_CLOSE=117
    MULTILINE_QUOTES=118
    MULTILINE_QUOTE_EXPRESSION_START=119
    MULTILINE_QUOTE_REF=120

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(kotlinParser.PreambleContext,0)


        def toplevelObject(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ToplevelObjectContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ToplevelObjectContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = kotlinParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.preamble()
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (kotlinParser.OP_IN - 44)) | (1 << (kotlinParser.KEYWORD_val - 44)) | (1 << (kotlinParser.KEYWORD_var - 44)) | (1 << (kotlinParser.HierarchyModifier_abstract - 44)) | (1 << (kotlinParser.HierarchyModifier_open - 44)) | (1 << (kotlinParser.HierarchyModifier_final - 44)) | (1 << (kotlinParser.HierarchyModifier_override - 44)) | (1 << (kotlinParser.ClassModifier_enum - 44)) | (1 << (kotlinParser.ClassModifier_annotation - 44)) | (1 << (kotlinParser.ClassModifier_data - 44)) | (1 << (kotlinParser.AccessModifier_private - 44)) | (1 << (kotlinParser.AccessModifier_protected - 44)) | (1 << (kotlinParser.AccessModifier_public - 44)) | (1 << (kotlinParser.AccessModifier_internal - 44)) | (1 << (kotlinParser.VarianceAnnotation_out - 44)) | (1 << (kotlinParser.DOG - 44)) | (1 << (kotlinParser.Declaration_class - 44)) | (1 << (kotlinParser.Declaration_interface - 44)) | (1 << (kotlinParser.Declaration_object - 44)) | (1 << (kotlinParser.Declaration_fun - 44)))) != 0):
                self.state = 225
                self.toplevelObject()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreambleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(kotlinParser.PackageHeaderContext,0)


        def importHeader(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ImportHeaderContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ImportHeaderContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_preamble

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreamble" ):
                listener.enterPreamble(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreamble" ):
                listener.exitPreamble(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreamble" ):
                return visitor.visitPreamble(self)
            else:
                return visitor.visitChildren(self)




    def preamble(self):

        localctx = kotlinParser.PreambleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_preamble)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.PACKAGE:
                self.state = 231
                self.packageHeader()


            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.IMPORT:
                self.state = 234
                self.importHeader()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PackageHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(kotlinParser.IdentifierContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_packageHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageHeader" ):
                listener.enterPackageHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageHeader" ):
                listener.exitPackageHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageHeader" ):
                return visitor.visitPackageHeader(self)
            else:
                return visitor.visitChildren(self)




    def packageHeader(self):

        localctx = kotlinParser.PackageHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_packageHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(kotlinParser.PACKAGE)
            self.state = 241
            self.identifier()
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.DOT:
                self.state = 242
                self.match(kotlinParser.DOT)
                self.state = 243
                self.identifier()
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.SEMI:
                self.state = 249
                self.match(kotlinParser.SEMI)
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImportHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(kotlinParser.IdentifierContext,i)


        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_importHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportHeader" ):
                listener.enterImportHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportHeader" ):
                listener.exitImportHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportHeader" ):
                return visitor.visitImportHeader(self)
            else:
                return visitor.visitChildren(self)




    def importHeader(self):

        localctx = kotlinParser.ImportHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(kotlinParser.IMPORT)
            self.state = 256
            self.identifier()
            self.state = 261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 257
                    self.match(kotlinParser.DOT)
                    self.state = 258
                    self.identifier() 
                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 268
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.DOT]:
                self.state = 264
                self.match(kotlinParser.DOT)
                self.state = 265
                self.match(kotlinParser.STAR)
                pass
            elif token in [kotlinParser.OP_AS]:
                self.state = 266
                self.match(kotlinParser.OP_AS)
                self.state = 267
                self.match(kotlinParser.SimpleName)
                pass
            elif token in [kotlinParser.EOF, kotlinParser.SEMI, kotlinParser.IMPORT, kotlinParser.OP_IN, kotlinParser.KEYWORD_val, kotlinParser.KEYWORD_var, kotlinParser.HierarchyModifier_abstract, kotlinParser.HierarchyModifier_open, kotlinParser.HierarchyModifier_final, kotlinParser.HierarchyModifier_override, kotlinParser.ClassModifier_enum, kotlinParser.ClassModifier_annotation, kotlinParser.ClassModifier_data, kotlinParser.AccessModifier_private, kotlinParser.AccessModifier_protected, kotlinParser.AccessModifier_public, kotlinParser.AccessModifier_internal, kotlinParser.VarianceAnnotation_out, kotlinParser.DOG, kotlinParser.Declaration_class, kotlinParser.Declaration_interface, kotlinParser.Declaration_object, kotlinParser.Declaration_fun]:
                pass
            else:
                pass
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.SEMI:
                self.state = 270
                self.match(kotlinParser.SEMI)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ToplevelObjectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def propertyDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.PropertyDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.FunctionDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.ClassDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.ObjectDeclarationContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_toplevelObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterToplevelObject" ):
                listener.enterToplevelObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitToplevelObject" ):
                listener.exitToplevelObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitToplevelObject" ):
                return visitor.visitToplevelObject(self)
            else:
                return visitor.visitChildren(self)




    def toplevelObject(self):

        localctx = kotlinParser.ToplevelObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_toplevelObject)
        try:
            self.state = 280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 276
                self.propertyDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 278
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 279
                self.objectDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def companionObject(self):
            return self.getTypedRuleContext(kotlinParser.CompanionObjectContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.ObjectDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.PropertyDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.ClassDeclarationContext,0)


        def anonymousInitializer(self):
            return self.getTypedRuleContext(kotlinParser.AnonymousInitializerContext,0)


        def secondaryConstructor(self):
            return self.getTypedRuleContext(kotlinParser.SecondaryConstructorContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberDeclaration" ):
                return visitor.visitMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberDeclaration(self):

        localctx = kotlinParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_memberDeclaration)
        try:
            self.state = 289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 282
                self.companionObject()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 283
                self.objectDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 284
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 285
                self.propertyDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 286
                self.classDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 287
                self.anonymousInitializer()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 288
                self.secondaryConstructor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptionalProjectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varianceAnnotation(self):
            return self.getTypedRuleContext(kotlinParser.VarianceAnnotationContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_optionalProjection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionalProjection" ):
                listener.enterOptionalProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionalProjection" ):
                listener.exitOptionalProjection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalProjection" ):
                return visitor.visitOptionalProjection(self)
            else:
                return visitor.visitChildren(self)




    def optionalProjection(self):

        localctx = kotlinParser.OptionalProjectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_optionalProjection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.OP_IN or _la==kotlinParser.VarianceAnnotation_out:
                self.state = 291
                self.varianceAnnotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(kotlinParser.TypeParameterContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = kotlinParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(kotlinParser.LT)
            self.state = 295
            self.typeParameter()
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.COMMA:
                self.state = 296
                self.match(kotlinParser.COMMA)
                self.state = 297
                self.typeParameter()
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 303
            self.match(kotlinParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def userType(self):
            return self.getTypedRuleContext(kotlinParser.UserTypeContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = kotlinParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.modifiers()
            self.state = 306
            self.match(kotlinParser.SimpleName)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.COLON:
                self.state = 307
                self.match(kotlinParser.COLON)
                self.state = 308
                self.userType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.Type_Context)
            else:
                return self.getTypedRuleContext(kotlinParser.Type_Context,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = kotlinParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(kotlinParser.LT)

            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.PACKAGE or _la==kotlinParser.BRACE_OPEN or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (kotlinParser.KEYWORD_dynamic - 64)) | (1 << (kotlinParser.DOG - 64)) | (1 << (kotlinParser.SimpleName - 64)))) != 0):
                self.state = 312
                self.type_()


            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.COMMA:
                self.state = 315
                self.match(kotlinParser.COMMA)
                self.state = 316
                self.type_()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 322
            self.match(kotlinParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeConstraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.TypeConstraintContext)
            else:
                return self.getTypedRuleContext(kotlinParser.TypeConstraintContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_typeConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraints" ):
                listener.enterTypeConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraints" ):
                listener.exitTypeConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstraints" ):
                return visitor.visitTypeConstraints(self)
            else:
                return visitor.visitChildren(self)




    def typeConstraints(self):

        localctx = kotlinParser.TypeConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_typeConstraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.KEYWORD_where:
                self.state = 324
                self.match(kotlinParser.KEYWORD_where)
                self.state = 325
                self.typeConstraint()
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 326
                    self.match(kotlinParser.COMMA)
                    self.state = 327
                    self.typeConstraint()
                    self.state = 332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_typeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraint" ):
                listener.enterTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraint" ):
                listener.exitTypeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstraint" ):
                return visitor.visitTypeConstraint(self)
            else:
                return visitor.visitChildren(self)




    def typeConstraint(self):

        localctx = kotlinParser.TypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.DOG:
                self.state = 335
                self.annotations()


            self.state = 338
            self.match(kotlinParser.SimpleName)
            self.state = 339
            self.match(kotlinParser.COLON)
            self.state = 340
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDescriptor(self):
            return self.getTypedRuleContext(kotlinParser.TypeDescriptorContext,0)


        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = kotlinParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_type_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.DOG:
                self.state = 342
                self.annotations()


            self.state = 345
            self.typeDescriptor()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeDescriptorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeDescriptor(self):
            return self.getTypedRuleContext(kotlinParser.TypeDescriptorContext,0)


        def extensionFunctionTypeNoReceiver(self):
            return self.getTypedRuleContext(kotlinParser.ExtensionFunctionTypeNoReceiverContext,0)


        def functionTypeNoReceiver(self):
            return self.getTypedRuleContext(kotlinParser.FunctionTypeNoReceiverContext,0)


        def userType(self):
            return self.getTypedRuleContext(kotlinParser.UserTypeContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_typeDescriptor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDescriptor" ):
                listener.enterTypeDescriptor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDescriptor" ):
                listener.exitTypeDescriptor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeDescriptor" ):
                return visitor.visitTypeDescriptor(self)
            else:
                return visitor.visitChildren(self)




    def typeDescriptor(self):

        localctx = kotlinParser.TypeDescriptorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_typeDescriptor)
        try:
            self.state = 374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 347
                self.match(kotlinParser.BRACE_OPEN)
                self.state = 348
                self.typeDescriptor()
                self.state = 349
                self.match(kotlinParser.BRACE_CLOSE)
                self.state = 351
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 350
                    self.match(kotlinParser.Q)


                self.state = 354
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                if la_ == 1:
                    self.state = 353
                    self.extensionFunctionTypeNoReceiver()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 356
                self.functionTypeNoReceiver()
                self.state = 358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                if la_ == 1:
                    self.state = 357
                    self.extensionFunctionTypeNoReceiver()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 360
                self.userType()
                self.state = 362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 361
                    self.match(kotlinParser.Q)


                self.state = 365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
                if la_ == 1:
                    self.state = 364
                    self.extensionFunctionTypeNoReceiver()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 367
                self.match(kotlinParser.KEYWORD_dynamic)
                self.state = 369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 368
                    self.match(kotlinParser.Q)


                self.state = 372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
                if la_ == 1:
                    self.state = 371
                    self.extensionFunctionTypeNoReceiver()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleUserType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.SimpleUserTypeContext)
            else:
                return self.getTypedRuleContext(kotlinParser.SimpleUserTypeContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_userType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserType" ):
                listener.enterUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserType" ):
                listener.exitUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserType" ):
                return visitor.visitUserType(self)
            else:
                return visitor.visitChildren(self)




    def userType(self):

        localctx = kotlinParser.UserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_userType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.PACKAGE:
                self.state = 376
                self.match(kotlinParser.PACKAGE)
                self.state = 377
                self.match(kotlinParser.DOT)


            self.state = 380
            self.simpleUserType()
            self.state = 385
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 381
                    self.match(kotlinParser.DOT)
                    self.state = 382
                    self.simpleUserType() 
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleUserType_typeParamContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionalProjection(self):
            return self.getTypedRuleContext(kotlinParser.OptionalProjectionContext,0)


        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_simpleUserType_typeParam

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleUserType_typeParam" ):
                listener.enterSimpleUserType_typeParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleUserType_typeParam" ):
                listener.exitSimpleUserType_typeParam(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleUserType_typeParam" ):
                return visitor.visitSimpleUserType_typeParam(self)
            else:
                return visitor.visitChildren(self)




    def simpleUserType_typeParam(self):

        localctx = kotlinParser.SimpleUserType_typeParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_simpleUserType_typeParam)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.STAR]:
                self.state = 388
                self.match(kotlinParser.STAR)
                pass
            elif token in [kotlinParser.PACKAGE, kotlinParser.BRACE_OPEN, kotlinParser.OP_IN, kotlinParser.KEYWORD_dynamic, kotlinParser.VarianceAnnotation_out, kotlinParser.DOG, kotlinParser.SimpleName]:
                self.state = 389
                self.optionalProjection()
                self.state = 390
                self.type_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleUserTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def simpleUserType_typeParam(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.SimpleUserType_typeParamContext)
            else:
                return self.getTypedRuleContext(kotlinParser.SimpleUserType_typeParamContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_simpleUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleUserType" ):
                listener.enterSimpleUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleUserType" ):
                listener.exitSimpleUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleUserType" ):
                return visitor.visitSimpleUserType(self)
            else:
                return visitor.visitChildren(self)




    def simpleUserType(self):

        localctx = kotlinParser.SimpleUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_simpleUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(kotlinParser.SimpleName)
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 395
                self.match(kotlinParser.LT)
                self.state = 396
                self.simpleUserType_typeParam()
                self.state = 401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 397
                    self.match(kotlinParser.COMMA)
                    self.state = 398
                    self.simpleUserType_typeParam()
                    self.state = 403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 404
                self.match(kotlinParser.GT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableDeclarationEntryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_variableDeclarationEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationEntry" ):
                listener.enterVariableDeclarationEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationEntry" ):
                listener.exitVariableDeclarationEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclarationEntry" ):
                return visitor.visitVariableDeclarationEntry(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclarationEntry(self):

        localctx = kotlinParser.VariableDeclarationEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_variableDeclarationEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(kotlinParser.SimpleName)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.COLON:
                self.state = 409
                self.match(kotlinParser.COLON)
                self.state = 410
                self.type_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionType_paramOrTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(kotlinParser.ParameterContext,0)


        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_functionType_paramOrType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType_paramOrType" ):
                listener.enterFunctionType_paramOrType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType_paramOrType" ):
                listener.exitFunctionType_paramOrType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType_paramOrType" ):
                return visitor.visitFunctionType_paramOrType(self)
            else:
                return visitor.visitChildren(self)




    def functionType_paramOrType(self):

        localctx = kotlinParser.FunctionType_paramOrTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functionType_paramOrType)
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 413
                self.parameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 414
                self.modifiers()
                self.state = 415
                self.type_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExtensionFunctionTypeNoReceiverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeNoReceiver(self):
            return self.getTypedRuleContext(kotlinParser.FunctionTypeNoReceiverContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_extensionFunctionTypeNoReceiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFunctionTypeNoReceiver" ):
                listener.enterExtensionFunctionTypeNoReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFunctionTypeNoReceiver" ):
                listener.exitExtensionFunctionTypeNoReceiver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFunctionTypeNoReceiver" ):
                return visitor.visitExtensionFunctionTypeNoReceiver(self)
            else:
                return visitor.visitChildren(self)




    def extensionFunctionTypeNoReceiver(self):

        localctx = kotlinParser.ExtensionFunctionTypeNoReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_extensionFunctionTypeNoReceiver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(kotlinParser.DOT)
            self.state = 420
            self.functionTypeNoReceiver()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionTypeNoReceiverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def functionType_paramOrType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.FunctionType_paramOrTypeContext)
            else:
                return self.getTypedRuleContext(kotlinParser.FunctionType_paramOrTypeContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_functionTypeNoReceiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeNoReceiver" ):
                listener.enterFunctionTypeNoReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeNoReceiver" ):
                listener.exitFunctionTypeNoReceiver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeNoReceiver" ):
                return visitor.visitFunctionTypeNoReceiver(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeNoReceiver(self):

        localctx = kotlinParser.FunctionTypeNoReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_functionTypeNoReceiver)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.PACKAGE) | (1 << kotlinParser.BRACE_OPEN) | (1 << kotlinParser.OP_IN))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (kotlinParser.KEYWORD_dynamic - 64)) | (1 << (kotlinParser.HierarchyModifier_abstract - 64)) | (1 << (kotlinParser.HierarchyModifier_open - 64)) | (1 << (kotlinParser.HierarchyModifier_final - 64)) | (1 << (kotlinParser.HierarchyModifier_override - 64)) | (1 << (kotlinParser.ClassModifier_enum - 64)) | (1 << (kotlinParser.ClassModifier_annotation - 64)) | (1 << (kotlinParser.ClassModifier_data - 64)) | (1 << (kotlinParser.AccessModifier_private - 64)) | (1 << (kotlinParser.AccessModifier_protected - 64)) | (1 << (kotlinParser.AccessModifier_public - 64)) | (1 << (kotlinParser.AccessModifier_internal - 64)) | (1 << (kotlinParser.VarianceAnnotation_out - 64)) | (1 << (kotlinParser.DOG - 64)) | (1 << (kotlinParser.SimpleName - 64)))) != 0):
                self.state = 423
                self.functionType_paramOrType()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 424
                    self.match(kotlinParser.COMMA)
                    self.state = 425
                    self.functionType_paramOrType()
                    self.state = 430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 433
            self.match(kotlinParser.BRACE_CLOSE)
            self.state = 434
            self.match(kotlinParser.OP_ASTERISK)
            self.state = 435
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultipleVariableDeclarationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.VariableDeclarationEntryContext)
            else:
                return self.getTypedRuleContext(kotlinParser.VariableDeclarationEntryContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_multipleVariableDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleVariableDeclarations" ):
                listener.enterMultipleVariableDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleVariableDeclarations" ):
                listener.exitMultipleVariableDeclarations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleVariableDeclarations" ):
                return visitor.visitMultipleVariableDeclarations(self)
            else:
                return visitor.visitChildren(self)




    def multipleVariableDeclarations(self):

        localctx = kotlinParser.MultipleVariableDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_multipleVariableDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 437
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 438
            self.variableDeclarationEntry()
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.COMMA:
                self.state = 439
                self.match(kotlinParser.COMMA)
                self.state = 440
                self.variableDeclarationEntry()
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 446
            self.match(kotlinParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PropertyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(kotlinParser.TypeConstraintsContext,0)


        def multipleVariableDeclarations(self):
            return self.getTypedRuleContext(kotlinParser.MultipleVariableDeclarationsContext,0)


        def variableDeclarationEntry(self):
            return self.getTypedRuleContext(kotlinParser.VariableDeclarationEntryContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(kotlinParser.TypeParametersContext,0)


        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getter(self):
            return self.getTypedRuleContext(kotlinParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(kotlinParser.SetterContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyDeclaration" ):
                return visitor.visitPropertyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyDeclaration(self):

        localctx = kotlinParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.modifiers()
            self.state = 449
            _la = self._input.LA(1)
            if not(_la==kotlinParser.KEYWORD_val or _la==kotlinParser.KEYWORD_var):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.LT:
                self.state = 450
                self.typeParameters()


            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 453
                self.type_()
                self.state = 454
                self.match(kotlinParser.DOT)


            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.BRACE_OPEN]:
                self.state = 458
                self.multipleVariableDeclarations()
                pass
            elif token in [kotlinParser.SimpleName]:
                self.state = 459
                self.variableDeclarationEntry()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 462
            self.typeConstraints()
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.EQ or _la==kotlinParser.KEYWORD_by:
                self.state = 463
                _la = self._input.LA(1)
                if not(_la==kotlinParser.EQ or _la==kotlinParser.KEYWORD_by):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 464
                self.expression()
                self.state = 468
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 465
                        self.match(kotlinParser.SEMI) 
                    self.state = 470
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)



            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 473
                    self.getter()


                self.state = 477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 476
                    self.setter()


                pass

            elif la_ == 2:
                self.state = 480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 479
                    self.setter()


                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 482
                    self.getter()


                pass


            self.state = 490
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 487
                    self.match(kotlinParser.SEMI) 
                self.state = 492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(kotlinParser.FunctionBodyContext,0)


        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter" ):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)




    def getter(self):

        localctx = kotlinParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.state = 506
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.modifiers()
                self.state = 494
                self.match(kotlinParser.GET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 496
                self.modifiers()
                self.state = 497
                self.match(kotlinParser.GET)
                self.state = 498
                self.match(kotlinParser.BRACE_OPEN)
                self.state = 499
                self.match(kotlinParser.BRACE_CLOSE)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==kotlinParser.COLON:
                    self.state = 500
                    self.match(kotlinParser.COLON)
                    self.state = 501
                    self.type_()


                self.state = 504
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ModifiersContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ModifiersContext,i)


        def functionBody(self):
            return self.getTypedRuleContext(kotlinParser.FunctionBodyContext,0)


        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def parameter(self):
            return self.getTypedRuleContext(kotlinParser.ParameterContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter" ):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)




    def setter(self):

        localctx = kotlinParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_setter)
        try:
            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.modifiers()
                self.state = 509
                self.match(kotlinParser.SET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.modifiers()
                self.state = 512
                self.match(kotlinParser.SET)
                self.state = 513
                self.match(kotlinParser.BRACE_OPEN)
                self.state = 514
                self.modifiers()
                self.state = 517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 515
                    self.match(kotlinParser.SimpleName)
                    pass

                elif la_ == 2:
                    self.state = 516
                    self.parameter()
                    pass


                self.state = 519
                self.match(kotlinParser.BRACE_CLOSE)
                self.state = 520
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ModifierContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ModifierContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_modifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifiers" ):
                listener.enterModifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifiers" ):
                listener.exitModifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifiers" ):
                return visitor.visitModifiers(self)
            else:
                return visitor.visitChildren(self)




    def modifiers(self):

        localctx = kotlinParser.ModifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_modifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 524
                    self.modifier() 
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifierKeyword(self):
            return self.getTypedRuleContext(kotlinParser.ModifierKeywordContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = kotlinParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.modifierKeyword()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModifierKeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hierarchyModifier(self):
            return self.getTypedRuleContext(kotlinParser.HierarchyModifierContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(kotlinParser.AccessModifierContext,0)


        def varianceAnnotation(self):
            return self.getTypedRuleContext(kotlinParser.VarianceAnnotationContext,0)


        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def classModifier(self):
            return self.getTypedRuleContext(kotlinParser.ClassModifierContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_modifierKeyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierKeyword" ):
                listener.enterModifierKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierKeyword" ):
                listener.exitModifierKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierKeyword" ):
                return visitor.visitModifierKeyword(self)
            else:
                return visitor.visitChildren(self)




    def modifierKeyword(self):

        localctx = kotlinParser.ModifierKeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_modifierKeyword)
        try:
            self.state = 537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.HierarchyModifier_abstract, kotlinParser.HierarchyModifier_open, kotlinParser.HierarchyModifier_final, kotlinParser.HierarchyModifier_override]:
                self.enterOuterAlt(localctx, 1)
                self.state = 532
                self.hierarchyModifier()
                pass
            elif token in [kotlinParser.AccessModifier_private, kotlinParser.AccessModifier_protected, kotlinParser.AccessModifier_public, kotlinParser.AccessModifier_internal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.accessModifier()
                pass
            elif token in [kotlinParser.OP_IN, kotlinParser.VarianceAnnotation_out]:
                self.enterOuterAlt(localctx, 3)
                self.state = 534
                self.varianceAnnotation()
                pass
            elif token in [kotlinParser.DOG]:
                self.enterOuterAlt(localctx, 4)
                self.state = 535
                self.annotations()
                pass
            elif token in [kotlinParser.ClassModifier_enum, kotlinParser.ClassModifier_annotation, kotlinParser.ClassModifier_data]:
                self.enterOuterAlt(localctx, 5)
                self.state = 536
                self.classModifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HierarchyModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_hierarchyModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHierarchyModifier" ):
                listener.enterHierarchyModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHierarchyModifier" ):
                listener.exitHierarchyModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHierarchyModifier" ):
                return visitor.visitHierarchyModifier(self)
            else:
                return visitor.visitChildren(self)




    def hierarchyModifier(self):

        localctx = kotlinParser.HierarchyModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_hierarchyModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            _la = self._input.LA(1)
            if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (kotlinParser.HierarchyModifier_abstract - 68)) | (1 << (kotlinParser.HierarchyModifier_open - 68)) | (1 << (kotlinParser.HierarchyModifier_final - 68)) | (1 << (kotlinParser.HierarchyModifier_override - 68)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModifier" ):
                return visitor.visitClassModifier(self)
            else:
                return visitor.visitChildren(self)




    def classModifier(self):

        localctx = kotlinParser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_classModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (kotlinParser.ClassModifier_enum - 72)) | (1 << (kotlinParser.ClassModifier_annotation - 72)) | (1 << (kotlinParser.ClassModifier_data - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_accessModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessModifier" ):
                listener.enterAccessModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessModifier" ):
                listener.exitAccessModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessModifier" ):
                return visitor.visitAccessModifier(self)
            else:
                return visitor.visitChildren(self)




    def accessModifier(self):

        localctx = kotlinParser.AccessModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_accessModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            _la = self._input.LA(1)
            if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (kotlinParser.AccessModifier_private - 75)) | (1 << (kotlinParser.AccessModifier_protected - 75)) | (1 << (kotlinParser.AccessModifier_public - 75)) | (1 << (kotlinParser.AccessModifier_internal - 75)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VarianceAnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_varianceAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarianceAnnotation" ):
                listener.enterVarianceAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarianceAnnotation" ):
                listener.exitVarianceAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarianceAnnotation" ):
                return visitor.visitVarianceAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def varianceAnnotation(self):

        localctx = kotlinParser.VarianceAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_varianceAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            _la = self._input.LA(1)
            if not(_la==kotlinParser.OP_IN or _la==kotlinParser.VarianceAnnotation_out):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.AnnotationContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_annotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotations" ):
                listener.enterAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotations" ):
                listener.exitAnnotations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotations" ):
                return visitor.visitAnnotations(self)
            else:
                return visitor.visitChildren(self)




    def annotations(self):

        localctx = kotlinParser.AnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_annotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 547
                    self.annotation()

                else:
                    raise NoViableAltException(self)
                self.state = 550 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unescapedAnnotation(self):
            return self.getTypedRuleContext(kotlinParser.UnescapedAnnotationContext,0)


        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationUseSiteTargetContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = kotlinParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(kotlinParser.DOG)
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (kotlinParser.GET - 66)) | (1 << (kotlinParser.SET - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_file - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_field - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_property - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_param - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_sparam - 66)))) != 0):
                self.state = 553
                self.annotationUseSiteTarget()
                self.state = 554
                self.match(kotlinParser.COLON)


            self.state = 558
            self.unescapedAnnotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotationUseSiteTargetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_annotationUseSiteTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationUseSiteTarget" ):
                listener.enterAnnotationUseSiteTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationUseSiteTarget" ):
                listener.exitAnnotationUseSiteTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationUseSiteTarget" ):
                return visitor.visitAnnotationUseSiteTarget(self)
            else:
                return visitor.visitChildren(self)




    def annotationUseSiteTarget(self):

        localctx = kotlinParser.AnnotationUseSiteTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_annotationUseSiteTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (kotlinParser.GET - 66)) | (1 << (kotlinParser.SET - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_file - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_field - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_property - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_param - 66)) | (1 << (kotlinParser.AnnotationUseSiteTarget_sparam - 66)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(kotlinParser.IdentifierContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_valueArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArgument" ):
                listener.enterValueArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArgument" ):
                listener.exitValueArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArgument" ):
                return visitor.visitValueArgument(self)
            else:
                return visitor.visitChildren(self)




    def valueArgument(self):

        localctx = kotlinParser.ValueArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_valueArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 562
                self.identifier()
                self.state = 563
                self.match(kotlinParser.EQ)


            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.STAR:
                self.state = 567
                self.match(kotlinParser.STAR)


            self.state = 570
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ValueArgumentContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ValueArgumentContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_valueArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArguments" ):
                listener.enterValueArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArguments" ):
                listener.exitValueArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArguments" ):
                return visitor.visitValueArguments(self)
            else:
                return visitor.visitChildren(self)




    def valueArguments(self):

        localctx = kotlinParser.ValueArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_valueArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.IntegerLiteral) | (1 << kotlinParser.OPEN_BLOCK) | (1 << kotlinParser.HexadecimalLiteral) | (1 << kotlinParser.CharacterLiteral) | (1 << kotlinParser.TRIPLE_QUOTE) | (1 << kotlinParser.SINGLE_QUOTE) | (1 << kotlinParser.PACKAGE) | (1 << kotlinParser.IMPORT) | (1 << kotlinParser.STAR) | (1 << kotlinParser.BRACE_OPEN) | (1 << kotlinParser.REFERENCE) | (1 << kotlinParser.TRUE) | (1 << kotlinParser.FALSE) | (1 << kotlinParser.NULL) | (1 << kotlinParser.OP_PLUS) | (1 << kotlinParser.OP_MUNUS) | (1 << kotlinParser.OP_DECREMENT) | (1 << kotlinParser.OP_INCREMENT) | (1 << kotlinParser.OP_NOT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (kotlinParser.ClassModifier_enum - 72)) | (1 << (kotlinParser.DOG - 72)) | (1 << (kotlinParser.Jump_throw - 72)) | (1 << (kotlinParser.Jump_continue - 72)) | (1 << (kotlinParser.Jump_return - 72)) | (1 << (kotlinParser.Jump_break - 72)) | (1 << (kotlinParser.ConstructorDelegationCall_this - 72)) | (1 << (kotlinParser.ConstructorDelegationCall_super - 72)) | (1 << (kotlinParser.Declaration_object - 72)) | (1 << (kotlinParser.Declaration_companion - 72)) | (1 << (kotlinParser.Declaration_init - 72)) | (1 << (kotlinParser.CF_if - 72)) | (1 << (kotlinParser.CF_when - 72)) | (1 << (kotlinParser.CF_while - 72)) | (1 << (kotlinParser.CF_for - 72)) | (1 << (kotlinParser.CF_do - 72)) | (1 << (kotlinParser.CF_try - 72)) | (1 << (kotlinParser.BAX - 72)) | (1 << (kotlinParser.SimpleName - 72)))) != 0):
                self.state = 573
                self.valueArgument()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 574
                    self.match(kotlinParser.COMMA)
                    self.state = 575
                    self.valueArgument()
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 583
            self.match(kotlinParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnescapedAnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(kotlinParser.IdentifierContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(kotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(kotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_unescapedAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedAnnotation" ):
                listener.enterUnescapedAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedAnnotation" ):
                listener.exitUnescapedAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnescapedAnnotation" ):
                return visitor.visitUnescapedAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def unescapedAnnotation(self):

        localctx = kotlinParser.UnescapedAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_unescapedAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self.identifier()
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.DOT:
                self.state = 586
                self.match(kotlinParser.DOT)
                self.state = 587
                self.identifier()
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.LT:
                self.state = 593
                self.typeArguments()


            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 596
                self.valueArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def labelReference(self):
            return self.getTypedRuleContext(kotlinParser.LabelReferenceContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_jump

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJump" ):
                listener.enterJump(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJump" ):
                listener.exitJump(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJump" ):
                return visitor.visitJump(self)
            else:
                return visitor.visitChildren(self)




    def jump(self):

        localctx = kotlinParser.JumpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_jump)
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.Jump_throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.match(kotlinParser.Jump_throw)
                self.state = 600
                self.expression()
                pass
            elif token in [kotlinParser.Jump_return]:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(kotlinParser.Jump_return)
                self.state = 603
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 602
                    self.labelReference()


                self.state = 606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 605
                    self.expression()


                pass
            elif token in [kotlinParser.Jump_continue]:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self.match(kotlinParser.Jump_continue)
                self.state = 610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 609
                    self.labelReference()


                pass
            elif token in [kotlinParser.Jump_break]:
                self.enterOuterAlt(localctx, 4)
                self.state = 612
                self.match(kotlinParser.Jump_break)
                self.state = 614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 613
                    self.labelReference()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(kotlinParser.IdentifierContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_labelReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelReference" ):
                listener.enterLabelReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelReference" ):
                listener.exitLabelReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelReference" ):
                return visitor.visitLabelReference(self)
            else:
                return visitor.visitChildren(self)




    def labelReference(self):

        localctx = kotlinParser.LabelReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_labelReference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(kotlinParser.DOG)
            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.IMPORT, kotlinParser.ClassModifier_enum, kotlinParser.Declaration_companion, kotlinParser.Declaration_init, kotlinParser.SimpleName]:
                self.state = 619
                self.identifier()
                pass
            elif token in [kotlinParser.CF_for]:
                self.state = 620
                self.match(kotlinParser.CF_for)
                pass
            elif token in [kotlinParser.CF_while]:
                self.state = 621
                self.match(kotlinParser.CF_while)
                pass
            elif token in [kotlinParser.CF_when]:
                self.state = 622
                self.match(kotlinParser.CF_when)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(kotlinParser.IdentifierContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = kotlinParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.identifier()
            self.state = 626
            self.match(kotlinParser.DOG)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = kotlinParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(kotlinParser.SimpleName)
            self.state = 629
            self.match(kotlinParser.COLON)
            self.state = 630
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def parameter(self):
            return self.getTypedRuleContext(kotlinParser.ParameterContext,0)


        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionParameter" ):
                return visitor.visitFunctionParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionParameter(self):

        localctx = kotlinParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_functionParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.modifiers()
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.KEYWORD_val or _la==kotlinParser.KEYWORD_var:
                self.state = 633
                _la = self._input.LA(1)
                if not(_la==kotlinParser.KEYWORD_val or _la==kotlinParser.KEYWORD_var):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 636
            self.parameter()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.EQ:
                self.state = 637
                self.match(kotlinParser.EQ)
                self.state = 638
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrimaryConstructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(kotlinParser.FunctionParameterContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_primaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryConstructor" ):
                listener.enterPrimaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryConstructor" ):
                listener.exitPrimaryConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryConstructor" ):
                return visitor.visitPrimaryConstructor(self)
            else:
                return visitor.visitChildren(self)




    def primaryConstructor(self):

        localctx = kotlinParser.PrimaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_primaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (kotlinParser.OP_IN - 44)) | (1 << (kotlinParser.HierarchyModifier_abstract - 44)) | (1 << (kotlinParser.HierarchyModifier_open - 44)) | (1 << (kotlinParser.HierarchyModifier_final - 44)) | (1 << (kotlinParser.HierarchyModifier_override - 44)) | (1 << (kotlinParser.ClassModifier_enum - 44)) | (1 << (kotlinParser.ClassModifier_annotation - 44)) | (1 << (kotlinParser.ClassModifier_data - 44)) | (1 << (kotlinParser.AccessModifier_private - 44)) | (1 << (kotlinParser.AccessModifier_protected - 44)) | (1 << (kotlinParser.AccessModifier_public - 44)) | (1 << (kotlinParser.AccessModifier_internal - 44)) | (1 << (kotlinParser.VarianceAnnotation_out - 44)) | (1 << (kotlinParser.DOG - 44)) | (1 << (kotlinParser.KEYWORD_constructor - 44)))) != 0):
                self.state = 641
                self.modifiers()
                self.state = 642
                self.match(kotlinParser.KEYWORD_constructor)


            self.state = 646
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.OP_IN) | (1 << kotlinParser.KEYWORD_val) | (1 << kotlinParser.KEYWORD_var))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (kotlinParser.HierarchyModifier_abstract - 68)) | (1 << (kotlinParser.HierarchyModifier_open - 68)) | (1 << (kotlinParser.HierarchyModifier_final - 68)) | (1 << (kotlinParser.HierarchyModifier_override - 68)) | (1 << (kotlinParser.ClassModifier_enum - 68)) | (1 << (kotlinParser.ClassModifier_annotation - 68)) | (1 << (kotlinParser.ClassModifier_data - 68)) | (1 << (kotlinParser.AccessModifier_private - 68)) | (1 << (kotlinParser.AccessModifier_protected - 68)) | (1 << (kotlinParser.AccessModifier_public - 68)) | (1 << (kotlinParser.AccessModifier_internal - 68)) | (1 << (kotlinParser.VarianceAnnotation_out - 68)) | (1 << (kotlinParser.DOG - 68)) | (1 << (kotlinParser.SimpleName - 68)))) != 0):
                self.state = 647
                self.functionParameter()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 648
                    self.match(kotlinParser.COMMA)
                    self.state = 649
                    self.functionParameter()
                    self.state = 654
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 657
            self.match(kotlinParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SecondaryConstructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def valueParameters(self):
            return self.getTypedRuleContext(kotlinParser.ValueParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(kotlinParser.BlockContext,0)


        def constructorDelegationCall(self):
            return self.getTypedRuleContext(kotlinParser.ConstructorDelegationCallContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_secondaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondaryConstructor" ):
                listener.enterSecondaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondaryConstructor" ):
                listener.exitSecondaryConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecondaryConstructor" ):
                return visitor.visitSecondaryConstructor(self)
            else:
                return visitor.visitChildren(self)




    def secondaryConstructor(self):

        localctx = kotlinParser.SecondaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_secondaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.modifiers()
            self.state = 660
            self.match(kotlinParser.KEYWORD_constructor)
            self.state = 661
            self.valueParameters()
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.COLON:
                self.state = 662
                self.match(kotlinParser.COLON)
                self.state = 663
                self.constructorDelegationCall()


            self.state = 666
            self.block()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.SEMI:
                self.state = 667
                self.match(kotlinParser.SEMI)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorDelegationCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueArguments(self):
            return self.getTypedRuleContext(kotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_constructorDelegationCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDelegationCall" ):
                listener.enterConstructorDelegationCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDelegationCall" ):
                listener.exitConstructorDelegationCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDelegationCall" ):
                return visitor.visitConstructorDelegationCall(self)
            else:
                return visitor.visitChildren(self)




    def constructorDelegationCall(self):

        localctx = kotlinParser.ConstructorDelegationCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_constructorDelegationCall)
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.ConstructorDelegationCall_this]:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.match(kotlinParser.ConstructorDelegationCall_this)
                self.state = 674
                self.valueArguments()
                pass
            elif token in [kotlinParser.ConstructorDelegationCall_super]:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.match(kotlinParser.ConstructorDelegationCall_super)
                self.state = 676
                self.valueArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def valueArguments(self):
            return self.getTypedRuleContext(kotlinParser.ValueArgumentsContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(kotlinParser.TypeArgumentsContext,0)


        def annotatedLambda(self):
            return self.getTypedRuleContext(kotlinParser.AnnotatedLambdaContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_callSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSuffix" ):
                listener.enterCallSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSuffix" ):
                listener.exitCallSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallSuffix" ):
                return visitor.visitCallSuffix(self)
            else:
                return visitor.visitChildren(self)




    def callSuffix(self):

        localctx = kotlinParser.CallSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_callSuffix)
        self._la = 0 # Token type
        try:
            self.state = 690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==kotlinParser.LT:
                    self.state = 679
                    self.typeArguments()


                self.state = 682
                self.valueArguments()
                self.state = 684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 683
                    self.annotatedLambda()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.typeArguments()
                self.state = 687
                self.annotatedLambda()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 689
                self.annotatedLambda()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstructorInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(kotlinParser.UserTypeContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(kotlinParser.ValueArgumentsContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(kotlinParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_constructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInvocation" ):
                listener.enterConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInvocation" ):
                listener.exitConstructorInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorInvocation" ):
                return visitor.visitConstructorInvocation(self)
            else:
                return visitor.visitChildren(self)




    def constructorInvocation(self):

        localctx = kotlinParser.ConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_constructorInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.userType()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.LT:
                self.state = 693
                self.typeArguments()


            self.state = 696
            self.valueArguments()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExplicitDelegationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(kotlinParser.UserTypeContext,0)


        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_explicitDelegation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitDelegation" ):
                listener.enterExplicitDelegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitDelegation" ):
                listener.exitExplicitDelegation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitDelegation" ):
                return visitor.visitExplicitDelegation(self)
            else:
                return visitor.visitChildren(self)




    def explicitDelegation(self):

        localctx = kotlinParser.ExplicitDelegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_explicitDelegation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.userType()
            self.state = 699
            self.match(kotlinParser.KEYWORD_by)
            self.state = 700
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DelegationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(kotlinParser.ConstructorInvocationContext,0)


        def userType(self):
            return self.getTypedRuleContext(kotlinParser.UserTypeContext,0)


        def explicitDelegation(self):
            return self.getTypedRuleContext(kotlinParser.ExplicitDelegationContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_delegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifier" ):
                listener.enterDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifier" ):
                listener.exitDelegationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelegationSpecifier" ):
                return visitor.visitDelegationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def delegationSpecifier(self):

        localctx = kotlinParser.DelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_delegationSpecifier)
        try:
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 703
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 704
                self.explicitDelegation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(kotlinParser.TypeConstraintsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(kotlinParser.ClassBodyContext,0)


        def enumClassBody(self):
            return self.getTypedRuleContext(kotlinParser.EnumClassBodyContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(kotlinParser.TypeParametersContext,0)


        def primaryConstructor(self):
            return self.getTypedRuleContext(kotlinParser.PrimaryConstructorContext,0)


        def delegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.DelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(kotlinParser.DelegationSpecifierContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = kotlinParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.modifiers()
            self.state = 708
            _la = self._input.LA(1)
            if not(_la==kotlinParser.Declaration_class or _la==kotlinParser.Declaration_interface):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 709
            self.match(kotlinParser.SimpleName)
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.LT:
                self.state = 710
                self.typeParameters()


            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 713
                self.primaryConstructor()


            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.COLON:
                self.state = 716
                self.match(kotlinParser.COLON)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==kotlinParser.DOG:
                    self.state = 717
                    self.annotations()


                self.state = 720
                self.delegationSpecifier()
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 721
                    self.match(kotlinParser.COMMA)
                    self.state = 722
                    self.delegationSpecifier()
                    self.state = 727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 730
            self.typeConstraints()
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 731
                self.classBody()
                pass

            elif la_ == 2:
                self.state = 732
                self.enumClassBody()
                pass


            self.state = 738
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 735
                    self.match(kotlinParser.SEMI) 
                self.state = 740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SupertypesSpecifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.DelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(kotlinParser.DelegationSpecifierContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_supertypesSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupertypesSpecifiers" ):
                listener.enterSupertypesSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupertypesSpecifiers" ):
                listener.exitSupertypesSpecifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSupertypesSpecifiers" ):
                return visitor.visitSupertypesSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def supertypesSpecifiers(self):

        localctx = kotlinParser.SupertypesSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_supertypesSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(kotlinParser.COLON)
            self.state = 742
            self.delegationSpecifier()
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.COMMA:
                self.state = 743
                self.match(kotlinParser.COMMA)
                self.state = 744
                self.delegationSpecifier()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def classBody(self):
            return self.getTypedRuleContext(kotlinParser.ClassBodyContext,0)


        def primaryConstructor(self):
            return self.getTypedRuleContext(kotlinParser.PrimaryConstructorContext,0)


        def supertypesSpecifiers(self):
            return self.getTypedRuleContext(kotlinParser.SupertypesSpecifiersContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_objectDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDeclaration" ):
                listener.enterObjectDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDeclaration" ):
                listener.exitObjectDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectDeclaration" ):
                return visitor.visitObjectDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def objectDeclaration(self):

        localctx = kotlinParser.ObjectDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_objectDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.match(kotlinParser.Declaration_object)
            self.state = 751
            self.match(kotlinParser.SimpleName)
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 752
                self.primaryConstructor()


            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.COLON:
                self.state = 755
                self.supertypesSpecifiers()


            self.state = 758
            self.classBody()
            self.state = 762
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 759
                    self.match(kotlinParser.SEMI) 
                self.state = 764
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompanionObjectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(kotlinParser.ClassBodyContext,0)


        def supertypesSpecifiers(self):
            return self.getTypedRuleContext(kotlinParser.SupertypesSpecifiersContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_companionObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompanionObject" ):
                listener.enterCompanionObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompanionObject" ):
                listener.exitCompanionObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompanionObject" ):
                return visitor.visitCompanionObject(self)
            else:
                return visitor.visitChildren(self)




    def companionObject(self):

        localctx = kotlinParser.CompanionObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_companionObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.modifiers()
            self.state = 766
            self.match(kotlinParser.Declaration_companion)
            self.state = 767
            self.match(kotlinParser.Declaration_object)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.COLON:
                self.state = 768
                self.supertypesSpecifiers()


            self.state = 771
            self.classBody()
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.SEMI:
                self.state = 772
                self.match(kotlinParser.SEMI)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def members(self):
            return self.getTypedRuleContext(kotlinParser.MembersContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = kotlinParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_classBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.state = 778
                self.match(kotlinParser.OPEN_BLOCK)
                self.state = 779
                self.members()
                self.state = 780
                self.match(kotlinParser.CLOSE_BLOCK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MembersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.MemberDeclarationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.MemberDeclarationContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_members

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMembers" ):
                listener.enterMembers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMembers" ):
                listener.exitMembers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMembers" ):
                return visitor.visitMembers(self)
            else:
                return visitor.visitChildren(self)




    def members(self):

        localctx = kotlinParser.MembersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_members)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 44)) & ~0x3f) == 0 and ((1 << (_la - 44)) & ((1 << (kotlinParser.OP_IN - 44)) | (1 << (kotlinParser.KEYWORD_val - 44)) | (1 << (kotlinParser.KEYWORD_var - 44)) | (1 << (kotlinParser.HierarchyModifier_abstract - 44)) | (1 << (kotlinParser.HierarchyModifier_open - 44)) | (1 << (kotlinParser.HierarchyModifier_final - 44)) | (1 << (kotlinParser.HierarchyModifier_override - 44)) | (1 << (kotlinParser.ClassModifier_enum - 44)) | (1 << (kotlinParser.ClassModifier_annotation - 44)) | (1 << (kotlinParser.ClassModifier_data - 44)) | (1 << (kotlinParser.AccessModifier_private - 44)) | (1 << (kotlinParser.AccessModifier_protected - 44)) | (1 << (kotlinParser.AccessModifier_public - 44)) | (1 << (kotlinParser.AccessModifier_internal - 44)) | (1 << (kotlinParser.VarianceAnnotation_out - 44)) | (1 << (kotlinParser.DOG - 44)) | (1 << (kotlinParser.KEYWORD_constructor - 44)) | (1 << (kotlinParser.Declaration_class - 44)) | (1 << (kotlinParser.Declaration_interface - 44)) | (1 << (kotlinParser.Declaration_object - 44)) | (1 << (kotlinParser.Declaration_companion - 44)) | (1 << (kotlinParser.Declaration_fun - 44)) | (1 << (kotlinParser.Declaration_init - 44)))) != 0):
                self.state = 784
                self.memberDeclaration()
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(kotlinParser.FunctionParameterContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_valueParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueParameters" ):
                listener.enterValueParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueParameters" ):
                listener.exitValueParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueParameters" ):
                return visitor.visitValueParameters(self)
            else:
                return visitor.visitChildren(self)




    def valueParameters(self):

        localctx = kotlinParser.ValueParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_valueParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.OP_IN) | (1 << kotlinParser.KEYWORD_val) | (1 << kotlinParser.KEYWORD_var))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (kotlinParser.HierarchyModifier_abstract - 68)) | (1 << (kotlinParser.HierarchyModifier_open - 68)) | (1 << (kotlinParser.HierarchyModifier_final - 68)) | (1 << (kotlinParser.HierarchyModifier_override - 68)) | (1 << (kotlinParser.ClassModifier_enum - 68)) | (1 << (kotlinParser.ClassModifier_annotation - 68)) | (1 << (kotlinParser.ClassModifier_data - 68)) | (1 << (kotlinParser.AccessModifier_private - 68)) | (1 << (kotlinParser.AccessModifier_protected - 68)) | (1 << (kotlinParser.AccessModifier_public - 68)) | (1 << (kotlinParser.AccessModifier_internal - 68)) | (1 << (kotlinParser.VarianceAnnotation_out - 68)) | (1 << (kotlinParser.DOG - 68)) | (1 << (kotlinParser.SimpleName - 68)))) != 0):
                self.state = 791
                self.functionParameter()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 792
                    self.match(kotlinParser.COMMA)
                    self.state = 793
                    self.functionParameter()
                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 801
            self.match(kotlinParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def valueParameters(self):
            return self.getTypedRuleContext(kotlinParser.ValueParametersContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(kotlinParser.TypeConstraintsContext,0)


        def typeParameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.TypeParametersContext)
            else:
                return self.getTypedRuleContext(kotlinParser.TypeParametersContext,i)


        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.Type_Context)
            else:
                return self.getTypedRuleContext(kotlinParser.Type_Context,i)


        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(kotlinParser.FunctionBodyContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = kotlinParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.modifiers()
            self.state = 804
            self.match(kotlinParser.Declaration_fun)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.LT:
                self.state = 805
                self.typeParameters()


            self.state = 812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 808
                self.type_()
                self.state = 809
                self.match(kotlinParser.DOT)

            elif la_ == 2:
                self.state = 811
                self.annotations()


            self.state = 814
            self.match(kotlinParser.SimpleName)
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.LT:
                self.state = 815
                self.typeParameters()


            self.state = 818
            self.valueParameters()
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.COLON:
                self.state = 819
                self.match(kotlinParser.COLON)
                self.state = 820
                self.type_()


            self.state = 823
            self.typeConstraints()
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 824
                self.functionBody()


            self.state = 830
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 827
                    self.match(kotlinParser.SEMI) 
                self.state = 832
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(kotlinParser.StatementContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = kotlinParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 833
                    self.match(kotlinParser.SEMI) 
                self.state = 838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.IntegerLiteral) | (1 << kotlinParser.OPEN_BLOCK) | (1 << kotlinParser.HexadecimalLiteral) | (1 << kotlinParser.CharacterLiteral) | (1 << kotlinParser.TRIPLE_QUOTE) | (1 << kotlinParser.SINGLE_QUOTE) | (1 << kotlinParser.PACKAGE) | (1 << kotlinParser.IMPORT) | (1 << kotlinParser.BRACE_OPEN) | (1 << kotlinParser.REFERENCE) | (1 << kotlinParser.TRUE) | (1 << kotlinParser.FALSE) | (1 << kotlinParser.NULL) | (1 << kotlinParser.OP_PLUS) | (1 << kotlinParser.OP_MUNUS) | (1 << kotlinParser.OP_IN) | (1 << kotlinParser.OP_DECREMENT) | (1 << kotlinParser.OP_INCREMENT) | (1 << kotlinParser.OP_NOT) | (1 << kotlinParser.KEYWORD_val) | (1 << kotlinParser.KEYWORD_var))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (kotlinParser.HierarchyModifier_abstract - 68)) | (1 << (kotlinParser.HierarchyModifier_open - 68)) | (1 << (kotlinParser.HierarchyModifier_final - 68)) | (1 << (kotlinParser.HierarchyModifier_override - 68)) | (1 << (kotlinParser.ClassModifier_enum - 68)) | (1 << (kotlinParser.ClassModifier_annotation - 68)) | (1 << (kotlinParser.ClassModifier_data - 68)) | (1 << (kotlinParser.AccessModifier_private - 68)) | (1 << (kotlinParser.AccessModifier_protected - 68)) | (1 << (kotlinParser.AccessModifier_public - 68)) | (1 << (kotlinParser.AccessModifier_internal - 68)) | (1 << (kotlinParser.VarianceAnnotation_out - 68)) | (1 << (kotlinParser.DOG - 68)) | (1 << (kotlinParser.Jump_throw - 68)) | (1 << (kotlinParser.Jump_continue - 68)) | (1 << (kotlinParser.Jump_return - 68)) | (1 << (kotlinParser.Jump_break - 68)) | (1 << (kotlinParser.ConstructorDelegationCall_this - 68)) | (1 << (kotlinParser.ConstructorDelegationCall_super - 68)) | (1 << (kotlinParser.Declaration_class - 68)) | (1 << (kotlinParser.Declaration_interface - 68)) | (1 << (kotlinParser.Declaration_object - 68)) | (1 << (kotlinParser.Declaration_companion - 68)) | (1 << (kotlinParser.Declaration_fun - 68)) | (1 << (kotlinParser.Declaration_init - 68)) | (1 << (kotlinParser.CF_if - 68)) | (1 << (kotlinParser.CF_when - 68)) | (1 << (kotlinParser.CF_while - 68)) | (1 << (kotlinParser.CF_for - 68)) | (1 << (kotlinParser.CF_do - 68)) | (1 << (kotlinParser.CF_try - 68)) | (1 << (kotlinParser.BAX - 68)) | (1 << (kotlinParser.SimpleName - 68)))) != 0):
                self.state = 839
                self.statement()
                self.state = 849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 843
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==kotlinParser.SEMI:
                            self.state = 840
                            self.match(kotlinParser.SEMI)
                            self.state = 845
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 846
                        self.statement() 
                    self.state = 851
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)



            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.SEMI:
                self.state = 854
                self.match(kotlinParser.SEMI)
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(kotlinParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = kotlinParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_functionBody)
        try:
            self.state = 863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.OPEN_BLOCK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 860
                self.block()
                pass
            elif token in [kotlinParser.EQ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.match(kotlinParser.EQ)
                self.state = 862
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(kotlinParser.StatementsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = kotlinParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(kotlinParser.OPEN_BLOCK)
            self.state = 866
            self.statements()
            self.state = 867
            self.match(kotlinParser.CLOSE_BLOCK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnonymousInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(kotlinParser.BlockContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_anonymousInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousInitializer" ):
                listener.enterAnonymousInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousInitializer" ):
                listener.exitAnonymousInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnonymousInitializer" ):
                return visitor.visitAnonymousInitializer(self)
            else:
                return visitor.visitChildren(self)




    def anonymousInitializer(self):

        localctx = kotlinParser.AnonymousInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_anonymousInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(kotlinParser.Declaration_init)
            self.state = 870
            self.block()
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.SEMI:
                self.state = 871
                self.match(kotlinParser.SEMI)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumEntries(self):
            return self.getTypedRuleContext(kotlinParser.EnumEntriesContext,0)


        def members(self):
            return self.getTypedRuleContext(kotlinParser.MembersContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_enumClassBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumClassBody" ):
                listener.enterEnumClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumClassBody" ):
                listener.exitEnumClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumClassBody" ):
                return visitor.visitEnumClassBody(self)
            else:
                return visitor.visitChildren(self)




    def enumClassBody(self):

        localctx = kotlinParser.EnumClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_enumClassBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(kotlinParser.OPEN_BLOCK)
            self.state = 878
            self.enumEntries()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.SEMI:
                self.state = 879
                self.match(kotlinParser.SEMI)
                self.state = 880
                self.members()


            self.state = 883
            self.match(kotlinParser.CLOSE_BLOCK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumEntriesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.EnumEntryContext)
            else:
                return self.getTypedRuleContext(kotlinParser.EnumEntryContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_enumEntries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntries" ):
                listener.enterEnumEntries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntries" ):
                listener.exitEnumEntries(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumEntries" ):
                return visitor.visitEnumEntries(self)
            else:
                return visitor.visitChildren(self)




    def enumEntries(self):

        localctx = kotlinParser.EnumEntriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_enumEntries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.OP_IN or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (kotlinParser.HierarchyModifier_abstract - 68)) | (1 << (kotlinParser.HierarchyModifier_open - 68)) | (1 << (kotlinParser.HierarchyModifier_final - 68)) | (1 << (kotlinParser.HierarchyModifier_override - 68)) | (1 << (kotlinParser.ClassModifier_enum - 68)) | (1 << (kotlinParser.ClassModifier_annotation - 68)) | (1 << (kotlinParser.ClassModifier_data - 68)) | (1 << (kotlinParser.AccessModifier_private - 68)) | (1 << (kotlinParser.AccessModifier_protected - 68)) | (1 << (kotlinParser.AccessModifier_public - 68)) | (1 << (kotlinParser.AccessModifier_internal - 68)) | (1 << (kotlinParser.VarianceAnnotation_out - 68)) | (1 << (kotlinParser.DOG - 68)) | (1 << (kotlinParser.SimpleName - 68)))) != 0):
                self.state = 885
                self.enumEntry()
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==kotlinParser.COMMA:
                    self.state = 886
                    self.match(kotlinParser.COMMA)


                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumEntryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifiers(self):
            return self.getTypedRuleContext(kotlinParser.ModifiersContext,0)


        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def classBody(self):
            return self.getTypedRuleContext(kotlinParser.ClassBodyContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(kotlinParser.ValueArgumentsContext,0)


        def constructorInvocation(self):
            return self.getTypedRuleContext(kotlinParser.ConstructorInvocationContext,0)


        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_enumEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntry" ):
                listener.enterEnumEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntry" ):
                listener.exitEnumEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumEntry" ):
                return visitor.visitEnumEntry(self)
            else:
                return visitor.visitChildren(self)




    def enumEntry(self):

        localctx = kotlinParser.EnumEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_enumEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.modifiers()
            self.state = 895
            self.match(kotlinParser.SimpleName)
            self.state = 902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.COLON]:
                self.state = 896
                self.match(kotlinParser.COLON)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==kotlinParser.DOG:
                    self.state = 897
                    self.annotations()


                self.state = 900
                self.constructorInvocation()
                pass
            elif token in [kotlinParser.BRACE_OPEN]:
                self.state = 901
                self.valueArguments()
                pass
            elif token in [kotlinParser.SEMI, kotlinParser.OPEN_BLOCK, kotlinParser.CLOSE_BLOCK, kotlinParser.COMMA, kotlinParser.OP_IN, kotlinParser.HierarchyModifier_abstract, kotlinParser.HierarchyModifier_open, kotlinParser.HierarchyModifier_final, kotlinParser.HierarchyModifier_override, kotlinParser.ClassModifier_enum, kotlinParser.ClassModifier_annotation, kotlinParser.ClassModifier_data, kotlinParser.AccessModifier_private, kotlinParser.AccessModifier_protected, kotlinParser.AccessModifier_public, kotlinParser.AccessModifier_internal, kotlinParser.VarianceAnnotation_out, kotlinParser.DOG, kotlinParser.SimpleName]:
                pass
            else:
                pass
            self.state = 904
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ExpressionContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpression" ):
                return visitor.visitIfExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifExpression(self):

        localctx = kotlinParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ifExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(kotlinParser.CF_if)
            self.state = 907
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 908
            self.expression()
            self.state = 909
            self.match(kotlinParser.BRACE_CLOSE)
            self.state = 910
            self.expression()
            self.state = 914
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 911
                    self.match(kotlinParser.SEMI) 
                self.state = 916
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 917
                self.match(kotlinParser.CF_else)
                self.state = 918
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(kotlinParser.BlockContext,0)


        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(kotlinParser.CatchBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(kotlinParser.FinallyBlockContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_tryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpression" ):
                listener.enterTryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpression" ):
                listener.exitTryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryExpression" ):
                return visitor.visitTryExpression(self)
            else:
                return visitor.visitChildren(self)




    def tryExpression(self):

        localctx = kotlinParser.TryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(kotlinParser.CF_try)
            self.state = 922
            self.block()
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.CF_catch:
                self.state = 923
                self.catchBlock()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.CF_FINALLY:
                self.state = 929
                self.finallyBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CatchBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def userType(self):
            return self.getTypedRuleContext(kotlinParser.UserTypeContext,0)


        def block(self):
            return self.getTypedRuleContext(kotlinParser.BlockContext,0)


        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_catchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchBlock" ):
                listener.enterCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchBlock" ):
                listener.exitCatchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchBlock" ):
                return visitor.visitCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def catchBlock(self):

        localctx = kotlinParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(kotlinParser.CF_catch)
            self.state = 933
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.DOG:
                self.state = 934
                self.annotations()


            self.state = 937
            self.match(kotlinParser.SimpleName)
            self.state = 938
            self.match(kotlinParser.COLON)
            self.state = 939
            self.userType()
            self.state = 940
            self.match(kotlinParser.BRACE_CLOSE)
            self.state = 941
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FinallyBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(kotlinParser.BlockContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = kotlinParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_finallyBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(kotlinParser.CF_FINALLY)
            self.state = 944
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forLoop(self):
            return self.getTypedRuleContext(kotlinParser.ForLoopContext,0)


        def whileLoop(self):
            return self.getTypedRuleContext(kotlinParser.WhileLoopContext,0)


        def doWhileLoop(self):
            return self.getTypedRuleContext(kotlinParser.DoWhileLoopContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = kotlinParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_loop)
        try:
            self.state = 949
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.CF_for]:
                self.enterOuterAlt(localctx, 1)
                self.state = 946
                self.forLoop()
                pass
            elif token in [kotlinParser.CF_while]:
                self.enterOuterAlt(localctx, 2)
                self.state = 947
                self.whileLoop()
                pass
            elif token in [kotlinParser.CF_do]:
                self.enterOuterAlt(localctx, 3)
                self.state = 948
                self.doWhileLoop()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ForLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ExpressionContext,i)


        def multipleVariableDeclarations(self):
            return self.getTypedRuleContext(kotlinParser.MultipleVariableDeclarationsContext,0)


        def variableDeclarationEntry(self):
            return self.getTypedRuleContext(kotlinParser.VariableDeclarationEntryContext,0)


        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_forLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForLoop" ):
                listener.enterForLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForLoop" ):
                listener.exitForLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForLoop" ):
                return visitor.visitForLoop(self)
            else:
                return visitor.visitChildren(self)




    def forLoop(self):

        localctx = kotlinParser.ForLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_forLoop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(kotlinParser.CF_for)
            self.state = 952
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.DOG:
                self.state = 953
                self.annotations()


            self.state = 958
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.BRACE_OPEN]:
                self.state = 956
                self.multipleVariableDeclarations()
                pass
            elif token in [kotlinParser.SimpleName]:
                self.state = 957
                self.variableDeclarationEntry()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 960
            self.match(kotlinParser.OP_IN)
            self.state = 961
            self.expression()
            self.state = 962
            self.match(kotlinParser.BRACE_CLOSE)
            self.state = 963
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ExpressionContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_whileLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileLoop" ):
                listener.enterWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileLoop" ):
                listener.exitWhileLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileLoop" ):
                return visitor.visitWhileLoop(self)
            else:
                return visitor.visitChildren(self)




    def whileLoop(self):

        localctx = kotlinParser.WhileLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_whileLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(kotlinParser.CF_while)
            self.state = 966
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 967
            self.expression()
            self.state = 968
            self.match(kotlinParser.BRACE_CLOSE)
            self.state = 969
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoWhileLoopContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ExpressionContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_doWhileLoop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileLoop" ):
                listener.enterDoWhileLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileLoop" ):
                listener.exitDoWhileLoop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileLoop" ):
                return visitor.visitDoWhileLoop(self)
            else:
                return visitor.visitChildren(self)




    def doWhileLoop(self):

        localctx = kotlinParser.DoWhileLoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_doWhileLoop)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(kotlinParser.CF_do)
            self.state = 972
            self.expression()
            self.state = 973
            self.match(kotlinParser.CF_while)
            self.state = 974
            self.match(kotlinParser.BRACE_OPEN)
            self.state = 975
            self.expression()
            self.state = 976
            self.match(kotlinParser.BRACE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.DisjunctionContext,i)


        def assignmentOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.AssignmentOperatorContext)
            else:
                return self.getTypedRuleContext(kotlinParser.AssignmentOperatorContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = kotlinParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.disjunction()
            self.state = 984
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 979
                    self.assignmentOperator()
                    self.state = 980
                    self.disjunction() 
                self.state = 986
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ConjunctionContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = kotlinParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_disjunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.conjunction()
            self.state = 992
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 988
                    self.match(kotlinParser.DISJ)
                    self.state = 989
                    self.conjunction() 
                self.state = 994
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityComparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.EqualityComparisonContext)
            else:
                return self.getTypedRuleContext(kotlinParser.EqualityComparisonContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = kotlinParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_conjunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.equalityComparison()
            self.state = 1000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 996
                    self.match(kotlinParser.CONJ)
                    self.state = 997
                    self.equalityComparison() 
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ComparisonContext,i)


        def equalityOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.EqualityOperationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.EqualityOperationContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_equalityComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityComparison" ):
                return visitor.visitEqualityComparison(self)
            else:
                return visitor.visitChildren(self)




    def equalityComparison(self):

        localctx = kotlinParser.EqualityComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_equalityComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.comparison()
            self.state = 1009
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1004
                    self.equalityOperation()
                    self.state = 1005
                    self.comparison() 
                self.state = 1011
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedInfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.NamedInfixContext)
            else:
                return self.getTypedRuleContext(kotlinParser.NamedInfixContext,i)


        def comparisonOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ComparisonOperationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ComparisonOperationContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = kotlinParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.namedInfix()
            self.state = 1018
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1013
                    self.comparisonOperation()
                    self.state = 1014
                    self.namedInfix() 
                self.state = 1020
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedInfixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elvisExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ElvisExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ElvisExpressionContext,i)


        def inOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.InOperationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.InOperationContext,i)


        def isOperation(self):
            return self.getTypedRuleContext(kotlinParser.IsOperationContext,0)


        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_namedInfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedInfix" ):
                listener.enterNamedInfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedInfix" ):
                listener.exitNamedInfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedInfix" ):
                return visitor.visitNamedInfix(self)
            else:
                return visitor.visitChildren(self)




    def namedInfix(self):

        localctx = kotlinParser.NamedInfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_namedInfix)
        try:
            self.state = 1036
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.elvisExpression()
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1022
                        self.inOperation()
                        self.state = 1023
                        self.elvisExpression() 
                    self.state = 1029
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self.elvisExpression()
                self.state = 1034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1031
                    self.isOperation()
                    self.state = 1032
                    self.type_()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElvisExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.InfixFunctionCallContext)
            else:
                return self.getTypedRuleContext(kotlinParser.InfixFunctionCallContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_elvisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvisExpression" ):
                listener.enterElvisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvisExpression" ):
                listener.exitElvisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElvisExpression" ):
                return visitor.visitElvisExpression(self)
            else:
                return visitor.visitChildren(self)




    def elvisExpression(self):

        localctx = kotlinParser.ElvisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_elvisExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.infixFunctionCall()
            self.state = 1043
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1039
                    self.match(kotlinParser.ELVIS)
                    self.state = 1040
                    self.infixFunctionCall() 
                self.state = 1045
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InfixFunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.RangeExpressionContext,i)


        def SimpleName(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SimpleName)
            else:
                return self.getToken(kotlinParser.SimpleName, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_infixFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixFunctionCall" ):
                listener.enterInfixFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixFunctionCall" ):
                listener.exitInfixFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfixFunctionCall" ):
                return visitor.visitInfixFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def infixFunctionCall(self):

        localctx = kotlinParser.InfixFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_infixFunctionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.rangeExpression()
            self.state = 1051
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1047
                    self.match(kotlinParser.SimpleName)
                    self.state = 1048
                    self.rangeExpression() 
                self.state = 1053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RangeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.AdditiveExpressionContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = kotlinParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_rangeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.additiveExpression()
            self.state = 1059
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1055
                    self.match(kotlinParser.RANGE)
                    self.state = 1056
                    self.additiveExpression() 
                self.state = 1061
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.MultiplicativeExpressionContext,i)


        def additiveOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.AdditiveOperationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.AdditiveOperationContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = kotlinParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_additiveExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.multiplicativeExpression()
            self.state = 1068
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1063
                    self.additiveOperation()
                    self.state = 1064
                    self.multiplicativeExpression() 
                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRHS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.TypeRHSContext)
            else:
                return self.getTypedRuleContext(kotlinParser.TypeRHSContext,i)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.MultiplicativeOperationContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = kotlinParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_multiplicativeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.typeRHS()
            self.state = 1077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1072
                    self.multiplicativeOperation()
                    self.state = 1073
                    self.typeRHS() 
                self.state = 1079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.PrefixUnaryExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.PrefixUnaryExpressionContext,i)


        def typeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.TypeOperationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.TypeOperationContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_typeRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRHS" ):
                listener.enterTypeRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRHS" ):
                listener.exitTypeRHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeRHS" ):
                return visitor.visitTypeRHS(self)
            else:
                return visitor.visitChildren(self)




    def typeRHS(self):

        localctx = kotlinParser.TypeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_typeRHS)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.prefixUnaryExpression()
            self.state = 1086
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1081
                    self.typeOperation()
                    self.state = 1082
                    self.prefixUnaryExpression() 
                self.state = 1088
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixUnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(kotlinParser.PostfixUnaryExpressionContext,0)


        def prefixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.PrefixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.PrefixUnaryOperationContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_prefixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryExpression" ):
                listener.enterPrefixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryExpression" ):
                listener.exitPrefixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryExpression" ):
                return visitor.visitPrefixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryExpression(self):

        localctx = kotlinParser.PrefixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_prefixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1089
                    self.prefixUnaryOperation() 
                self.state = 1094
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

            self.state = 1095
            self.postfixUnaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixUnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicExpression(self):
            return self.getTypedRuleContext(kotlinParser.AtomicExpressionContext,0)


        def callSuffix(self):
            return self.getTypedRuleContext(kotlinParser.CallSuffixContext,0)


        def postfixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.PostfixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.PostfixUnaryOperationContext,i)


        def callableReference(self):
            return self.getTypedRuleContext(kotlinParser.CallableReferenceContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_postfixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryExpression" ):
                listener.enterPostfixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryExpression" ):
                listener.exitPostfixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryExpression" ):
                return visitor.visitPostfixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryExpression(self):

        localctx = kotlinParser.PostfixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_postfixUnaryExpression)
        try:
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.atomicExpression()
                self.state = 1098
                self.callSuffix()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.atomicExpression()
                self.state = 1104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,140,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1101
                        self.postfixUnaryOperation() 
                    self.state = 1106
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,140,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1107
                self.callableReference()
                self.state = 1111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1108
                        self.postfixUnaryOperation() 
                    self.state = 1113
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallableReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(kotlinParser.IdentifierContext,0)


        def userType(self):
            return self.getTypedRuleContext(kotlinParser.UserTypeContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(kotlinParser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_callableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallableReference" ):
                listener.enterCallableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallableReference" ):
                listener.exitCallableReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallableReference" ):
                return visitor.visitCallableReference(self)
            else:
                return visitor.visitChildren(self)




    def callableReference(self):

        localctx = kotlinParser.CallableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_callableReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.PACKAGE or _la==kotlinParser.SimpleName:
                self.state = 1116
                self.userType()
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.Q:
                    self.state = 1117
                    self.match(kotlinParser.Q)
                    self.state = 1122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1125
            self.match(kotlinParser.REFERENCE)
            self.state = 1128
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.IMPORT, kotlinParser.ClassModifier_enum, kotlinParser.Declaration_companion, kotlinParser.Declaration_init, kotlinParser.SimpleName]:
                self.state = 1126
                self.identifier()
                pass
            elif token in [kotlinParser.Declaration_class]:
                self.state = 1127
                self.match(kotlinParser.Declaration_class)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
            if la_ == 1:
                self.state = 1130
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleName(self):
            return self.getToken(kotlinParser.SimpleName, 0)

        def ClassModifier_enum(self):
            return self.getToken(kotlinParser.ClassModifier_enum, 0)

        def IMPORT(self):
            return self.getToken(kotlinParser.IMPORT, 0)

        def Declaration_companion(self):
            return self.getToken(kotlinParser.Declaration_companion, 0)

        def Declaration_init(self):
            return self.getToken(kotlinParser.Declaration_init, 0)

        def getRuleIndex(self):
            return kotlinParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = kotlinParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            _la = self._input.LA(1)
            if not(_la==kotlinParser.IMPORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (kotlinParser.ClassModifier_enum - 72)) | (1 << (kotlinParser.Declaration_companion - 72)) | (1 << (kotlinParser.Declaration_init - 72)) | (1 << (kotlinParser.SimpleName - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SINGLE_QUOTE(self):
            return self.getToken(kotlinParser.SINGLE_QUOTE, 0)

        def SINLE_QUOTE_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SINLE_QUOTE_CLOSE)
            else:
                return self.getToken(kotlinParser.SINLE_QUOTE_CLOSE, i)

        def SINLE_QUOTE_ESCAPED_CHAR(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SINLE_QUOTE_ESCAPED_CHAR)
            else:
                return self.getToken(kotlinParser.SINLE_QUOTE_ESCAPED_CHAR, i)

        def SINLE_QUOTE_EXPRESSION_START(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SINLE_QUOTE_EXPRESSION_START)
            else:
                return self.getToken(kotlinParser.SINLE_QUOTE_EXPRESSION_START, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ExpressionContext,i)


        def CLOSE_BLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.CLOSE_BLOCK)
            else:
                return self.getToken(kotlinParser.CLOSE_BLOCK, i)

        def SINGLE_QUOTE_REF(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SINGLE_QUOTE_REF)
            else:
                return self.getToken(kotlinParser.SINGLE_QUOTE_REF, i)

        def TRIPLE_QUOTE(self):
            return self.getToken(kotlinParser.TRIPLE_QUOTE, 0)

        def MULTILINE_QUOTE_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.MULTILINE_QUOTE_CLOSE)
            else:
                return self.getToken(kotlinParser.MULTILINE_QUOTE_CLOSE, i)

        def MULTILINE_QUOTE_EXPRESSION_START(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.MULTILINE_QUOTE_EXPRESSION_START)
            else:
                return self.getToken(kotlinParser.MULTILINE_QUOTE_EXPRESSION_START, i)

        def MULTILINE_QUOTE_REF(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.MULTILINE_QUOTE_REF)
            else:
                return self.getToken(kotlinParser.MULTILINE_QUOTE_REF, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = kotlinParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1162
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.SINGLE_QUOTE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1135
                self.match(kotlinParser.SINGLE_QUOTE)
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.MULTILINE_COMMENT) | (1 << kotlinParser.SINGLELINE_COMMENT) | (1 << kotlinParser.WHITESPACE) | (1 << kotlinParser.IntegerLiteral) | (1 << kotlinParser.SEMI) | (1 << kotlinParser.OPEN_BLOCK) | (1 << kotlinParser.CLOSE_BLOCK) | (1 << kotlinParser.HexadecimalLiteral) | (1 << kotlinParser.CharacterLiteral) | (1 << kotlinParser.TRIPLE_QUOTE) | (1 << kotlinParser.SINGLE_QUOTE) | (1 << kotlinParser.PACKAGE) | (1 << kotlinParser.IMPORT) | (1 << kotlinParser.DOT) | (1 << kotlinParser.STAR) | (1 << kotlinParser.COMMA) | (1 << kotlinParser.LT) | (1 << kotlinParser.LTE) | (1 << kotlinParser.GT) | (1 << kotlinParser.GTE) | (1 << kotlinParser.EQ) | (1 << kotlinParser.EQ_EQ) | (1 << kotlinParser.EQ_EQ_EQ) | (1 << kotlinParser.NEQ) | (1 << kotlinParser.COLON) | (1 << kotlinParser.BRACE_OPEN) | (1 << kotlinParser.BRACE_CLOSE) | (1 << kotlinParser.Q) | (1 << kotlinParser.DA) | (1 << kotlinParser.DISJ) | (1 << kotlinParser.CONJ) | (1 << kotlinParser.ELVIS) | (1 << kotlinParser.LONG_RANGE) | (1 << kotlinParser.RANGE) | (1 << kotlinParser.REFERENCE) | (1 << kotlinParser.TRUE) | (1 << kotlinParser.FALSE) | (1 << kotlinParser.NULL) | (1 << kotlinParser.OP_ASTERISK) | (1 << kotlinParser.OP_DIV) | (1 << kotlinParser.OP_MOD) | (1 << kotlinParser.OP_PLUS) | (1 << kotlinParser.OP_MUNUS) | (1 << kotlinParser.OP_IN) | (1 << kotlinParser.OP_NOT_IN) | (1 << kotlinParser.OP_IS) | (1 << kotlinParser.OP_NOT_IS) | (1 << kotlinParser.OP_AS) | (1 << kotlinParser.OP_AS_SAFE) | (1 << kotlinParser.OP_PLUS_ASSIGN) | (1 << kotlinParser.OP_MINUS_ASSIGN) | (1 << kotlinParser.OP_MULT_ASSIGN) | (1 << kotlinParser.OP_DIV_ASSIGN) | (1 << kotlinParser.OP_MOD_ASSIGN) | (1 << kotlinParser.OP_DECREMENT) | (1 << kotlinParser.OP_INCREMENT) | (1 << kotlinParser.OP_NULL_ASSERT) | (1 << kotlinParser.OP_NOT) | (1 << kotlinParser.SQ_OPEN) | (1 << kotlinParser.SQ_CLOSE) | (1 << kotlinParser.KEYWORD_val) | (1 << kotlinParser.KEYWORD_var) | (1 << kotlinParser.KEYWORD_by))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (kotlinParser.KEYWORD_dynamic - 64)) | (1 << (kotlinParser.KEYWORD_where - 64)) | (1 << (kotlinParser.GET - 64)) | (1 << (kotlinParser.SET - 64)) | (1 << (kotlinParser.HierarchyModifier_abstract - 64)) | (1 << (kotlinParser.HierarchyModifier_open - 64)) | (1 << (kotlinParser.HierarchyModifier_final - 64)) | (1 << (kotlinParser.HierarchyModifier_override - 64)) | (1 << (kotlinParser.ClassModifier_enum - 64)) | (1 << (kotlinParser.ClassModifier_annotation - 64)) | (1 << (kotlinParser.ClassModifier_data - 64)) | (1 << (kotlinParser.AccessModifier_private - 64)) | (1 << (kotlinParser.AccessModifier_protected - 64)) | (1 << (kotlinParser.AccessModifier_public - 64)) | (1 << (kotlinParser.AccessModifier_internal - 64)) | (1 << (kotlinParser.VarianceAnnotation_out - 64)) | (1 << (kotlinParser.DOG - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_file - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_field - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_property - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_param - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_sparam - 64)) | (1 << (kotlinParser.Jump_throw - 64)) | (1 << (kotlinParser.Jump_continue - 64)) | (1 << (kotlinParser.Jump_return - 64)) | (1 << (kotlinParser.Jump_break - 64)) | (1 << (kotlinParser.KEYWORD_constructor - 64)) | (1 << (kotlinParser.ConstructorDelegationCall_this - 64)) | (1 << (kotlinParser.ConstructorDelegationCall_super - 64)) | (1 << (kotlinParser.Declaration_class - 64)) | (1 << (kotlinParser.Declaration_interface - 64)) | (1 << (kotlinParser.Declaration_object - 64)) | (1 << (kotlinParser.Declaration_companion - 64)) | (1 << (kotlinParser.Declaration_fun - 64)) | (1 << (kotlinParser.Declaration_init - 64)) | (1 << (kotlinParser.CF_if - 64)) | (1 << (kotlinParser.CF_else - 64)) | (1 << (kotlinParser.CF_when - 64)) | (1 << (kotlinParser.CF_while - 64)) | (1 << (kotlinParser.CF_for - 64)) | (1 << (kotlinParser.CF_do - 64)) | (1 << (kotlinParser.CF_try - 64)) | (1 << (kotlinParser.CF_catch - 64)) | (1 << (kotlinParser.CF_FINALLY - 64)) | (1 << (kotlinParser.BAX - 64)) | (1 << (kotlinParser.SimpleName - 64)) | (1 << (kotlinParser.SINLE_QUOTE_WHITESPACE - 64)) | (1 << (kotlinParser.SINGLE_TEXT - 64)) | (1 << (kotlinParser.SINLE_QUOTE_ESCAPED_CHAR - 64)) | (1 << (kotlinParser.SINLE_QUOTE_EXPRESSION_START - 64)) | (1 << (kotlinParser.SINGLE_QUOTE_REF - 64)) | (1 << (kotlinParser.MULTILINE_QUOTE_TEXT - 64)) | (1 << (kotlinParser.MULTILINE_QUOTE_CLOSE - 64)) | (1 << (kotlinParser.MULTILINE_QUOTES - 64)) | (1 << (kotlinParser.MULTILINE_QUOTE_EXPRESSION_START - 64)) | (1 << (kotlinParser.MULTILINE_QUOTE_REF - 64)))) != 0):
                    self.state = 1143
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        self.state = 1136
                        self.match(kotlinParser.SINLE_QUOTE_ESCAPED_CHAR)
                        pass

                    elif la_ == 2:
                        self.state = 1137
                        self.match(kotlinParser.SINLE_QUOTE_EXPRESSION_START)
                        self.state = 1138
                        self.expression()
                        self.state = 1139
                        self.match(kotlinParser.CLOSE_BLOCK)
                        pass

                    elif la_ == 3:
                        self.state = 1141
                        self.match(kotlinParser.SINGLE_QUOTE_REF)
                        pass

                    elif la_ == 4:
                        self.state = 1142
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==kotlinParser.SINLE_QUOTE_CLOSE:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass


                    self.state = 1147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1148
                self.match(kotlinParser.SINLE_QUOTE_CLOSE)
                pass
            elif token in [kotlinParser.TRIPLE_QUOTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1149
                self.match(kotlinParser.TRIPLE_QUOTE)
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.MULTILINE_COMMENT) | (1 << kotlinParser.SINGLELINE_COMMENT) | (1 << kotlinParser.WHITESPACE) | (1 << kotlinParser.IntegerLiteral) | (1 << kotlinParser.SEMI) | (1 << kotlinParser.OPEN_BLOCK) | (1 << kotlinParser.CLOSE_BLOCK) | (1 << kotlinParser.HexadecimalLiteral) | (1 << kotlinParser.CharacterLiteral) | (1 << kotlinParser.TRIPLE_QUOTE) | (1 << kotlinParser.SINGLE_QUOTE) | (1 << kotlinParser.PACKAGE) | (1 << kotlinParser.IMPORT) | (1 << kotlinParser.DOT) | (1 << kotlinParser.STAR) | (1 << kotlinParser.COMMA) | (1 << kotlinParser.LT) | (1 << kotlinParser.LTE) | (1 << kotlinParser.GT) | (1 << kotlinParser.GTE) | (1 << kotlinParser.EQ) | (1 << kotlinParser.EQ_EQ) | (1 << kotlinParser.EQ_EQ_EQ) | (1 << kotlinParser.NEQ) | (1 << kotlinParser.COLON) | (1 << kotlinParser.BRACE_OPEN) | (1 << kotlinParser.BRACE_CLOSE) | (1 << kotlinParser.Q) | (1 << kotlinParser.DA) | (1 << kotlinParser.DISJ) | (1 << kotlinParser.CONJ) | (1 << kotlinParser.ELVIS) | (1 << kotlinParser.LONG_RANGE) | (1 << kotlinParser.RANGE) | (1 << kotlinParser.REFERENCE) | (1 << kotlinParser.TRUE) | (1 << kotlinParser.FALSE) | (1 << kotlinParser.NULL) | (1 << kotlinParser.OP_ASTERISK) | (1 << kotlinParser.OP_DIV) | (1 << kotlinParser.OP_MOD) | (1 << kotlinParser.OP_PLUS) | (1 << kotlinParser.OP_MUNUS) | (1 << kotlinParser.OP_IN) | (1 << kotlinParser.OP_NOT_IN) | (1 << kotlinParser.OP_IS) | (1 << kotlinParser.OP_NOT_IS) | (1 << kotlinParser.OP_AS) | (1 << kotlinParser.OP_AS_SAFE) | (1 << kotlinParser.OP_PLUS_ASSIGN) | (1 << kotlinParser.OP_MINUS_ASSIGN) | (1 << kotlinParser.OP_MULT_ASSIGN) | (1 << kotlinParser.OP_DIV_ASSIGN) | (1 << kotlinParser.OP_MOD_ASSIGN) | (1 << kotlinParser.OP_DECREMENT) | (1 << kotlinParser.OP_INCREMENT) | (1 << kotlinParser.OP_NULL_ASSERT) | (1 << kotlinParser.OP_NOT) | (1 << kotlinParser.SQ_OPEN) | (1 << kotlinParser.SQ_CLOSE) | (1 << kotlinParser.KEYWORD_val) | (1 << kotlinParser.KEYWORD_var) | (1 << kotlinParser.KEYWORD_by))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (kotlinParser.KEYWORD_dynamic - 64)) | (1 << (kotlinParser.KEYWORD_where - 64)) | (1 << (kotlinParser.GET - 64)) | (1 << (kotlinParser.SET - 64)) | (1 << (kotlinParser.HierarchyModifier_abstract - 64)) | (1 << (kotlinParser.HierarchyModifier_open - 64)) | (1 << (kotlinParser.HierarchyModifier_final - 64)) | (1 << (kotlinParser.HierarchyModifier_override - 64)) | (1 << (kotlinParser.ClassModifier_enum - 64)) | (1 << (kotlinParser.ClassModifier_annotation - 64)) | (1 << (kotlinParser.ClassModifier_data - 64)) | (1 << (kotlinParser.AccessModifier_private - 64)) | (1 << (kotlinParser.AccessModifier_protected - 64)) | (1 << (kotlinParser.AccessModifier_public - 64)) | (1 << (kotlinParser.AccessModifier_internal - 64)) | (1 << (kotlinParser.VarianceAnnotation_out - 64)) | (1 << (kotlinParser.DOG - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_file - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_field - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_property - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_param - 64)) | (1 << (kotlinParser.AnnotationUseSiteTarget_sparam - 64)) | (1 << (kotlinParser.Jump_throw - 64)) | (1 << (kotlinParser.Jump_continue - 64)) | (1 << (kotlinParser.Jump_return - 64)) | (1 << (kotlinParser.Jump_break - 64)) | (1 << (kotlinParser.KEYWORD_constructor - 64)) | (1 << (kotlinParser.ConstructorDelegationCall_this - 64)) | (1 << (kotlinParser.ConstructorDelegationCall_super - 64)) | (1 << (kotlinParser.Declaration_class - 64)) | (1 << (kotlinParser.Declaration_interface - 64)) | (1 << (kotlinParser.Declaration_object - 64)) | (1 << (kotlinParser.Declaration_companion - 64)) | (1 << (kotlinParser.Declaration_fun - 64)) | (1 << (kotlinParser.Declaration_init - 64)) | (1 << (kotlinParser.CF_if - 64)) | (1 << (kotlinParser.CF_else - 64)) | (1 << (kotlinParser.CF_when - 64)) | (1 << (kotlinParser.CF_while - 64)) | (1 << (kotlinParser.CF_for - 64)) | (1 << (kotlinParser.CF_do - 64)) | (1 << (kotlinParser.CF_try - 64)) | (1 << (kotlinParser.CF_catch - 64)) | (1 << (kotlinParser.CF_FINALLY - 64)) | (1 << (kotlinParser.BAX - 64)) | (1 << (kotlinParser.SimpleName - 64)) | (1 << (kotlinParser.SINLE_QUOTE_WHITESPACE - 64)) | (1 << (kotlinParser.SINGLE_TEXT - 64)) | (1 << (kotlinParser.SINLE_QUOTE_CLOSE - 64)) | (1 << (kotlinParser.SINLE_QUOTE_ESCAPED_CHAR - 64)) | (1 << (kotlinParser.SINLE_QUOTE_EXPRESSION_START - 64)) | (1 << (kotlinParser.SINGLE_QUOTE_REF - 64)) | (1 << (kotlinParser.MULTILINE_QUOTE_TEXT - 64)) | (1 << (kotlinParser.MULTILINE_QUOTES - 64)) | (1 << (kotlinParser.MULTILINE_QUOTE_EXPRESSION_START - 64)) | (1 << (kotlinParser.MULTILINE_QUOTE_REF - 64)))) != 0):
                    self.state = 1156
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1150
                        self.match(kotlinParser.MULTILINE_QUOTE_EXPRESSION_START)
                        self.state = 1151
                        self.expression()
                        self.state = 1152
                        self.match(kotlinParser.CLOSE_BLOCK)
                        pass

                    elif la_ == 2:
                        self.state = 1154
                        self.match(kotlinParser.MULTILINE_QUOTE_REF)
                        pass

                    elif la_ == 3:
                        self.state = 1155
                        _la = self._input.LA(1)
                        if _la <= 0 or _la==kotlinParser.MULTILINE_QUOTE_CLOSE:
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass


                    self.state = 1160
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1161
                self.match(kotlinParser.MULTILINE_QUOTE_CLOSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def literalConstant(self):
            return self.getTypedRuleContext(kotlinParser.LiteralConstantContext,0)


        def functionLiteral(self):
            return self.getTypedRuleContext(kotlinParser.FunctionLiteralContext,0)


        def labelReference(self):
            return self.getTypedRuleContext(kotlinParser.LabelReferenceContext,0)


        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def ifExpression(self):
            return self.getTypedRuleContext(kotlinParser.IfExpressionContext,0)


        def when(self):
            return self.getTypedRuleContext(kotlinParser.WhenContext,0)


        def tryExpression(self):
            return self.getTypedRuleContext(kotlinParser.TryExpressionContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(kotlinParser.ObjectLiteralContext,0)


        def jump(self):
            return self.getTypedRuleContext(kotlinParser.JumpContext,0)


        def loop(self):
            return self.getTypedRuleContext(kotlinParser.LoopContext,0)


        def identifier(self):
            return self.getTypedRuleContext(kotlinParser.IdentifierContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_atomicExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicExpression" ):
                listener.enterAtomicExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicExpression" ):
                listener.exitAtomicExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicExpression" ):
                return visitor.visitAtomicExpression(self)
            else:
                return visitor.visitChildren(self)




    def atomicExpression(self):

        localctx = kotlinParser.AtomicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_atomicExpression)
        try:
            self.state = 1194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.BRACE_OPEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self.match(kotlinParser.BRACE_OPEN)
                self.state = 1165
                self.expression()
                self.state = 1166
                self.match(kotlinParser.BRACE_CLOSE)
                pass
            elif token in [kotlinParser.IntegerLiteral, kotlinParser.HexadecimalLiteral, kotlinParser.CharacterLiteral, kotlinParser.TRIPLE_QUOTE, kotlinParser.SINGLE_QUOTE, kotlinParser.TRUE, kotlinParser.FALSE, kotlinParser.NULL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1168
                self.literalConstant()
                pass
            elif token in [kotlinParser.OPEN_BLOCK]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1169
                self.functionLiteral()
                pass
            elif token in [kotlinParser.ConstructorDelegationCall_this]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1170
                self.match(kotlinParser.ConstructorDelegationCall_this)
                self.state = 1172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 1171
                    self.labelReference()


                pass
            elif token in [kotlinParser.ConstructorDelegationCall_super]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1174
                self.match(kotlinParser.ConstructorDelegationCall_super)
                self.state = 1179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1175
                    self.match(kotlinParser.LT)
                    self.state = 1176
                    self.type_()
                    self.state = 1177
                    self.match(kotlinParser.GT)


                self.state = 1182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                if la_ == 1:
                    self.state = 1181
                    self.labelReference()


                pass
            elif token in [kotlinParser.CF_if]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1184
                self.ifExpression()
                pass
            elif token in [kotlinParser.CF_when]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1185
                self.when()
                pass
            elif token in [kotlinParser.CF_try]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1186
                self.tryExpression()
                pass
            elif token in [kotlinParser.Declaration_object]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1187
                self.objectLiteral()
                pass
            elif token in [kotlinParser.Jump_throw, kotlinParser.Jump_continue, kotlinParser.Jump_return, kotlinParser.Jump_break]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1188
                self.jump()
                pass
            elif token in [kotlinParser.CF_while, kotlinParser.CF_for, kotlinParser.CF_do]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1189
                self.loop()
                pass
            elif token in [kotlinParser.IMPORT, kotlinParser.ClassModifier_enum, kotlinParser.Declaration_companion, kotlinParser.Declaration_init, kotlinParser.SimpleName]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1190
                self.identifier()
                pass
            elif token in [kotlinParser.BAX]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1191
                self.match(kotlinParser.BAX)
                self.state = 1192
                self.identifier()
                pass
            elif token in [kotlinParser.PACKAGE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1193
                self.match(kotlinParser.PACKAGE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(kotlinParser.StringLiteralContext,0)


        def IntegerLiteral(self):
            return self.getToken(kotlinParser.IntegerLiteral, 0)

        def HexadecimalLiteral(self):
            return self.getToken(kotlinParser.HexadecimalLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(kotlinParser.CharacterLiteral, 0)

        def getRuleIndex(self):
            return kotlinParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralConstant" ):
                return visitor.visitLiteralConstant(self)
            else:
                return visitor.visitChildren(self)




    def literalConstant(self):

        localctx = kotlinParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_literalConstant)
        try:
            self.state = 1203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.TRUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1196
                self.match(kotlinParser.TRUE)
                pass
            elif token in [kotlinParser.FALSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1197
                self.match(kotlinParser.FALSE)
                pass
            elif token in [kotlinParser.TRIPLE_QUOTE, kotlinParser.SINGLE_QUOTE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1198
                self.stringLiteral()
                pass
            elif token in [kotlinParser.IntegerLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1199
                self.match(kotlinParser.IntegerLiteral)
                pass
            elif token in [kotlinParser.HexadecimalLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1200
                self.match(kotlinParser.HexadecimalLiteral)
                pass
            elif token in [kotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1201
                self.match(kotlinParser.CharacterLiteral)
                pass
            elif token in [kotlinParser.NULL]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1202
                self.match(kotlinParser.NULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.PropertyDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.ClassDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(kotlinParser.ObjectDeclarationContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = kotlinParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_declaration)
        try:
            self.state = 1209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1205
                self.functionDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1206
                self.propertyDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1207
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1208
                self.objectDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(kotlinParser.DeclarationContext,0)


        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = kotlinParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_statement)
        try:
            self.state = 1213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1211
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1212
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOperation" ):
                return visitor.visitMultiplicativeOperation(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeOperation(self):

        localctx = kotlinParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.STAR) | (1 << kotlinParser.OP_DIV) | (1 << kotlinParser.OP_MOD))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdditiveOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_additiveOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperation" ):
                listener.enterAdditiveOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperation" ):
                listener.exitAdditiveOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOperation" ):
                return visitor.visitAdditiveOperation(self)
            else:
                return visitor.visitChildren(self)




    def additiveOperation(self):

        localctx = kotlinParser.AdditiveOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_additiveOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            _la = self._input.LA(1)
            if not(_la==kotlinParser.OP_PLUS or _la==kotlinParser.OP_MUNUS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_IN(self):
            return self.getToken(kotlinParser.OP_IN, 0)

        def getRuleIndex(self):
            return kotlinParser.RULE_inOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInOperation" ):
                listener.enterInOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInOperation" ):
                listener.exitInOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInOperation" ):
                return visitor.visitInOperation(self)
            else:
                return visitor.visitChildren(self)




    def inOperation(self):

        localctx = kotlinParser.InOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_inOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            _la = self._input.LA(1)
            if not(_la==kotlinParser.OP_IN or _la==kotlinParser.OP_NOT_IN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OP_AS(self):
            return self.getToken(kotlinParser.OP_AS, 0)

        def getRuleIndex(self):
            return kotlinParser.RULE_typeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOperation" ):
                listener.enterTypeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOperation" ):
                listener.exitTypeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeOperation" ):
                return visitor.visitTypeOperation(self)
            else:
                return visitor.visitChildren(self)




    def typeOperation(self):

        localctx = kotlinParser.TypeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_typeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.COLON) | (1 << kotlinParser.OP_AS) | (1 << kotlinParser.OP_AS_SAFE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IsOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_isOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOperation" ):
                listener.enterIsOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOperation" ):
                listener.exitIsOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsOperation" ):
                return visitor.visitIsOperation(self)
            else:
                return visitor.visitChildren(self)




    def isOperation(self):

        localctx = kotlinParser.IsOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_isOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            _la = self._input.LA(1)
            if not(_la==kotlinParser.OP_IS or _la==kotlinParser.OP_NOT_IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_comparisonOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperation" ):
                listener.enterComparisonOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperation" ):
                listener.exitComparisonOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperation" ):
                return visitor.visitComparisonOperation(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperation(self):

        localctx = kotlinParser.ComparisonOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_comparisonOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.LT) | (1 << kotlinParser.LTE) | (1 << kotlinParser.GT) | (1 << kotlinParser.GTE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EqualityOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_equalityOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperation" ):
                listener.enterEqualityOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperation" ):
                listener.exitEqualityOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOperation" ):
                return visitor.visitEqualityOperation(self)
            else:
                return visitor.visitChildren(self)




    def equalityOperation(self):

        localctx = kotlinParser.EqualityOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_equalityOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            _la = self._input.LA(1)
            if not(_la==kotlinParser.EQ_EQ or _la==kotlinParser.NEQ):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = kotlinParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1229
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.EQ) | (1 << kotlinParser.OP_PLUS_ASSIGN) | (1 << kotlinParser.OP_MINUS_ASSIGN) | (1 << kotlinParser.OP_MULT_ASSIGN) | (1 << kotlinParser.OP_DIV_ASSIGN) | (1 << kotlinParser.OP_MOD_ASSIGN))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrefixUnaryOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self):
            return self.getTypedRuleContext(kotlinParser.AnnotationsContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(kotlinParser.LabelDefinitionContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_prefixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryOperation" ):
                listener.enterPrefixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryOperation" ):
                listener.exitPrefixUnaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryOperation" ):
                return visitor.visitPrefixUnaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryOperation(self):

        localctx = kotlinParser.PrefixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_prefixUnaryOperation)
        try:
            self.state = 1238
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.OP_MUNUS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1231
                self.match(kotlinParser.OP_MUNUS)
                pass
            elif token in [kotlinParser.OP_PLUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1232
                self.match(kotlinParser.OP_PLUS)
                pass
            elif token in [kotlinParser.OP_INCREMENT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1233
                self.match(kotlinParser.OP_INCREMENT)
                pass
            elif token in [kotlinParser.OP_DECREMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1234
                self.match(kotlinParser.OP_DECREMENT)
                pass
            elif token in [kotlinParser.OP_NOT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1235
                self.match(kotlinParser.OP_NOT)
                pass
            elif token in [kotlinParser.DOG]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1236
                self.annotations()
                pass
            elif token in [kotlinParser.IMPORT, kotlinParser.ClassModifier_enum, kotlinParser.Declaration_companion, kotlinParser.Declaration_init, kotlinParser.SimpleName]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1237
                self.labelDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixUnaryOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def callSuffix(self):
            return self.getTypedRuleContext(kotlinParser.CallSuffixContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(kotlinParser.ArrayAccessContext,0)


        def memberAccessOperation(self):
            return self.getTypedRuleContext(kotlinParser.MemberAccessOperationContext,0)


        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(kotlinParser.PostfixUnaryExpressionContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_postfixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryOperation" ):
                listener.enterPostfixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryOperation" ):
                listener.exitPostfixUnaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryOperation" ):
                return visitor.visitPostfixUnaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryOperation(self):

        localctx = kotlinParser.PostfixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_postfixUnaryOperation)
        try:
            self.state = 1248
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.OP_INCREMENT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1240
                self.match(kotlinParser.OP_INCREMENT)
                pass
            elif token in [kotlinParser.OP_DECREMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1241
                self.match(kotlinParser.OP_DECREMENT)
                pass
            elif token in [kotlinParser.OP_NULL_ASSERT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1242
                self.match(kotlinParser.OP_NULL_ASSERT)
                pass
            elif token in [kotlinParser.OPEN_BLOCK, kotlinParser.IMPORT, kotlinParser.LT, kotlinParser.BRACE_OPEN, kotlinParser.ClassModifier_enum, kotlinParser.DOG, kotlinParser.Declaration_companion, kotlinParser.Declaration_init, kotlinParser.SimpleName]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1243
                self.callSuffix()
                pass
            elif token in [kotlinParser.SQ_OPEN]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1244
                self.arrayAccess()
                pass
            elif token in [kotlinParser.DOT, kotlinParser.Q]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1245
                self.memberAccessOperation()
                self.state = 1246
                self.postfixUnaryExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnnotatedLambdaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionLiteral(self):
            return self.getTypedRuleContext(kotlinParser.FunctionLiteralContext,0)


        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(kotlinParser.UnescapedAnnotationContext,i)


        def labelDefinition(self):
            return self.getTypedRuleContext(kotlinParser.LabelDefinitionContext,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_annotatedLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedLambda" ):
                listener.enterAnnotatedLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedLambda" ):
                listener.exitAnnotatedLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotatedLambda" ):
                return visitor.visitAnnotatedLambda(self)
            else:
                return visitor.visitChildren(self)




    def annotatedLambda(self):

        localctx = kotlinParser.AnnotatedLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_annotatedLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==kotlinParser.DOG:
                self.state = 1250
                self.match(kotlinParser.DOG)
                self.state = 1251
                self.unescapedAnnotation()
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.IMPORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (kotlinParser.ClassModifier_enum - 72)) | (1 << (kotlinParser.Declaration_companion - 72)) | (1 << (kotlinParser.Declaration_init - 72)) | (1 << (kotlinParser.SimpleName - 72)))) != 0):
                self.state = 1257
                self.labelDefinition()


            self.state = 1260
            self.functionLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemberAccessOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return kotlinParser.RULE_memberAccessOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessOperation" ):
                listener.enterMemberAccessOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessOperation" ):
                listener.exitMemberAccessOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessOperation" ):
                return visitor.visitMemberAccessOperation(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessOperation(self):

        localctx = kotlinParser.MemberAccessOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_memberAccessOperation)
        self._la = 0 # Token type
        try:
            self.state = 1267
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.DOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1262
                self.match(kotlinParser.DOT)
                pass
            elif token in [kotlinParser.Q]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1263
                self.match(kotlinParser.Q)
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==kotlinParser.DOT:
                    self.state = 1264
                    self.match(kotlinParser.DOT)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(kotlinParser.StatementsContext,0)


        def modifiers(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ModifiersContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ModifiersContext,i)


        def SimpleName(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SimpleName)
            else:
                return self.getToken(kotlinParser.SimpleName, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_functionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLiteral" ):
                listener.enterFunctionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLiteral" ):
                listener.exitFunctionLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionLiteral" ):
                return visitor.visitFunctionLiteral(self)
            else:
                return visitor.visitChildren(self)




    def functionLiteral(self):

        localctx = kotlinParser.FunctionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_functionLiteral)
        self._la = 0 # Token type
        try:
            self.state = 1292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.match(kotlinParser.OPEN_BLOCK)
                self.state = 1270
                self.statements()
                self.state = 1271
                self.match(kotlinParser.CLOSE_BLOCK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1273
                self.match(kotlinParser.OPEN_BLOCK)
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==kotlinParser.OP_IN or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (kotlinParser.HierarchyModifier_abstract - 68)) | (1 << (kotlinParser.HierarchyModifier_open - 68)) | (1 << (kotlinParser.HierarchyModifier_final - 68)) | (1 << (kotlinParser.HierarchyModifier_override - 68)) | (1 << (kotlinParser.ClassModifier_enum - 68)) | (1 << (kotlinParser.ClassModifier_annotation - 68)) | (1 << (kotlinParser.ClassModifier_data - 68)) | (1 << (kotlinParser.AccessModifier_private - 68)) | (1 << (kotlinParser.AccessModifier_protected - 68)) | (1 << (kotlinParser.AccessModifier_public - 68)) | (1 << (kotlinParser.AccessModifier_internal - 68)) | (1 << (kotlinParser.VarianceAnnotation_out - 68)) | (1 << (kotlinParser.DOG - 68)) | (1 << (kotlinParser.SimpleName - 68)))) != 0):
                    self.state = 1274
                    self.modifiers()
                    self.state = 1275
                    self.match(kotlinParser.SimpleName)
                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==kotlinParser.COMMA:
                        self.state = 1277
                        self.match(kotlinParser.COMMA)
                        self.state = 1278
                        self.modifiers()
                        self.state = 1279
                        self.match(kotlinParser.SimpleName)
                        self.state = 1285
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1288
                self.match(kotlinParser.OP_ASTERISK)
                self.state = 1289
                self.statements()
                self.state = 1290
                self.match(kotlinParser.CLOSE_BLOCK)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArrayAccessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.ExpressionContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayAccess" ):
                return visitor.visitArrayAccess(self)
            else:
                return visitor.visitChildren(self)




    def arrayAccess(self):

        localctx = kotlinParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_arrayAccess)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(kotlinParser.SQ_OPEN)
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.IntegerLiteral) | (1 << kotlinParser.OPEN_BLOCK) | (1 << kotlinParser.HexadecimalLiteral) | (1 << kotlinParser.CharacterLiteral) | (1 << kotlinParser.TRIPLE_QUOTE) | (1 << kotlinParser.SINGLE_QUOTE) | (1 << kotlinParser.PACKAGE) | (1 << kotlinParser.IMPORT) | (1 << kotlinParser.BRACE_OPEN) | (1 << kotlinParser.REFERENCE) | (1 << kotlinParser.TRUE) | (1 << kotlinParser.FALSE) | (1 << kotlinParser.NULL) | (1 << kotlinParser.OP_PLUS) | (1 << kotlinParser.OP_MUNUS) | (1 << kotlinParser.OP_DECREMENT) | (1 << kotlinParser.OP_INCREMENT) | (1 << kotlinParser.OP_NOT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (kotlinParser.ClassModifier_enum - 72)) | (1 << (kotlinParser.DOG - 72)) | (1 << (kotlinParser.Jump_throw - 72)) | (1 << (kotlinParser.Jump_continue - 72)) | (1 << (kotlinParser.Jump_return - 72)) | (1 << (kotlinParser.Jump_break - 72)) | (1 << (kotlinParser.ConstructorDelegationCall_this - 72)) | (1 << (kotlinParser.ConstructorDelegationCall_super - 72)) | (1 << (kotlinParser.Declaration_object - 72)) | (1 << (kotlinParser.Declaration_companion - 72)) | (1 << (kotlinParser.Declaration_init - 72)) | (1 << (kotlinParser.CF_if - 72)) | (1 << (kotlinParser.CF_when - 72)) | (1 << (kotlinParser.CF_while - 72)) | (1 << (kotlinParser.CF_for - 72)) | (1 << (kotlinParser.CF_do - 72)) | (1 << (kotlinParser.CF_try - 72)) | (1 << (kotlinParser.BAX - 72)) | (1 << (kotlinParser.SimpleName - 72)))) != 0):
                self.state = 1295
                self.expression()
                self.state = 1300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 1296
                    self.match(kotlinParser.COMMA)
                    self.state = 1297
                    self.expression()
                    self.state = 1302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1305
            self.match(kotlinParser.SQ_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classBody(self):
            return self.getTypedRuleContext(kotlinParser.ClassBodyContext,0)


        def delegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.DelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(kotlinParser.DelegationSpecifierContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteral" ):
                return visitor.visitObjectLiteral(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteral(self):

        localctx = kotlinParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_objectLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.match(kotlinParser.Declaration_object)
            self.state = 1317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1308
                self.match(kotlinParser.COLON)
                self.state = 1309
                self.delegationSpecifier()
                self.state = 1314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1310
                        self.match(kotlinParser.COMMA)
                        self.state = 1311
                        self.delegationSpecifier() 
                    self.state = 1316
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)



            self.state = 1319
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def whenEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.WhenEntryContext)
            else:
                return self.getTypedRuleContext(kotlinParser.WhenEntryContext,i)


        def getRuleIndex(self):
            return kotlinParser.RULE_when

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhen" ):
                listener.enterWhen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhen" ):
                listener.exitWhen(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhen" ):
                return visitor.visitWhen(self)
            else:
                return visitor.visitChildren(self)




    def when(self):

        localctx = kotlinParser.WhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_when)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(kotlinParser.CF_when)
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==kotlinParser.BRACE_OPEN:
                self.state = 1322
                self.match(kotlinParser.BRACE_OPEN)
                self.state = 1323
                self.expression()
                self.state = 1324
                self.match(kotlinParser.BRACE_CLOSE)


            self.state = 1328
            self.match(kotlinParser.OPEN_BLOCK)
            self.state = 1332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << kotlinParser.IntegerLiteral) | (1 << kotlinParser.OPEN_BLOCK) | (1 << kotlinParser.HexadecimalLiteral) | (1 << kotlinParser.CharacterLiteral) | (1 << kotlinParser.TRIPLE_QUOTE) | (1 << kotlinParser.SINGLE_QUOTE) | (1 << kotlinParser.PACKAGE) | (1 << kotlinParser.IMPORT) | (1 << kotlinParser.BRACE_OPEN) | (1 << kotlinParser.REFERENCE) | (1 << kotlinParser.TRUE) | (1 << kotlinParser.FALSE) | (1 << kotlinParser.NULL) | (1 << kotlinParser.OP_PLUS) | (1 << kotlinParser.OP_MUNUS) | (1 << kotlinParser.OP_IN) | (1 << kotlinParser.OP_NOT_IN) | (1 << kotlinParser.OP_IS) | (1 << kotlinParser.OP_NOT_IS) | (1 << kotlinParser.OP_DECREMENT) | (1 << kotlinParser.OP_INCREMENT) | (1 << kotlinParser.OP_NOT))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (kotlinParser.ClassModifier_enum - 72)) | (1 << (kotlinParser.DOG - 72)) | (1 << (kotlinParser.Jump_throw - 72)) | (1 << (kotlinParser.Jump_continue - 72)) | (1 << (kotlinParser.Jump_return - 72)) | (1 << (kotlinParser.Jump_break - 72)) | (1 << (kotlinParser.ConstructorDelegationCall_this - 72)) | (1 << (kotlinParser.ConstructorDelegationCall_super - 72)) | (1 << (kotlinParser.Declaration_object - 72)) | (1 << (kotlinParser.Declaration_companion - 72)) | (1 << (kotlinParser.Declaration_init - 72)) | (1 << (kotlinParser.CF_if - 72)) | (1 << (kotlinParser.CF_else - 72)) | (1 << (kotlinParser.CF_when - 72)) | (1 << (kotlinParser.CF_while - 72)) | (1 << (kotlinParser.CF_for - 72)) | (1 << (kotlinParser.CF_do - 72)) | (1 << (kotlinParser.CF_try - 72)) | (1 << (kotlinParser.BAX - 72)) | (1 << (kotlinParser.SimpleName - 72)))) != 0):
                self.state = 1329
                self.whenEntry()
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1335
            self.match(kotlinParser.CLOSE_BLOCK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenEntryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(kotlinParser.WhenConditionContext)
            else:
                return self.getTypedRuleContext(kotlinParser.WhenConditionContext,i)


        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(kotlinParser.SEMI)
            else:
                return self.getToken(kotlinParser.SEMI, i)

        def getRuleIndex(self):
            return kotlinParser.RULE_whenEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenEntry" ):
                listener.enterWhenEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenEntry" ):
                listener.exitWhenEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenEntry" ):
                return visitor.visitWhenEntry(self)
            else:
                return visitor.visitChildren(self)




    def whenEntry(self):

        localctx = kotlinParser.WhenEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_whenEntry)
        self._la = 0 # Token type
        try:
            self.state = 1362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.IntegerLiteral, kotlinParser.OPEN_BLOCK, kotlinParser.HexadecimalLiteral, kotlinParser.CharacterLiteral, kotlinParser.TRIPLE_QUOTE, kotlinParser.SINGLE_QUOTE, kotlinParser.PACKAGE, kotlinParser.IMPORT, kotlinParser.BRACE_OPEN, kotlinParser.REFERENCE, kotlinParser.TRUE, kotlinParser.FALSE, kotlinParser.NULL, kotlinParser.OP_PLUS, kotlinParser.OP_MUNUS, kotlinParser.OP_IN, kotlinParser.OP_NOT_IN, kotlinParser.OP_IS, kotlinParser.OP_NOT_IS, kotlinParser.OP_DECREMENT, kotlinParser.OP_INCREMENT, kotlinParser.OP_NOT, kotlinParser.ClassModifier_enum, kotlinParser.DOG, kotlinParser.Jump_throw, kotlinParser.Jump_continue, kotlinParser.Jump_return, kotlinParser.Jump_break, kotlinParser.ConstructorDelegationCall_this, kotlinParser.ConstructorDelegationCall_super, kotlinParser.Declaration_object, kotlinParser.Declaration_companion, kotlinParser.Declaration_init, kotlinParser.CF_if, kotlinParser.CF_when, kotlinParser.CF_while, kotlinParser.CF_for, kotlinParser.CF_do, kotlinParser.CF_try, kotlinParser.BAX, kotlinParser.SimpleName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1337
                self.whenCondition()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.COMMA:
                    self.state = 1338
                    self.match(kotlinParser.COMMA)
                    self.state = 1339
                    self.whenCondition()
                    self.state = 1344
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1345
                self.match(kotlinParser.OP_ASTERISK)
                self.state = 1346
                self.expression()
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.SEMI:
                    self.state = 1347
                    self.match(kotlinParser.SEMI)
                    self.state = 1352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [kotlinParser.CF_else]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.match(kotlinParser.CF_else)
                self.state = 1354
                self.match(kotlinParser.OP_ASTERISK)
                self.state = 1355
                self.expression()
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==kotlinParser.SEMI:
                    self.state = 1356
                    self.match(kotlinParser.SEMI)
                    self.state = 1361
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhenConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(kotlinParser.ExpressionContext,0)


        def type_(self):
            return self.getTypedRuleContext(kotlinParser.Type_Context,0)


        def getRuleIndex(self):
            return kotlinParser.RULE_whenCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenCondition" ):
                listener.enterWhenCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenCondition" ):
                listener.exitWhenCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenCondition" ):
                return visitor.visitWhenCondition(self)
            else:
                return visitor.visitChildren(self)




    def whenCondition(self):

        localctx = kotlinParser.WhenConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_whenCondition)
        self._la = 0 # Token type
        try:
            self.state = 1369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [kotlinParser.IntegerLiteral, kotlinParser.OPEN_BLOCK, kotlinParser.HexadecimalLiteral, kotlinParser.CharacterLiteral, kotlinParser.TRIPLE_QUOTE, kotlinParser.SINGLE_QUOTE, kotlinParser.PACKAGE, kotlinParser.IMPORT, kotlinParser.BRACE_OPEN, kotlinParser.REFERENCE, kotlinParser.TRUE, kotlinParser.FALSE, kotlinParser.NULL, kotlinParser.OP_PLUS, kotlinParser.OP_MUNUS, kotlinParser.OP_DECREMENT, kotlinParser.OP_INCREMENT, kotlinParser.OP_NOT, kotlinParser.ClassModifier_enum, kotlinParser.DOG, kotlinParser.Jump_throw, kotlinParser.Jump_continue, kotlinParser.Jump_return, kotlinParser.Jump_break, kotlinParser.ConstructorDelegationCall_this, kotlinParser.ConstructorDelegationCall_super, kotlinParser.Declaration_object, kotlinParser.Declaration_companion, kotlinParser.Declaration_init, kotlinParser.CF_if, kotlinParser.CF_when, kotlinParser.CF_while, kotlinParser.CF_for, kotlinParser.CF_do, kotlinParser.CF_try, kotlinParser.BAX, kotlinParser.SimpleName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.expression()
                pass
            elif token in [kotlinParser.OP_IN, kotlinParser.OP_NOT_IN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1365
                _la = self._input.LA(1)
                if not(_la==kotlinParser.OP_IN or _la==kotlinParser.OP_NOT_IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1366
                self.expression()
                pass
            elif token in [kotlinParser.OP_IS, kotlinParser.OP_NOT_IS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1367
                _la = self._input.LA(1)
                if not(_la==kotlinParser.OP_IS or _la==kotlinParser.OP_NOT_IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1368
                self.type_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





