{%- macro gen_block(block) -%}
    {%- filter indent(4, True) -%}
        {% for line in block %}
            {% if line is block %}
                {{- ":" ~ gen_block(line) -}}
            {% else %}
                {{- "\n" ~ line -}}
            {%- endif %}
        {% endfor %}
    {%- endfilter -%}
{%- endmacro -%}

{%- macro gen_method(method) -%}
    {%- if method is abstract -%}
        {{ "@abc.abstractmethod" ~ "\n" }}
    {%- endif -%}
    def {{ method|name }}(self
        {%- for arg in method.arguments -%}
            , {{ arg|name }}
            {%- if arg.default is not none -%}={{ arg.default }}{%- endif -%}
        {%- endfor -%}):
    {{- gen_block(method.body) }}
{%- endmacro -%}

{%- macro gen_function(func) -%}
    def {{ func.name }}(
        {%- set comma = joiner(",") -%}
        {%- for arg in func.arguments -%}
            {{ comma() }}{{ arg|name }}
            {%- if arg.default is not none -%}={{ arg.default }}{%- endif -%}
        {%- endfor -%}):
    {{- gen_block(func.body) }}
{%- endmacro -%}

{# No idea how to align text to left, so leave it stick to the side here #}
{%- macro gen_property(field) -%}
@property
@abc.abstractmethod
def {{ field|name }}(self):
    pass
{%- endmacro -%}

{%- macro gen_init(init, cls) -%}
    def __init__(self
        {%- for arg in init.arguments -%}
            , {{ arg|name }}
            {%- if arg.default is not none -%}={{ arg.default }}{%- endif -%}
        {%- endfor -%}
        , *args, **kwargs):
    {% filter indent(4, True) -%}
        {%- if cls is not object_derived -%}
            super({{ cls|name }}, self).__init__(*args, **kwargs)
        {% endif %}
        {% for arg in cls.fields -%}
            {%- if arg.default is not none -%}
                self.{{arg|name}} = {{arg.default ~ "\n"}}
            {%- endif -%}
        {%- endfor %}
        {% for arg in init.arguments -%}
            self.{{arg|name}} = {{arg|name ~ "\n"}}
        {%- endfor %}
    {% endfilter %}
    {{- gen_block(init.body) -}}
{%- endmacro -%}

{%- macro gen_class(class_) -%}
    class {{ class_|name }}(
        {%- set comma = joiner(",") -%}
        {%- for cls in class_.parents -%}{{ comma() }}{{ cls|name }}{%- endfor -%}
    ):
        {% filter  indent(4, True) -%}
            {{ gen_init(class_.constructor, class_) ~ '\n' }}
            {% for prop in class_.fields|select("abstract") -%}
                {{ gen_property(prop) ~ '\n'}}
            {% endfor %}
            {% for method in class_.methods -%}
                {{ gen_method(method) ~ '\n'}}
            {% endfor %}
            {% if mangled is defined -%}
                __mangled__ = {{ mangled() }}
            {% endif -%}
        {% endfilter %}
{%- endmacro -%}

{% if has_abstract %}{{ "import abc" ~ '\n\n' }}{% endif %}

{%- for cls in classes -%}
    {{ gen_class(cls) ~ '\n'}}
{% endfor %}

{%- for f in functions -%}
    {{ gen_function(f) ~ '\n' }}
{% endfor %}