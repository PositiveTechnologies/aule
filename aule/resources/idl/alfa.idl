interface Node {
}

interface Statement <: Node { 
}

interface Expression <: Node { 
}

interface Keyword <: Node {
}

interface Script <: Statement {
    body: [Statement];
}

interface NameSpaceDeclaration <: Statement {
    name: str;
    body: [Statement];
}

interface PolicySetDeclaration <: Statement {
    name: str;
    algorithm: ApplyStatement;
    target: TargetStatement;
    references: [Identifier];
    policies: [PolicyDeclaration];
    policysets: [PolicySetDeclaration];
    modifiers: [Keyword];
}

interface PolicyDeclaration <: Statement {
    name: str;
    algorithm: ApplyStatement;
    target: TargetStatement;
    rules: [RuleDeclaration];
    modifiers: [Keyword];
}

interface RuleDeclaration <: Statement {
    name: str;
    effect: EffectStatement;
    target: TargetStatement;
}

interface ApplyStatement <: Statement {
    value: str;
}

interface EffectStatement <: Statement {
    value: str;
}

interface TargetStatement <: Statement {
    clauses: [Expression];
}

interface AttributeAccessExpression <: Expression {
    expression: Expression;
    name: str;
}

interface AnyExpression <: Expression {
    left: ArrayExpression | AttributeAccessExpression;
    right: ArrayExpression | AttributeAccessExpression;
}

interface ArrayExpression <: Expression {
    elements: [Expression];
}

interface Identifier <: Expression {
    name: str;
}

interface LiteralString <: Expression {
    value: str;
}

interface LiteralNumeric <: Expression {
    value: str;
}

interface LiteralBoolean <: Expression {
    value: str;
}

interface BinaryExpression <: Expression {
    operator: str;
    left: Expression;
    right: Expression;
}

interface LogicalExpression <: Expression {
    operator: str;
    left: Expression;
    right: Expression;
}

interface BooleanExpression <: Expression {
    operator: str;
    left: Expression;
    right: Expression;
}

interface UnaryExpression <: Expression {
    operator: str;
    left: Expression;
}

interface ExportKeyword <: Keyword {
    text: str;
}
